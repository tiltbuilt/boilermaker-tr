{#
/**
 * Tilt Boilermaker - Generic Section Entry List Repeater Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{% set styleAdjusts = clone(repeater.children).type('styleAdjustmentsRepeater').one() %}
	
{# Set block id attribute value #}
{% if repeater.customId is defined and repeater.customId != '' %}
	{% set blockId = repeater.customId %}
	{% set headerId = repeater.customId ~ '-mainheader' %}
	{% set subId = repeater.customId ~ '-subhead' %}
	{% set introId = repeater.customId ~ '-intro' %}
	{% set btnId = repeater.customId ~ '-btn' %}
{% else %}
	{% set blockId = repeater.type.handle ~ '-' ~ repeater.id %}
	{% set headerId = repeater.type.handle ~ '-' ~ repeater.id ~ '-mainheader' %}
	{% set subId = repeater.type.handle ~ '-' ~ repeater.id ~ '-subhead' %}
	{% set introId = repeater.type.handle ~ '-' ~ repeater.id ~ '-intro' %}
	{% set btnId = repeater.type.handle ~ '-' ~ repeater.id ~ '-btn' %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block ' ~ repeater.type.handle %}
{% set innerClass = 'inner ' ~ repeater.type.handle ~ '-inner' %}

{#
  ----
  Prepare the query parameters
  -----
#}

{%
  set orderOptions = {
	'dd' : 'postDate desc',
	'da' : 'postDate asc',
	'r'  : 'RAND()',
	'az' : 'title asc',
	'za' : 'title desc',
	'so' : '',
  }
%}
{% set listOrder = repeater.listOrder is defined and repeater.listOrder|length ? repeater.listOrder.value : null %}

{% if listOrder|length %}
  {% set listOrder = listOrder in orderOptions|keys ? orderOptions[listOrder] : 'postDate desc' %}
{% endif %}

{% set paginateItems = repeater.listItemsPerPage == 0 ? false : true %}

{% set sectionsToLoad = repeater['listEntriesSections'] is defined and repeater.listEntriesSections|length and repeater.listEntriesSections[0] is defined and repeater.listEntriesSections[0]|length ? repeater.listEntriesSections : null %}

{# If a number of items isn't specified, get them all and paginate them #}

{% if paginateItems == true %}	
  {% paginate craft.entries.sectionId(sectionsToLoad).orderby(listOrder).limit(repeater.listItemsPerPage).with(['seoImage']) as pageInfo, itemList %}
  {% do seomatic.helper.paginate(pageInfo) %}
{% else %}
  {% set itemList = craft.entries.sectionId(sectionsToLoad).orderby(listOrder).with(['seoImage']).collect() %}
{% endif %}


{# Sort Out Styling Adjustments to set up class lit arrays #}

{# create arrays to collect style changes to primary element and inner and bg #}
{% set styleClasses = [] %}
{% set outerClasses = [] %}
{% set headerClasses = [] %}
{% set subClasses = [] %}
{% set introClasses = [] %}
{% set headerOuterClasses = [] %}
{% set subOuterClasses = [] %}
{% set introOuterClasses = [] %}
{% set listItemClasses = [] %}
{% set listItemBtnClasses = [] %}
{% set listItemImgClasses = [] %}
{% set listItemOuterClasses = [] %}
{% set listItemHeaderClasses = [] %}

{% if styleAdjusts != null %}	

	{# add style changes to array except for padding because it isn't applied to primary element #}
		
	{# Iterate through style sets in adjustment block and write out style adjustment classes to an array. #}
		
	{% for styleSet in clone(styleAdjusts.children).collect() %}
		{% set devSize = styleSet.deviceSize %}		  
		{% set styleSetFieldLayout = styleSet.getFieldLayout() %}
		{% set styleSetFields = styleSetFieldLayout.getCustomFields() %}		
		{% for fieldItem in styleSetFields %}
		
			{# Leave out padding since it goes to a different element and leave out background fields #}			
			{% if fieldItem.handle != 'deviceSize' and fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle starts with 'row') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'column') and not (fieldItem.handle starts with 'background') and styleSet[fieldItem.handle]|length %}				
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}
			
			{# add color classes #}
			{% if fieldItem.handle ends with 'Color' and fieldItem.handle != 'backgroundColor' and styleSet[fieldItem.handle] != null %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle].class %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}
			
			{# Add margin settings to outerCLasses array #}			
			{% if fieldItem.handle ends with 'Margin' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}
			
			{% if fieldItem.handle == 'displaySetting' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}
			
			{# Add row layout classes to to rowClasses array #}			
			{% if fieldItem.handle starts with 'row' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set rowClasses = rowClasses|merge([classItem]) -%}
			{% endif %}	
			
		{% endfor %}
			
		{# Get main header styleset adjustments if any #}			
		{% set headerStyles = clone(styleSet.children).type('styleSetMainHeader').one() %}
		{% if headerStyles != null %}
			{% set headerFieldLayout = headerStyles.getFieldLayout() %}
			{% set headerFields = headerFieldLayout.getCustomFields() %}
			{% for fieldItem in headerFields %}						
				
				{% if fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'background') and headerStyles[fieldItem.handle]|length %}					
					{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
					{%- set headerClasses = headerClasses|merge([classItem]) -%}
				{% endif %}	
				
				{# add color classes #}
				{% if fieldItem.handle ends with 'Color' and headerStyles[fieldItem.handle] != null %}
					{% set classItem = devSize ~ headerStyles[fieldItem.handle].class %}
					{%- set headerClasses = headerClasses|merge([classItem]) -%}
				{% endif %}
				
				{% if fieldItem.handle ends with 'Margin' and headerStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
					{%- set headerOuterClasses = headerOuterClasses|merge([classItem]) -%}
				{% endif %}
				
				{% if fieldItem.handle == 'displaySetting' and headerStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
					{%- set headerOuterClasses = headerOuterClasses|merge([classItem]) -%}
				{% endif %}
				
			{% endfor %}
		{% endif %}
		
		{# Get subhead styleset adjustments if any #}			
		{% if repeater.subheadText|length %}
			{% set subStyles = clone(styleSet.children).type('styleSetSubhead').one() %}
			{% if subStyles != null %}
				{% set subheadFieldLayout = subStyles.getFieldLayout() %}
				{% set subheadFields = subheadFieldLayout.getCustomFields() %}
				{% for fieldItem in subheadFields %}						
					
					{% if fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'background') and subStyles[fieldItem.handle]|length %}					
						{% set classItem = devSize ~ subStyles[fieldItem.handle] %}
						{%- set subClasses = subClasses|merge([classItem]) -%}
					{% endif %}	
					
					{# add color classes #}
					{% if fieldItem.handle ends with 'Color' and subStyles[fieldItem.handle] != null %}
						{% set classItem = devSize ~ subStyles[fieldItem.handle].class %}
						{%- set subClasses = subClasses|merge([classItem]) -%}
					{% endif %}						
					
					{% if fieldItem.handle ends with 'Margin' and subStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ subStyles[fieldItem.handle] %}
						{%- set subOuterClasses = subOuterClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if fieldItem.handle == 'displaySetting' and subStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ subStyles[fieldItem.handle] %}
						{%- set subOuterClasses = subOuterClasses|merge([classItem]) -%}
					{% endif %}
					
				{% endfor %}
			{% endif %}
		{% endif %}
		
		{# Get content text styleset adjustments if any #}
		
		{% if repeater.simpleText|length %}
			{% set introStyles = clone(styleSet.children).type('styleSetContentText').one() %}
			{% if introStyles != null %}
				{% set introFieldLayout = introStyles.getFieldLayout() %}
				{% set introFields = introFieldLayout.getCustomFields() %}
				{% for fieldItem in introFields %}						
					
					{% if fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'background') and introStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
						{%- set introClasses = introClasses|merge([classItem]) -%}
					{% endif %}	
					
					{# add color classes #}
					{% if fieldItem.handle ends with 'Color' and introStyles[fieldItem.handle] != null %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle].class %}
						{%- set introClasses = introClasses|merge([classItem]) -%}
					{% endif %}						
					
					{% if fieldItem.handle ends with 'Margin' and introStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
						{%- set introOuterClasses = introOuterClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if fieldItem.handle == 'displaySetting' and introStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
						{%- set introOuterClasses = introOuterClasses|merge([classItem]) -%}
					{% endif %}
					
				{% endfor %}
			{% endif %}
		{% endif %}
	
		
		{# Get list item styleset adjustments if any #}
		
		{% if itemList|length %}				
			{% set listStyles = clone(styleSet.children).type('styleSetRepeaterItem').one() %}
			{% if listStyles != null %}					
				{% set listFieldLayout = listStyles.getFieldLayout() %}
				{% set listFields = listFieldLayout.getCustomFields() %}
				{% for fieldItem in listFields %}						
					{% if repeater.listItemDisplayStyle.value != 'buttonList' and fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'button') and not (fieldItem.handle == 'boxShadow') and listStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ listStyles[fieldItem.handle] %}
						{%- set listItemClasses = listItemClasses|merge([classItem]) -%}
					{% endif %}									
					
					{% if (repeater.listItemDisplayStyle.value starts with 'card') and (repeater.listItemDisplayStyle.value ends with 'Image') and (fieldItem.handle ends with 'Margin') and listStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ listStyles[fieldItem.handle] %}
						{%- set listItemImgClasses = listItemImgClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if fieldItem.handle == 'displaySetting' and listStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ listStyles[fieldItem.handle] %}
						{%- set listItemImgClasses = listItemImgClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if repeater.listItemDisplayStyle.value == 'buttonList' and (fieldItem.handle ends with 'Margin') and listStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ listStyles[fieldItem.handle] %}
						{%- set listItemBtnClasses = listItemBtnClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if repeater.listItemDisplayStyle.value == 'textList' and (fieldItem.handle ends with 'Margin') and listStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ listStyles[fieldItem.handle] %}
						{%- set listItemOuterClasses = listItemOuterClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if repeater.listItemDisplayStyle.value == 'buttonList' and fieldItem.handle == 'boxShadow' and listStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ listStyles[fieldItem.handle] %}
						{%- set listItemBtnClasses = listItemBtnClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if (repeater.listItemDisplayStyle.value starts with 'card') and fieldItem.handle == 'boxShadow' and listStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ listStyles[fieldItem.handle] %}
						{%- set listItemClasses = listItemClasses|merge([classItem]) -%}
					{% endif %}
					
					{# add button classes to child btn array #}
					{% if (repeater.listItemDisplayStyle.value starts with 'button') and (fieldItem.handle starts with 'button') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle ends with 'Margin') and listStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ listStyles[fieldItem.handle] %}
						{%- set listItemBtnClasses = listItemBtnClasses|merge([classItem]) -%}
					{% endif %}
					
					{# add color classes to respective classes #}
					{% if fieldItem.handle == 'buttonColor' and listStyles[fieldItem.handle] != null %}
						{% set classItem = devSize ~ listStyles[fieldItem.handle].class %}
						{%- set listItemBtnClasses = listItemBtnClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if fieldItem.handle == 'textColor' and listStyles[fieldItem.handle] != null %}
						{% set classItem = devSize ~ listStyles[fieldItem.handle].class %}
						{%- set listItemClasses = listItemClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if (repeater.listItemDisplayStyle.value starts with 'card') and fieldItem.handle == 'borderColor' and listStyles[fieldItem.handle] != null %}
						{% set classItem = devSize ~ listStyles[fieldItem.handle].class %}
						{%- set listItemClasses = listItemClasses|merge([classItem]) -%}
					{% endif %}
												
					{% if (repeater.listItemDisplayStyle.value starts with 'card') and fieldItem.handle == 'backgroundColor' and listStyles[fieldItem.handle] != null %}
						{% set classItem = devSize ~ listStyles[fieldItem.handle].class %}
						{%- set listItemClasses = listItemClasses|merge([classItem]) -%}
					{% endif %}	
									
				{% endfor %}
				
				{# Get list item header styleset adjustments if any #}			
				{% set listHeaderStyles = clone(listStyles.children).type('styleSetMainHeader').one() %}
				{% if listHeaderStyles != null %}
					{% set listHeaderFieldLayout = listHeaderStyles.getFieldLayout() %}
					{% set listHeaderFields = listHeaderFieldLayout.getCustomFields() %}
					{% for fieldItem in listHeaderFields %}						
						
						{% if fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'background') and listHeaderStyles[fieldItem.handle]|length %}					
							{% set classItem = devSize ~ listHeaderStyles[fieldItem.handle] %}
							{%- set listItemHeaderClasses = listItemHeaderClasses|merge([classItem]) -%}
						{% endif %}	
						
						{# add color classes #}
						{% if fieldItem.handle ends with 'Color' and listHeaderStyles[fieldItem.handle] != null %}
							{% set classItem = devSize ~ listHeaderStyles[fieldItem.handle].class %}
							{%- set listItemHeaderClasses = listItemHeaderClasses|merge([classItem]) -%}
						{% endif %}
						
						{% if fieldItem.handle ends with 'Margin' and listHeaderStyles[fieldItem.handle]|length %}
							{% set classItem = devSize ~ listHeaderStyles[fieldItem.handle] %}
							{%- set listItemHeaderClasses = listItemHeaderClasses|merge([classItem]) -%}
						{% endif %}
						
						{% if fieldItem.handle == 'displaySetting' and listHeaderStyles[fieldItem.handle]|length %}
							{% set classItem = devSize ~ listHeaderStyles[fieldItem.handle] %}
							{%- set listItemHeaderClasses = listItemHeaderClasses|merge([classItem]) -%}
						{% endif %}
						
					{% endfor %}
				{% endif %}
				
			{% endif %}
		{% endif %}
		
		{# set up background objects and drop into array. If no color and no image are set them skip styleset #}
		{% if (styleSet.backgroundColor.class ?? false) or (styleSet.backgroundImage[0] ?? false) %}
			{% set bgItem  = {
				'devSize': devSize,
				'bgColor': styleSet.backgroundColor.class ?? '',
				'bgImg': styleSet.backgroundImage[0] ?? null,
				'bgSize': styleSet.backgroundSize ?? '',
				'bgPosition': styleSet.backgroundPosition ?? '',
				'bgRepeat': styleSet.backgroundRepeat ?? '',
				'bgOpacity': styleSet.backgroundOpacity ?? '',
				'bgImgOpacity': styleSet.backgroundImageOpacity ?? '',
			}		
			%}
			{% set bgClasses = bgClasses|merge([bgItem]) %}	
			{% set bgSizes = bgSizes|merge([devSize])%}	
		{% endif %}	
			
	{% endfor %}			

{% endif %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? repeater.customClassList : null) %}


{# set animation classes for reveal #}

{% set animClasses = [] %}
{% if repeater.revealAnimation is defined and repeater.revealAnimation != '' %}  
	{% set animClasses = animClasses|merge(['anim-wrapper', 'anim-child']) %}
	{% set revealClass = repeater.revealAnimation %}
	{% if repeater.animateChildren is not empty %}
		{% if repeater.animateChildren == true %}
			{% set animClasses = animClasses|merge(['anim-parent']) %}
			{% if repeater.staggerChildReveals is not empty %}
				{% if repeater.staggerChildReveals == true %}
					{% set revealClass = revealClass ~ '-stagger' %}
				{% endif %}
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %}  		
		{% endif %}
	{% else %}
		{% set animClasses = animClasses|merge(['anim-elem']) %} 
	{% endif %}	
	{% set animClasses = animClasses|merge([revealClass]) %}	
{% endif %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 	
	<div {{ gMacros.buildClassListBasic(animClasses) -}}>
		<div {{ gMacros.buildClassList(innerClass, styleClasses, null) -}}>	
			
			{% if repeater.subheadText|length and repeater.subheadPosition == 1 %}
			  <{{ repeater.subheadLevel }} {{ gMacros.buildElementAttributes(subId, 'elem-block repeater-subhead ' ~ repeater.subheadBaseClass, subOuterClasses) -}}>
				<div class="anim-wrapper anim-child">
					<div {{ gMacros.buildClassList('inner repeater-subhead-inner', subClasses, null) -}}>
						{{ gMacros.stripTags(repeater.subheadText) }}
					</div>
				</div>
			  </{{ repeater.subheadLevel }}>
			{% endif %}
			
			{% if repeater.headerText|length and repeater.headingLevel != '' %}
				<{{ repeater.headingLevel }} {{ gMacros.buildElementAttributes(headerId, 'elem-block repeater-mainheader ' ~ repeater.mainHeaderBaseClass, headerOuterClasses, null) -}}>
				<div class="anim-wrapper anim-child">
					<div {{ gMacros.buildClassList('inner repeater-mainheader-inner', headerClasses, null) -}}>
						{{ gMacros.stripTags(repeater.headerText) }}
					</div>
				</div>
				</{{ repeater.headingLevel }}>
			{% endif %}
			
			{% if repeater.subheadText|length and repeater.subheadPosition == 0 %}
			  <{{ repeater.subheadLevel }} {{ gMacros.buildElementAttributes(subId, 'elem-block repeater-subhead ' ~ repeater.subheadBaseClass, subOuterClasses) -}}>
				<div class="anim-wrapper anim-child">
					<div {{ gMacros.buildClassList('inner repeater-subhead-inner', subClasses, null) -}}>
						{{ gMacros.stripTags(repeater.subheadText) }}
					</div>
				</div>
			  </{{ repeater.subheadLevel }}>
			{% endif %}
			
			{% if repeater.simpleText|length %}				
				<div {{ gMacros.buildElementAttributes(introId, 'elem-block repeater-intro', introOuterClasses, null) -}}>
					<div class="anim-wrapper anim-child">
						<div {{ gMacros.buildClassList('inner repeater-intro-inner', introClasses, null) -}}>
							{{repeater.simpleText}}
						</div>
					</div>
				</div>
			{% endif %} 
			
			{% if itemList|length %}
							
				
				{% set repeaterData = [] %}
				{% for item in itemList %}
				  {% set repeaterData = repeaterData|merge([item]) %}
				{% endfor %}
				  
				  			
				{% set repeaterTemplateHandle = repeater.listItemDisplayStyle %}    
							
				  {%
					include [
					  '_project/_bodyblocks/repeaters/templates/' ~ repeaterTemplateHandle,
					  '_boilerplate/_bodyblocks/repeaters/templates/' ~ repeaterTemplateHandle,
					] with { 'repeaterData' : repeaterData, 'repeaterHeadingLevel' : repeater.listItemHeadingLevel, 'repeaterShowExcerpt' : repeater.showExcerpt, 'listItemClasses': listItemClasses, 'listItemBtnClasses': listItemBtnClasses, 'listItemImgClasses': listItemImgClasses, 'listItemHeaderClasses': listItemHeaderClasses }
				  %}
			
				{% if paginateItems %}
					{% include ['_project/_partials/pagination', '_boilerplate/_partials/pagination'] %}
				{% endif %}				
			  {% else %}
				<div class="list-no-items">
					  <b>No items found.</b>
				</div>
			  {% endif %} 			  
			
		</div>
		<div class="background repeater-default-bg">
			{% if bgClasses != null %}		
				{{ gMacros.buildElementBackground(bgClasses, bgSizes, {'default': '100vw'}, null) }}
			{% endif %}		
		</div>				
	</div>     
</div>