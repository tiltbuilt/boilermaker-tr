{#
/**
 * Tilt Boilermaker - Generic Button Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# set variables for style adjustment containers  #}
{% set btnAdjusts = block.children.one() %}

{# Set block id attribute value #}
{% if blockId is not defined %}
	{% if block.customId is defined and block.customId != '' %}
		{% set blockId = block.customId %}
	{% else %}
		{% set blockId = 'button-' ~ block.id %}
	{% endif %}
{% endif %}


{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block btn-wrapper' %}
{% set innerClass = 'inner btn-wrapper-inner' %}


{# Sort Out Styling Adjustments to set up class lit arrays #}

{# create arrays to collect style changes to primary element and inner and bg #}
{% set wrapperClasses = [] %}
{% set padClasses = [] %}
{% set styleClasses = [] %}
{% set btnInstStyles = [] %}

{# check if button is in group and if so and there are group styles set use them for wrapper styles #}
{% if inGroup is defined and inGroup and groupStyles is defined and groupStyles != null %}
	{% set wrapperAdjusts = clone(groupStyles.children).type(['not', 'styleControlsButton', 'styleControlsPadding']) %}
	{% set padAdjusts = clone(groupStyles.children).type(['styleControlsPadding']) %}
	{% set btnGroupStyles = clone(groupStyles.children).type(['styleControlsButton']).collect() %}
{% else %}
	{% set wrapperAdjusts = clone(btnAdjusts.children).type(['not', 'styleControlsButton', 'styleControlsPadding']) %}
	{% set padAdjusts = clone(btnAdjusts.children).type(['styleControlsPadding']) %}		
{% endif %}

{% for wrapperItem in wrapperAdjusts.collect() %}
	{% set wrapperClasses = wrapperClasses|merge([wrapperItem]) %}	
{% endfor %}

{% for padItem in padAdjusts.collect() %}
	{% set padClasses = padClasses|merge([padItem]) %}
{% endfor %}

{# style array for actual button styles #}

{% if btnAdjusts != null %}
	{% set btnInstStyles = clone(btnAdjusts.children).type('styleControlsButton').collect() %}
{% endif %}
{% if btnInstStyles|length %}
	{% set styleClasses = btnInstStyles %}
{% else %}
	{% set styleClasses = btnGroupStyles %}	
{% endif %}


{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}


{# set animation classes for reveal #}

{% set animClasses = [] %}
{% if block.revealAnimation is defined and block.revealAnimation != '' %}  
	{% set animClasses = animClasses|merge(['anim-wrapper', 'anim-child']) %}
	{% set revealClass = block.revealAnimation %}
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set animClasses = animClasses|merge(['anim-parent']) %}
			{% if block.staggerChildReveals is not empty %}
				{% if block.staggerChildReveals == true %}
					{% set revealClass = revealClass ~ '-stagger' %}
				{% endif %}
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %}  		
		{% endif %}
	{% else %}
		{% set animClasses = animClasses|merge(['anim-elem']) %} 
	{% endif %}	
	{% set animClasses = animClasses|merge([revealClass]) %}	
{% endif %}

{# OUTPUT #}


{% set buttonLink = block.modalLinkSettings %} {# no link settings, no button #}

{% if buttonLink %}
	<div {{ gMacros.buildElementAttributes(null, blockClass, wrapperClasses) -}}> 	
		<div {{ gMacros.buildClassListBasic(animClasses) -}}>
			<div {{ gMacros.buildClassList(innerClass, padClasses, null) -}}>	
				<button data-modal-target="{{ buttonLink.url }}" {{ gMacros.buildElementAttributes(blockId, 'btn btn-modal', styleClasses, customClassString) -}} >
				  <span>{{ buttonLink.getCustomText('More Info') }}</span>
				</button>
			</div>
		</div>
	</div>
{% endif %}
