{#
/**
 * Tilt Boilermaker - Generic Small CTA Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{% set styleAdjusts = clone(block.children).type('styleAdjustmentsCtaSmall').one() %}
	
{# Set block id attribute value #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
	{% set headerId = block.customId ~ '-mainheader' %}
	{% set subId = block.customId ~ '-subhead' %}
	{% set introId = block.customId ~ '-intro' %}
	{% set btnId = block.customId ~ '-btn' %}
{% else %}
	{% set blockId = 'cta-small-' ~ block.id %}
	{% set headerId = 'cta-small-' ~ block.id ~ '-mainheader' %}
	{% set subId = 'cta-small-' ~ block.id ~ '-subhead' %}
	{% set introId = 'cta-small-' ~ block.id ~ '-intro' %}
	{% set btnId = 'cta-small-' ~ block.id ~ '-btn' %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block ' ~ block.type.handle %}
{% set innerClass = 'inner  ' ~ block.type.handle ~ '-inner' %}


{# Sort Out Styling Adjustments to set up class lit arrays #}

{# create arrays to collect style changes to primary element and inner and bg #}
{% set styleClasses = [] %}
{% set bgClasses = null %}
{% set padClasses = [] %}
{% set headerClasses = [] %}
{% set subClasses = [] %}
{% set introClasses = [] %}
{% set headerPadClasses = [] %}
{% set subPadClasses = [] %}
{% set introPadClasses = [] %}
{% set btnClasses = [] %}
{% set btnPadClasses = [] %}
{% set btnWrapperClasses = [] %}

{% if styleAdjusts != null %}	
	{# add style changes to array except for padding because it isn't applied to primary element #}
		
	{% for styleItem in clone(styleAdjusts.children).type(['not', 'styleControlsPadding', 'styleControlsBackgroundImage', 'styleAdjustmentsMainHeader', 'styleAdjustmentsSubhead', 'styleAdjustmentsIntroText', 'styleAdjustmentsButton']).collect() %}
		{% set styleClasses = styleClasses|merge([styleItem]) %}
	{% endfor %}
	
	{# add separate array to add padding classes since they are applied separately to inner #}
	
	{% for padItem in clone(styleAdjusts.children).type('styleControlsPadding').collect() %}
		{% set padClasses = padClasses|merge([padItem]) %}
	{% endfor %}
	
	{# Set variable for background settings if there are any #}
			
	{% set bgClasses = clone(styleAdjusts.children).type('styleControlsBackgroundImage').one() %}
	
		
	{# Set up Styles for Header, subhead intro text and button #}
	{% if block.headerText|length and block.headingLevel != '' %}
		{% set headerAdjusts = clone(styleAdjusts.children).type('styleAdjustmentsMainHeader').one() %}
		{% if headerAdjusts != null %}
			{% for headerItem in clone(headerAdjusts.children).type(['not', 'styleControlsPadding']).collect() %}
				{% set headerClasses = headerClasses|merge([headerItem]) %}
			{% endfor %}
			{% for headerPadItem in clone(headerAdjusts.children).type('styleControlsPadding').collect() %}
				{% set headerPadClasses = headerPadClasses|merge([headerPadItem]) %}
			{% endfor %}
		{% endif %}
	{% endif %}
	
	{% if block.subheadText|length %}
		{% set subAdjusts = clone(styleAdjusts.children).type('styleAdjustmentsSubhead').one() %}
		{% if subAdjusts != null %}
			{% for subItem in clone(subAdjusts.children).type(['not', 'styleControlsPadding']).collect() %}
				{% set subClasses = subClasses|merge([subItem]) %}
			{% endfor %}
			{% for subPadItem in clone(subAdjusts.children).type('styleControlsPadding').collect() %}
				{% set subPadClasses = subPadClasses|merge([subPadItem]) %}
			{% endfor %}
		{% endif %}
	{% endif %}
	
	{% if block.simpleText|length %}
		{% set introAdjusts = clone(styleAdjusts.children).type('styleAdjustmentsIntroText').one() %}
		{% if introAdjusts != null %}
			{% for introItem in clone(introAdjusts.children).type(['not', 'styleControlsPadding']).collect() %}
				{% set introClasses = introClasses|merge([introItem]) %}
			{% endfor %}
			{% for introPadItem in clone(introAdjusts.children).type('styleControlsPadding').collect() %}
				{% set introPadClasses = introPadClasses|merge([introPadItem]) %}
			{% endfor %}
		{% endif %}
	{% endif %}
		
	{% if block.linkSettings.isEmpty == false %} {# if no button don't bother, can't actually be true #}
		{% set btnAdjusts = clone(styleAdjusts.children).type('styleAdjustmentsButton').one() %}
		{% if btnAdjusts != null %}			
			{% for btnItem in clone(btnAdjusts.children).type(['styleControlsButton']).collect() %}
				{% set btnClasses = btnClasses|merge([btnItem]) %}
			{% endfor %}
			{% for btnPadItem in clone(btnAdjusts.children).type('styleControlsPadding').collect() %}
				{% set btnPadClasses = btnPadClasses|merge([btnPadItem]) %}
			{% endfor %}
			{% for btnWrapperItem in clone(btnAdjusts.children).type(['not', 'styleControlsPadding', 'styleControlsButton']).collect() %}
				{% set btnWrapperClasses = btnWrapperClasses|merge([btnWrapperItem]) %}
			{% endfor %}		
		{% endif %}
	{% endif %}
{% endif %}


{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}


{# set animation classes for reveal #}

{% set animClasses = [] %}
{% if block.revealAnimation is defined and block.revealAnimation != '' %}  
	{% set animClasses = animClasses|merge(['anim-wrapper', 'anim-child']) %}
	{% set revealClass = block.revealAnimation %}
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set animClasses = animClasses|merge(['anim-parent']) %}
			{% if block.staggerChildReveals is not empty %}
				{% if block.staggerChildReveals == true %}
					{% set revealClass = revealClass ~ '-stagger' %}
				{% endif %}
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %}  		
		{% endif %}
	{% else %}
		{% set animClasses = animClasses|merge(['anim-elem']) %} 
	{% endif %}	
	{% set animClasses = animClasses|merge([revealClass]) %}	
{% endif %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, styleClasses, customClassString) -}}> 	
	<div {{ gMacros.buildClassListBasic(animClasses) -}}>
		<div {{ gMacros.buildClassList(innerClass, padClasses, null) -}}>	
			
			{% if block.subheadText|length and block.subheadPosition == 1 %}
			  <{{ block.subheadLevel }} {{ gMacros.buildElementAttributes(subId, 'elem-block ctaSmall-subhead', subClasses) -}}>
				<div class="anim-wrapper anim-child">
					<div {{ gMacros.buildClassList('inner  ctaSmall-subhead-inner', subPadClasses, null) -}}>
						{{ gMacros.stripTags(block.subheadText) }}
					</div>
				</div>
			  </{{ block.subheadLevel }}>
			{% endif %}
			
			{% if block.headerText|length and block.headingLevel != '' %}
				<{{ block.headingLevel }} {{ gMacros.buildElementAttributes(headerId, 'elem-block ctaSmall-mainheader', headerClasses, null) -}}>
				<div class="anim-wrapper anim-child">
					<div {{ gMacros.buildClassList('inner ctaSmall-mainheader-inner', headerPadClasses, null) -}}>
						{{ gMacros.stripTags(block.headerText) }}
					</div>
				</div>
				</{{ block.headingLevel }}>
			{% endif %}
			
			{% if block.subheadText|length and block.subheadPosition == 0 %}
			  <{{ block.subheadLevel }} {{ gMacros.buildElementAttributes(subId, 'elem-block ctaSmall-subhead', subClasses) -}}>
				<div class="anim-wrapper anim-child">
					<div {{ gMacros.buildClassList('inner ctaSmall-subhead-inner', subPadClasses, null) -}}>
						{{ gMacros.stripTags(block.subheadText) }}
					</div>
				</div>
			  </{{ block.subheadLevel }}>
			{% endif %}
			
			{% if block.simpleText|length %}				
				<div {{ gMacros.buildElementAttributes(introId, 'elem-block ctaSmall-intro', introClasses, null) -}}>
					<div class="anim-wrapper anim-child">
						<div {{ gMacros.buildClassList('inner ctaSmall-intro-inner', introPadClasses, null) -}}>
							{{block.simpleText}}
						</div>
					</div>
				</div>
			{% endif %}  
			
			{% set buttonLink = block.linkSettings %} {# no link settings, no button #}
			
			{% if buttonLink %}
				<div {{ gMacros.buildElementAttributes(null, 'elem-block ctSmall-btn-wrapper', btnWrapperClasses) -}}> 	
					<div class="anim-wrapper anim-child">
						<div {{ gMacros.buildClassList('inner ctaSmall-btn-wrapper-inner', btnPadClasses, null) -}}>	
							<a href="{{ buttonLink.url }}" {{- buttonLink.target|length ? ' target="_blank"' : '' }} {{ gMacros.buildElementAttributes(btnId, 'btn btn-ctaSmall', btnClasses, null) -}} {% if buttonLink.ariaLabel|length %}aria-label="{{buttonLink.ariaLabel}}"{% endif %} {% if buttonLink.title|length %} title="{{buttonLink.title}}"{% endif %}>
							  <span>{{ buttonLink.getCustomText('More Info') }}</span>
							</a>
						</div>
					</div>
				</div>
			{% endif %}
						
		</div>
		{% if bgClasses != null %}		  
			{{ gMacros.buildElementBackground(bgClasses, {'default': '100vw'}, null) }}
		{% endif %} 				
	</div>     
</div>