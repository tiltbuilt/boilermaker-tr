{#
/**
 * Tilt Boilermaker - Generic Small CTA Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# Set block id attribute value #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
	{% set headerId = block.customId ~ '-mainheader' %}
	{% set subId = block.customId ~ '-subhead' %}
	{% set introId = block.customId ~ '-intro' %}
	{% set btnId = block.customId ~ '-btn' %}
{% else %}
	{% set blockId = 'cta-small-' ~ block.id %}
	{% set headerId = 'cta-small-' ~ block.id ~ '-mainheader' %}
	{% set subId = 'cta-small-' ~ block.id ~ '-subhead' %}
	{% set introId = 'cta-small-' ~ block.id ~ '-intro' %}
	{% set btnId = 'cta-small-' ~ block.id ~ '-btn' %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = block.type.handle %}
{% set innerClass = 'inner  ' ~ block.type.handle ~ '-inner' %}

{% set buttonLink = block.linkSettings %} {# no link settings, no button #}

{% if block.headingLevel == '' %}
	{% set headingTag = 'div' %}
{% else %}
	{% set headingTag = block.headingLevel %}
{% endif %}

{% if block.subheadLevel == '' %}
	{% set subheadTag = 'div' %}
{% else %}
	{% set subheadTag = block.subheadLevel %}
{% endif %}


{% if block.colorScheme != null and block.colorScheme.class != '' %}
	{% set colorScheme = block.colorScheme.class %}
{% endif %}


{# outerClasses has color scheme class and class if section should have transparent bg instead of bg specified in color scheme #}
{% set outerClasses = ['elem-block', colorScheme, block.topMargin, block.bottomMargin] %}
{% if block.transparentBackground %}
	{% set outerClasses = outerClasses|merge(['bg-off']) %}
{% endif %}

{% set bgSettings = block.backgroundImagery %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}


{# set animation classes for reveal #}

{% set revealClass = [] %}
{% if block.revealAnimation == 'anim-child' %}	
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-pass']) %}			
		{% else %}
			{% set revealClass = revealClass|merge([block.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge([block.revealAnimation]) %}
	{% endif %}	
{% else %}
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-parent']) %}
			{% if block.staggerChildReveals is not empty %}
				{% if block.staggerChildReveals == true %}
					{% set revealClass = revealClass|merge([block.revealAnimation ~ '-stagger']) %}
				{% else %}
					{% set revealClass = revealClass|merge([block.revealAnimation]) %}
				{% endif %}
			{% endif %}			
		{% else %}
			{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}
	{% endif %}			
{% endif %}
{% set outerClasses = outerClasses|merge(revealClass) %}


{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 	
	
	<div class="{{innerClass}}">	
		
		{% if block.subheadText|length and block.subheadPosition == 1 %}					  
			<div {{ gMacros.buildElementAttributes(subId, 'ctaSmall-subhead-outer',['anim-child', block.subheadStyle ~ '-outer'], null) -}}>					  
				  <{{ block.subheadLevel }} {{ gMacros.buildClassListBasic(['inner', 'ctaSmall-subhead-inner', block.subheadStyle]) -}}>
				  <span>{{ gMacros.stripTags(block.subheadText) }}</span>
				</{{ block.subheadLevel }}>
			 
			 </div>				 
		{% endif %}
		
		{% if block.headerText|length and block.headingLevel != '' %}
			<div {{ gMacros.buildElementAttributes(headerId, 'ctaSmall-mainheader', ['anim-child', block.mainHeaderStyle ~ '-outer'], null) -}}>
				<{{ headingTag }} {{ gMacros.buildClassListBasic(['inner', 'ctaSmall-mainheader-inner',  block.mainHeaderStyle]) -}}>
					<span>{{ gMacros.stripTags(block.headerText) }}</span>
				</{{ headingTag }}>
			</div>						
		{% endif %}
		
		{% if block.subheadText|length and block.subheadPosition == 0 %}
		  <div {{ gMacros.buildElementAttributes(subId, 'ctaSmall-subhead-outer',['anim-child', block.subheadStyle ~ '-outer'], null) -}}>						
				<{{ block.subheadLevel }} {{ gMacros.buildClassListBasic(['inner', 'ctaSmall-subhead-inner', block.subheadStyle]) -}}>
					<span>{{ gMacros.stripTags(block.subheadText) }}</span>
				</{{ block.subheadLevel }}>						
			</div>
		{% endif %}
		
		{% if block.simpleText|length %}				
			<div id="{{introId}}" {{ gMacros.buildClassListBasic(['anim-child', 'ctaSmall-intro']) -}}>
				<div class="anim-wrapper anim-child">
					<div {{ gMacros.buildClassListBasic(['inner ctaSmall-intro-inner']) -}}>
						{{block.simpleText}}
					</div>
				</div>
			</div>						
		{% endif %} 			
		
		{% if buttonLink %}
			<div class="anim-child ctaSmall-btn-wrapper">						
				<div class="inner">	
					<a href="{{ buttonLink.url }}" {{- buttonLink.target|length ? ' target="_blank"' : '' }} id="{{btnId}}" {{ gMacros.buildClassListBasic(['btn', 'btn-ctaSmall', block.buttonStyle, block.buttonSize]) -}} {% if buttonLink.ariaLabel|length %}aria-label="{{buttonLink.ariaLabel}}"{% endif %} {% if buttonLink.title|length %} title="{{buttonLink.title}}"{% endif %}>
					  <span>{{ buttonLink.getCustomText('More Info') }}</span>
					</a>
				</div>						
			</div>
		{% endif %}
					
	</div>
	<div class="background">
		{% if bgSettings|length %}		
			{{ gMacros.buildElementBackground(bgSettings, {'default': '100vw'}, null, null) }}
		{% endif %}		
	</div> 				
	    
</div>