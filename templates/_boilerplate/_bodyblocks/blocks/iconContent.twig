{#
/**
 * Tilt Boilermaker - Generic Icon and Content Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{% set styleAdjusts = clone(block.children).type('styleAdjustmentsIconContent').one() %}
	
{# Set block id attribute value #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
	{% set headerId = block.customId ~ '-mainheader' %}
	{% set iconId = block.customId ~ '-icon' %}
	{% set introId = block.customId ~ '-intro' %}
	{% set btnId = block.customId ~ '-btn' %}
{% else %}
	{% set blockId = 'iconContent-' ~ block.id %}
	{% set headerId = 'iconContent-' ~ block.id ~ '-mainheader' %}
	{% set iconId = 'iconContent-' ~ block.id ~ '-icon' %}
	{% set introId = 'iconContent-' ~ block.id ~ '-intro' %}
	{% set btnId = 'iconContent-' ~ block.id ~ '-btn' %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block ' ~ block.type.handle %}
{% set innerClass = 'inner ' ~ block.type.handle ~ '-inner' %}

{% if block.headerText|length or block.simpleText|length or block.linkSettings.isEmpty == false %}
	{% set hasExtras = true %}
{% else %}
	{% set hasExtras = false %}
{% endif %}


{# Sort Out Styling Adjustments to set up class lit arrays #}

{# create arrays to collect style changes to primary element and inner and bg #}
{% set styleClasses = [] %}
{% set outerClasses = [] %}
{% set iconClasses = [] %}
{% set iconOuterClasses = [] %}
{% set headerClasses = [] %}
{% set introClasses = [] %}
{% set headerOuterClasses = [] %}
{% set introOuterClasses = [] %}
{% set btnGrpClasses = [] %}
{% set btnGrpOuterClasses = [] %}
{% set childBtnClasses = [] %}
{% set childBtnOuterClasses = [] %}

{% if styleAdjusts != null %}	
	
	{# Iterate through style sets in adjustment block and write out style adjustment classes to an array. #}
		
	{% for styleSet in clone(styleAdjusts.children).collect() %}
		{% set devSize = styleSet.deviceSize %}		  
		{% set styleSetFieldLayout = styleSet.getFieldLayout() %}
		{% set styleSetFields = styleSetFieldLayout.getCustomFields() %}		
		{% for fieldItem in styleSetFields %}
		
			{# Leave out padding since it goes to a different element and leave out background fields #}			
			{% if fieldItem.handle != 'deviceSize' and fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle starts with 'row') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'column') and not (fieldItem.handle starts with 'background') and styleSet[fieldItem.handle]|length %}				
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}			
						
			{# Add margin settings to outerClasses array #}			
			{% if fieldItem.handle ends with 'Margin' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}		
			
			{% if fieldItem.handle == 'displaySetting' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}
			
		{% endfor %}
		
		{# Get iconstyleset adjustments if any #}			
		
		{% set iconStyles = clone(styleSet.children).type('styleSetIcon').one() %}
		{% if iconStyles != null %}
			{% set iconFieldLayout = iconStyles.getFieldLayout() %}
			{% set iconFields = iconFieldLayout.getCustomFields() %}
			{% for fieldItem in iconFields %}						
				
						
				{# add color classes #}
				{% if fieldItem.handle == 'iconColor' and iconStyles[fieldItem.handle] != null %}
					{% set classItem = devSize ~ iconStyles[fieldItem.handle].class %}
					{%- set iconClasses = iconClasses|merge([classItem]) -%}
				{% endif %}
				
				{% if fieldItem.handle == 'bottomMargin' and iconStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ iconStyles[fieldItem.handle] %}
					{%- set iconOuterClasses = iconOuterClasses|merge([classItem]) -%}
				{% endif %}
				
				{% if fieldItem.handle == 'iconSize' and iconStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ iconStyles[fieldItem.handle] %}
					{%- set iconClasses = iconClasses|merge([classItem]) -%}
				{% endif %}
				
				{% if fieldItem.handle == 'iconAlignment' and iconStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ iconStyles[fieldItem.handle] %}
					{%- set iconClasses = iconClasses|merge([classItem]) -%}
				{% endif %}
				
			{% endfor %}
		{% endif %}
		
			
		{# Get main header styleset adjustments if any #}			
		{% if block.headerText|length %}
			{% set headerStyles = clone(styleSet.children).type('styleSetMainHeader').one() %}
			{% if headerStyles != null %}
				{% set headerFieldLayout = headerStyles.getFieldLayout() %}
				{% set headerFields = headerFieldLayout.getCustomFields() %}
				{% for fieldItem in headerFields %}						
					
					{% if fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'background') and headerStyles[fieldItem.handle]|length %}					
						{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
						{%- set headerClasses = headerClasses|merge([classItem]) -%}
					{% endif %}	
					
					{# add color classes #}
					{% if fieldItem.handle ends with 'Color' and headerStyles[fieldItem.handle] != null %}
						{% set classItem = devSize ~ headerStyles[fieldItem.handle].class %}
						{%- set headerClasses = headerClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if fieldItem.handle ends with 'Margin' and headerStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
						{%- set headerOuterClasses = headerOuterClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if fieldItem.handle == 'displaySetting' and headerStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
						{%- set headerOuterClasses = headerOuterClasses|merge([classItem]) -%}
					{% endif %}
					
				{% endfor %}
			{% endif %}
		{% endif %}
		
		
		{# Get content text styleset adjustments if any #}
		
		{% if block.simpleText|length %}
			{% set introStyles = clone(styleSet.children).type('styleSetContentText').one() %}
			{% if introStyles != null %}
				{% set introFieldLayout = introStyles.getFieldLayout() %}
				{% set introFields = introFieldLayout.getCustomFields() %}
				{% for fieldItem in introFields %}						
					
					{% if fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'background') and introStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
						{%- set introClasses = introClasses|merge([classItem]) -%}
					{% endif %}	
					
					{# add color classes #}
					{% if fieldItem.handle ends with 'Color' and introStyles[fieldItem.handle] != null %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle].class %}
						{%- set introClasses = introClasses|merge([classItem]) -%}
					{% endif %}						
					
					{% if fieldItem.handle ends with 'Margin' and introStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
						{%- set introOuterClasses = introOuterClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if fieldItem.handle == 'displaySetting' and introStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
						{%- set introOuterClasses = introOuterClasses|merge([classItem]) -%}
					{% endif %}
					
				{% endfor %}
			{% endif %}
		{% endif %}
	
		
		{# Get button group styleset adjustments if any #}
		
		{% if block.linkSettings.isEmpty == false %} 				
			{% set btnGrpStyles = clone(styleSet.children).type('styleSetChildButtons').one() %}
			{% if btnGrpStyles != null %}					
				{% set btnGrpFieldLayout = btnGrpStyles.getFieldLayout() %}
				{% set btnGrpFields = btnGrpFieldLayout.getCustomFields() %}
				{% for fieldItem in btnGrpFields %}						
					{% if not (fieldItem.handle ends with 'Margin') and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'button') and btnGrpStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
						{%- set btnGrpClasses = btnGrpClasses|merge([classItem]) -%}
					{% endif %}									
					
					{% if fieldItem.handle ends with 'Margin' and btnGrpStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
						{%- set btnGrpClasses = btnGrpClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if fieldItem.handle == 'displaySetting' and btnGrpStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
						{%- set btnGrpClasses = btnGrpClasses|merge([classItem]) -%}
					{% endif %}
					
					{# add button classes to child btn array #}
					{% if (fieldItem.handle starts with 'button') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle ends with 'Margin') and btnGrpStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
						{%- set childBtnClasses = childBtnClasses|merge([classItem]) -%}
					{% endif %}
					
					{# add color classes to btn classes #}
					{% if fieldItem.handle ends with 'Color' and btnGrpStyles[fieldItem.handle] != null %}
						{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle].class %}
						{%- set childBtnClasses = childBtnClasses|merge([classItem]) -%}
					{% endif %}
												
					{# add button margin classes to array #}
					{% if (fieldItem.handle starts with 'button') and (fieldItem.handle ends with 'Margin') and btnGrpStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
						{%- set childBtnOuterClasses = childBtnOuterClasses|merge([classItem]) -%}
					{% endif %}	
									
				{% endfor %}
			{% endif %}
		{% endif %}		
				
	{% endfor %}
	
{% endif %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}


{# set animation classes for reveal #}

{% set animClasses = [] %}
{% if block.revealAnimation is defined and block.revealAnimation != '' %}  
	{% set animClasses = animClasses|merge(['anim-wrapper', 'anim-child']) %}
	{% set revealClass = block.revealAnimation %}
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set animClasses = animClasses|merge(['anim-parent']) %}
			{% if block.staggerChildReveals is not empty %}
				{% if block.staggerChildReveals == true %}
					{% set revealClass = revealClass ~ '-stagger' %}
				{% endif %}
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %}  		
		{% endif %}
	{% else %}
		{% set animClasses = animClasses|merge(['anim-elem']) %} 
	{% endif %}	
	{% set animClasses = animClasses|merge([revealClass]) %}	
{% endif %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 	
	<div {{ gMacros.buildClassListBasic(animClasses) -}}>
		<div {{ gMacros.buildClassList(innerClass, styleClasses, null) -}}>	
			
			{% if hasExtras and block.blockLayout == 'h' %}			
				<div class="row iconContent-row {{block.rowVerticalAlignment}} anim-pass">
					<div class="iconContent-icon-column anim-pass">								
			{% endif %}
			
			<div {{ gMacros.buildElementAttributes(iconId, 'elem-block iconContent-icon-block', iconOuterClasses, null) -}}>
				<div class="anim-wrapper anim-child">
					<div {{ gMacros.buildClassList('inner iconContent-icon-block-inner', iconClasses, null) -}}>
						<svg><use xlink:href="#{{ block.iconAsset.sprite }}"></use></svg>
					</div>
				</div>
			</div>
			
			{% if hasExtras %}
				{% if block.blockLayout == 'h' %}			
					</div>			
					<div class="iconContent-content-column anim-pass">
				{% endif %}
				
				{% if block.headerText|length %}
					{% if block.headingLevel == '' %}
						{% set headingTag = 'div' %}
					{% else %}
						{% set headingTag = block.headingLevel %}
					{% endif %}
					<div {{ gMacros.buildElementAttributes(headerId, 'elem-block iconContent-mainheader', headerOuterClasses, null) -}}>
						<div class="anim-wrapper anim-child">
							<{{ headingTag }} {{ gMacros.buildClassList('inner iconContent-mainheader-inner', headerClasses, null) -}}>
								{{ gMacros.stripTags(block.headerText) }}
							</{{ headingTag }}>
						</div>
					</div>
				{% endif %}
				
				{% if block.simpleText|length %}				
					<div {{ gMacros.buildElementAttributes(introId, 'elem-block iconContent-intro', introOuterClasses, null) -}}>
						<div class="anim-wrapper anim-child">
							<div {{ gMacros.buildClassList('inner iconContent-intro-inner', introClasses, null) -}}>
								{{block.simpleText}}
							</div>
						</div>
					</div>
				{% endif %}  
				
				{% set buttonLink = block.linkSettings %} {# no link settings, no button #}
				
				{% if buttonLink %}
					<div {{ gMacros.buildElementAttributes(null, 'elem-block iconContent-btn-wrapper', btnGrpClasses) -}}> 	
						<div class="anim-wrapper anim-child">
							<div {{ gMacros.buildClassList('inner', childBtnOuterClasses, null) -}}>	
								<a href="{{ buttonLink.url }}" {{- buttonLink.target|length ? ' target="_blank"' : '' }} {{ gMacros.buildElementAttributes(btnId, 'btn btn-iconContent', childBtnClasses, null) -}} {% if buttonLink.ariaLabel|length %}aria-label="{{buttonLink.ariaLabel}}"{% endif %} {% if buttonLink.title|length %} title="{{buttonLink.title}}"{% endif %}>
								  <span>{{ buttonLink.getCustomText('More Info') }}</span>
								</a>
							</div>
						</div>
					</div>
				{% endif %}
				
				{% if block.blockLayout == 'h' %}			
					</div>			
				</div>
				{% endif %}								
			{% endif %}
						
		</div>				
	</div>     
</div>