{#
/**
 * Tilt Boilermaker - Generic Video Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# set variables for content child and style adjustment containers  #}
{% if block.youTubeVideoId|length and block.imageAsset|length %}

	{% set styleAdjusts = block.children.one() %}
		
	{# Set block id attribute value #}
	{% if block.customId is defined and block.customId != '' %}
		{% set blockId = block.customId %}
		{% set imageId = block.customId ~ '-image' %}
	{% else %}
		{% set blockId = 'videoBlock-' ~ block.id %}
		{% set imageId = 'videoBlock-' ~ block.id ~ '-image' %}
	{% endif %}
	
	{% set image = block.imageAsset[0] %}
	
	{# set alt text #}	
	{% set imageAltText = image.alt is defined and image.alt|length ? image.alt : image.title %}
	
	{# Set block type handle as class name for styling #}
	{% set blockClass = 'elem-block ' ~ block.type.handle %}
	{% set innerClass = 'inner ' ~ block.type.handle ~ '-inner' %}
	
		
	{# Sort Out Styling Adjustments to set up class lit arrays #}
	
	{# create arrays to collect style changes to primary element and inner and bg #}
	{% set styleClasses = [] %}
			
	{% if styleAdjusts != null %}	
		{# add style changes to array except for padding because it isn't applied to primary element #}
			
		{% for styleItem in clone(styleAdjusts.children).collect() %}
			{% set styleClasses = styleClasses|merge([styleItem]) %}
		{% endfor %}	
		
	{% endif %}
	
	
	{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
	{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}
	
	
	{# set animation classes for reveal #}
	
	{% set animClasses = [] %}
	{% if block.revealAnimation is defined and block.revealAnimation != '' %}  
		{% set animClasses = animClasses|merge(['anim-wrapper', 'anim-child']) %}
		{% set revealClass = block.revealAnimation %}
		{% if block.animateChildren is not empty %}
			{% if block.animateChildren == true %}
				{% set animClasses = animClasses|merge(['anim-parent']) %}
				{% if block.staggerChildReveals is not empty %}
					{% if block.staggerChildReveals == true %}
						{% set revealClass = revealClass ~ '-stagger' %}
					{% endif %}
				{% endif %}
			{% else %}
				{% set animClasses = animClasses|merge(['anim-elem']) %}  		
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %} 
		{% endif %}	
		{% set animClasses = animClasses|merge([revealClass]) %}	
	{% endif %}
	
	{# OUTPUT #}
	
	<div {{ gMacros.buildElementAttributes(blockId, blockClass, styleClasses, customClassString) -}}> 	
		<div {{ gMacros.buildClassListBasic(animClasses) -}}>
			<div class="{{innerClass}}">	
				<div class="video-frame">
					<div class="video-play-btn">
						<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewbox="0 0 126 126">
						  <use xlink:href="#icon-play-circle-o" href="#icon-play-circle-o"></use>
						</svg>
					</div>
					<div class="video-image">
						  
						{%- set transformedImages = craft.imagerx.transformImage(image, 'thumbnail')	%}
						  
						{% if craft.imager.serverSupportsWebp() %}
							{% set transformedImagesWebp = craft.imagerx.transformImage(image, 'thumbnailWebp') %}
						{% endif %}
						  
						{% if transformedImages|length %}		  
						<picture>	  
							  
							{% if craft.imager.serverSupportsWebp() %}
							  <source data-sizes="auto" data-srcset="{{ craft.imager.srcset(transformedImagesWebp) }}" type="image/webp">
							{% endif %}
							
							<img src="{{ craft.imager.base64Pixel() }}"
							data-sizes="auto"
							data-src="{{ transformedImages[0] }}"
							data-srcset="{{ craft.imager.srcset(transformedImages) }}"
							alt="{{ imageAltText }}" class="video-thumbnail lazyload"
							>
						</picture>
						{% endif %}
					</div>
					<div class="video-player">
						<div class="video" id="vid-{{ block.youTubeVideoId }}" data-youtube-id="{{ block.youTubeVideoId }}"></div>
					</div>
				</div>								
			</div>				
		</div>     
	</div>
{% endif %}