{#
/**
 * Tilt Boilermaker - Generic Content Video Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# Don't show if there isn't an image set #}
{% if block.videoContent|length %}

	{% set video = block.videoContent[0] %}
	{% set embeddedVideo = craft.embeddedAssets.get(video) %}	
	
	{# Set block id attribute value #}
	{% if block.customId is defined and block.customId != '' %}
	  {% set blockId = block.customId %}	  
	{% else %}
	  {% set blockId = block.type.handle ~ block.id %}	  
	{% endif %}
	
	{# Set block type handle as class name for styling #}
	{% set blockClass = block.type.handle %}
	{% set innerClass = 'inner video-block-inner' %}
	
		
	{# set outer tag depending on if element has caption or not #}
	{% if block.imageCaption != '' %}
		{% set outerTag = 'figure' %}
	{% else %}
		{% set outerTag = 'div' %}
	{% endif %}
	
	{# Sort Out Styling Adjustments to set up class lit arrays #}
	
	{# create arrays to collect style changes to primary element #}
	
	{% set outerClasses = [colorScheme, block.topMargin, block.bottomMargin] %}
	{% for mediaStyle in block.imageVideoLayout %}
		{% if mediaStyle.imageVideoSize != '' %}
			{% set outerClasses = outerClasses|merge([mediaStyle.deviceSize ~ mediaStyle.imageVideoSize]) %}
		{% endif %}
		{% if mediaStyle.textWrapPosition != '' %}
			{% set outerClasses = outerClasses|merge([mediaStyle.deviceSize ~ mediaStyle.textWrapPosition]) %}
		{% endif %}
	{% endfor %}	
		
	{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
	{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}
	
		
	{# set animation classes for reveal #}
	
	{% set revealClass = [] %}
	{% if block.revealAnimation == 'anim-child' %}	
		{% if block.animateChildren is not empty %}
			{% if block.animateChildren == true %}
				{% set revealClass = revealClass|merge(['anim-pass']) %}			
			{% else %}
				{% set revealClass = revealClass|merge([block.revealAnimation]) %}		
			{% endif %}
		{% else %}
			{% set revealClass = revealClass|merge([block.revealAnimation]) %}
		{% endif %}	
	{% else %}
		{% if block.animateChildren is not empty %}
			{% if block.animateChildren == true %}
				{% set revealClass = revealClass|merge(['anim-parent']) %}
				{% if block.staggerChildReveals is not empty %}
					{% if block.staggerChildReveals == true %}
						{% set revealClass = revealClass|merge([block.revealAnimation ~ '-stagger']) %}
					{% else %}
						{% set revealClass = revealClass|merge([block.revealAnimation]) %}
					{% endif %}
				{% endif %}			
			{% else %}
				{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}		
			{% endif %}
		{% else %}
			{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}
		{% endif %}			
	{% endif %}
	{% set outerClasses = outerClasses|merge(revealClass) %}
	
	{# OUTPUT #}
	{% if embeddedVideo and embeddedVideo.isSafe %}
	<{{outerTag}} {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 	
		
		<div class="{{innerClass}}">				
			
			<div class="video-embed-wrapper" style="padding-top: {{embeddedVideo.aspectRatio}}%">
				<div class="video-player">						
					{{ embeddedVideo.getIframeCode(
						['rel=0', 'modestbranding=1'],
						['loading=lazy', 'allowfullscreen']
					) }}
				</div>
			</div>				
			
			{% if block.imageCaption != '' %}
				<figcaption class="image-caption">
					{{ block.imageCaption }}						
				</figcaption>				  
			{% endif %}  
		</div>							
		     
	</{{outerTag}}>
	{% endif %}
{% endif %}