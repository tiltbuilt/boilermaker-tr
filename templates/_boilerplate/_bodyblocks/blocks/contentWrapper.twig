{#
/**
 * Tilt Boilermaker - Generic Content Wrapper Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# Set block id attribute value #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
	{% set headerId = block.customId ~ '-header' %}
{% else %}
	{% set blockId = 'wrapper-' ~ block.id %}
	{% set headerId = 'wrapper-' ~ block.id ~ '-header' %}	
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = block.type.handle %}
{% set innerClass = 'inner ' ~ block.type.handle ~ '-inner' %}

{% if block.headingLevel == '' %}
	{% set headingTag = 'div' %}
{% else %}
	{% set headingTag = block.headingLevel %}
{% endif %}


{# create arrays to collect style changes to primary element and inner and bg #}
{# set styleClasses with classes needed to be applied to container inner div #}
{% set styleClasses = [block.topPadding, block.bottomPadding, block.gutterPadding, block.contentAlignment] %}

{% if block.contentWrapperTextStyling|length %}

	{% for textStyle in block.contentWrapperTextStyling %}
		{% set styleClasses = styleClasses|merge([textStyle.font, textStyle.fontSize, textStyle.lineHeight, textStyle.fontWeight, textStyle.italic, textStyle.textCase, textStyle.letterSpacing]) %}
	{% endfor %}
	
{% endif %}

{% if block.colorScheme != null and block.colorScheme.class != '' %}
	{% set colorScheme = block.colorScheme.class %}
{% endif %}

{# outerClasses has color scheme class and class if section should have transparent bg instead of bg specified in color scheme #}
{% set outerClasses = ['elem-block', colorScheme, block.topMargin, block.bottomMargin] %}
{% if block.transparentBackground %}
	{% set outerClasses = outerClasses|merge(['bg-off']) %}
{% endif %}


{% set bgSettings = block.backgroundImagery %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}

{# set animation classes for reveal #}

{% set revealClass = [] %}
{% if block.revealAnimation == 'anim-child' %}	
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-pass']) %}			
		{% else %}
			{% set revealClass = revealClass|merge([block.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge([block.revealAnimation]) %}
	{% endif %}	
{% else %}
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-parent']) %}
			{% if block.staggerChildReveals is not empty %}
				{% if block.staggerChildReveals == true %}
					{% set revealClass = revealClass|merge([block.revealAnimation ~ '-stagger']) %}
				{% else %}
					{% set revealClass = revealClass|merge([block.revealAnimation]) %}
				{% endif %}
			{% endif %}			
		{% else %}
			{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}
	{% endif %}			
{% endif %}
{% set outerClasses = outerClasses|merge(revealClass) %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 
		
	<div {{ gMacros.buildClassList(innerClass, styleClasses, null) -}}>
					
		{% if block.headerText|length and block.headingLevel %} 
			<div {{ gMacros.buildElementAttributes(headerId, 'contentWrapper-mainheader', ['elem-block', block.mainHeaderStyle ~ '-outer'], null) -}}>
				<div class="anim-wrapper anim-child">
					<{{ headingTag }} {{ gMacros.buildClassListBasic(['inner', 'contentWrapper-mainheader-inner',  block.mainHeaderStyle]) -}}>
						<span>{{ gMacros.stripTags(block.headerText) }}</span>
					</{{ headingTag }}>
				</div>
			</div>
		{% endif %}
					
		{% for child in clone(block.children).collect() %}					
			
			{% if child.type.handle starts with 'row' %}
				  {%
					include [
					  '_project/_bodyblocks/rows/' ~ child.type.handle,
					  '_boilerplate/_bodyblocks/rows/' ~ child.type.handle,
					  '_project/_bodyblocks/rows/row',
					  '_boilerplate/_bodyblocks/rows/row'
					] with { 'row' :  child }
				  %}
			  {% elseif child.type.handle starts with 'repeater' %}
				  {%
					include [
					  '_project/_bodyblocks/repeaters/' ~ child.type.handle,
					  '_boilerplate/_bodyblocks/repeaters/' ~ child.type.handle,
					  '_project/_bodyblocks/repeaters/repeater',
					  '_boilerplate/_bodyblocks/repeaters/repeater'
					] with { 'repeater' :  child }
				  %}
			  {% elseif child.type.handle starts with 'accordion' %}
				{%
				  include [
					'_project/_bodyblocks/accordions/' ~ child.type.handle,
					'_boilerplate/_bodyblocks/accordions/' ~ child.type.handle,
					'_project/_bodyblocks/accordions/accordion',
					'_boilerplate/_bodyblocks/accordions/accordion'
				  ] with { 'accordion' :  child }
				%}
			  {% elseif child.type.handle starts with 'tabSet' %}
				{%
				  include [
					'_project/_bodyblocks/tabs/' ~ child.type.handle,
					'_boilerplate/_bodyblocks/tabs/' ~ child.type.handle,
					'_project/_bodyblocks/tabs/tabSet',
					'_boilerplate/_bodyblocks/tabs/tabSet'
				  ] with { 'tabSet' :  child }
				%}
			  {% elseif child.type.handle starts with 'tabPanel' %}
				{%
				  include [
					'_project/_bodyblocks/tabs/' ~ child.type.handle,
					'_boilerplate/_bodyblocks/tabs/' ~ child.type.handle,
					'_project/_bodyblocks/tabs/tabPanel',
					'_boilerplate/_bodyblocks/tabs/tabPanel'
				  ] with { 'tabPanel' :  child }
				%}
			  {% else %}
				  {%
					include [
					  '_project/_bodyblocks/blocks/' ~ child.type.handle,
					  '_boilerplate/_bodyblocks/blocks/' ~ child.type.handle,
					  '_project/_bodyblocks/blocks/block',
					  '_boilerplate/_bodyblocks/blocks/block'
					] ignore missing with { 'block' :  child }
				  %}
			  {% endif %}
			
		{% endfor %}
				
	</div>
	<div class="background">
		{% if bgSettings|length %}		
			{{ gMacros.buildElementBackground(bgSettings, {'default': '100vw'}, null, null) }}
		{% endif %}		
	</div>			
	     
</div>
