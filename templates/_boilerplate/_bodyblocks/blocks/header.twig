{#
/**
 * Tilt Boilermaker - Generic Header Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

	
{# Set block id attribute value #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
	{% set headerId = block.customId ~ '-mainheader' %}
	{% set subId = block.customId ~ '-subhead' %}
	{% set introId = block.customId ~ '-intro' %}
{% else %}
	{% set blockId = 'header-' ~ block.id %}
	{% set headerId = 'header-' ~ block.id ~ '-mainheader' %}
	{% set subId = 'header-' ~ block.id ~ '-subhead' %}
	{% set introId = 'header-' ~ block.id ~ '-intro' %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = block.type.handle %}
{% set innerClass = 'inner ' ~ block.type.handle ~ '-inner' %}
{# create arrays to collect style changes to primary element and inner and bg #}
{% set styleClasses = [] %}
{% set outerClasses = [colorScheme, block.topMargin, block.bottomMargin] %}

{% set mainHeaderClasses = ['inner', 'header-mainheader-inner',  block.mainHeaderStyle] %}
{% set mainHeaderOuterClasses = ['anim-child', block.mainHeaderStyle ~ '-outer'] %}
{% set subheadClasses = ['inner', 'header-subhead-inner', block.subheadStyle] %}
{% set subheadOuterClasses = ['anim-child', block.subheadStyle ~ '-outer'] %}

{% if block.mainHeaderAdjustments|length %}
	{% for textStyle in block.mainHeaderAdjustments %}
		{% if textStyle.fontSize != '' %}
			{% set mainHeaderClasses = mainHeaderClasses|merge([textStyle.deviceSize ~ textStyle.fontSize]) %}
		{% endif %}
		{% if textStyle.lineHeight != '' %}
			{% set mainHeaderClasses = mainHeaderClasses|merge([textStyle.deviceSize ~ textStyle.lineHeight]) %}
		{% endif %}
		{% if textStyle.alignment != '' %}
			{% set mainHeaderClasses = mainHeaderClasses|merge([textStyle.deviceSize ~ textStyle.alignment]) %}
		{% endif %}
		{% if textStyle.topMargin != '' %}
			{% set mainHeaderOuterClasses = mainHeaderOuterClasses|merge([textStyle.deviceSize ~ textStyle.topMargin]) %}
		{% endif %}
		{% if textStyle.bottomMargin != '' %}
			{% set mainHeaderOuterClasses = mainHeaderOuterClasses|merge([textStyle.deviceSize ~ textStyle.bottomMargin]) %}
		{% endif %}
	{% endfor %}
{% endif %}

{% if block.subheadAdjustments|length %}
	{% for textStyle in block.subheadAdjustments %}
		{% if textStyle.fontSize != '' %}
			{% set subheadClasses = subheadClasses|merge([textStyle.deviceSize ~ textStyle.fontSize]) %}
		{% endif %}
		{% if textStyle.lineHeight != '' %}
			{% set subheadClasses = subheadClasses|merge([textStyle.deviceSize ~ textStyle.lineHeight]) %}
		{% endif %}
		{% if textStyle.alignment != '' %}
			{% set subheadClasses = subheadClasses|merge([textStyle.deviceSize ~ textStyle.alignment]) %}
		{% endif %}
		{% if textStyle.topMargin != '' %}
			{% set subheadOuterClasses = subheadOuterClasses|merge([textStyle.deviceSize ~ textStyle.topMargin]) %}
		{% endif %}
		{% if textStyle.bottomMargin != '' %}
			{% set subheadOuterClasses = subheadOuterClasses|merge([textStyle.deviceSize ~ textStyle.bottomMargin]) %}
		{% endif %}
	{% endfor %}
{% endif %}

{% if block.headingLevel == '' %}
	{% set headingTag = 'div' %}
{% else %}
	{% set headingTag = block.headingLevel %}
{% endif %}

{% if block.subheadLevel == '' %}
	{% set subheadTag = 'div' %}
{% else %}
	{% set subheadTag = block.subheadLevel %}
{% endif %}


{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}


{# set animation classes for reveal #}

{% set revealClass = [] %}
{% if block.revealAnimation == 'anim-child' %}	
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-pass']) %}			
		{% else %}
			{% set revealClass = revealClass|merge([block.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge([block.revealAnimation]) %}
	{% endif %}	
{% else %}
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-parent']) %}
			{% if block.staggerChildReveals is not empty %}
				{% if block.staggerChildReveals == true %}
					{% set revealClass = revealClass|merge([block.revealAnimation ~ '-stagger']) %}
				{% else %}
					{% set revealClass = revealClass|merge([block.revealAnimation]) %}
				{% endif %}
			{% endif %}			
		{% else %}
			{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}
	{% endif %}			
{% endif %}
{% set outerClasses = outerClasses|merge(revealClass) %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}>		
	
	<div class="{{innerClass}}">	
		
		{% if block.subheadText|length and block.subheadPosition == 1 %}
			<div {{ gMacros.buildElementAttributes(subId, 'header-subhead-outer',subheadOuterClasses, null) -}}>				
				<{{ subheadTag }} {{ gMacros.buildClassListBasic(subheadClasses) -}}>
					<span>{{ gMacros.stripTags(block.subheadText) }}</span>
				</{{ subheadTag }}>				
			</div>
		{% endif %}
		
		{% if block.headerText|length and block.headingLevel != '' %}
			<div {{ gMacros.buildElementAttributes(headerId, 'header-mainheader-outer', mainHeaderOuterClasses, null) -}}>				
				<{{ headingTag }} {{ gMacros.buildClassListBasic(mainHeaderClasses) -}}>
					<span>{{ gMacros.stripTags(block.headerText) }}</span>
				</{{ headingTag }}>				
			</div>
		{% endif %}
		
		{% if block.subheadText|length and block.subheadPosition == 0 %}
			<div id="{{subId}}" {{ gMacros.buildElementAttributes(subId, 'header-subhead-outer',subheadOuterClasses, null) -}}>				
				<{{ subheadTag }} {{ gMacros.buildClassListBasic(subheadClasses) -}}>
					<span>{{ gMacros.stripTags(block.subheadText) }}</span>
				</{{ subheadTag }}>				
			</div>
		{% endif %}
		
		{% if block.simpleText|length %}				
			<div id="{{introId}}" {{ gMacros.buildClassListBasic(['anim-child', 'header-intro']) -}}>				
				<div {{ gMacros.buildClassListBasic(['inner header-intro-inner']) -}}>
					{{block.simpleText}}
				</div>				
			</div>
		{% endif %}  
					
						
		{% for child in clone(block.children).collect() %}				
												
		  {%
			include [
			  '_project/_bodyblocks/blocks/' ~ child.type.handle,
			  '_boilerplate/_bodyblocks/blocks/' ~ child.type.handle,
			  '_project/_bodyblocks/blocks/block',
			  '_boilerplate/_bodyblocks/blocks/block'
			] ignore missing with { 'block' :  child}
		  %}									  
			
		{% endfor %}					
		
	</div>				
	    
</div>
