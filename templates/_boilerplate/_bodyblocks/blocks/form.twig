{#
/**
 * Tilt Boilermaker - Generic Form Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# set variables for content child and style adjustment containers  #}
{% set styleAdjusts = block.children.one() %}
	
{# Set block id attribute value #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
	{% set headerId = block.customId ~ '-header' %}
	{% set introId = block.customId ~ '-intro' %}
{% else %}
	{% set blockId = 'form-' ~ block.id %}
	{% set headerId = 'form-' ~ block.id  ~ '-header' %}
	{% set introId = 'form-' ~ block.id  ~ '-intro' %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = block.type.handle %}
{% set innerClass = 'inner ' ~ block.type.handle ~ '-inner' %}


{% if block.colorScheme.class != '' %}
	{% set colorScheme = block.colorScheme.class %}
{% endif %}


{# create arrays to collect style changes to primary element and inner and bg #}
{% set styleClasses = [innerClass, block.topPadding, block.bottomPadding, block.gutterPadding, block.contentAlignment] %}
{% set outerClasses = ['elem-block', block.topMargin, block.bottomMargin, colorScheme] %}

{% if block.transparentBackground %}
	{% set outerClasses = outerClasses|merge(['bg-transparent']) %}
{% endif %}


{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}


{# set animation classes for reveal #}

{% set revealClass = [] %}
{% if block.revealAnimation == 'anim-child' %}	
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-pass']) %}			
		{% else %}
			{% set revealClass = revealClass|merge([block.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge([block.revealAnimation]) %}
	{% endif %}	
{% else %}
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-parent']) %}
			{% if block.staggerChildReveals is not empty %}
				{% if block.staggerChildReveals == true %}
					{% set revealClass = revealClass|merge([block.revealAnimation ~ '-stagger']) %}
				{% else %}
					{% set revealClass = revealClass|merge([block.revealAnimation]) %}
				{% endif %}
			{% endif %}			
		{% else %}
			{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}
	{% endif %}			
{% endif %}
{% set outerClasses = outerClasses|merge(revealClass) %}
{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 	
	
	<div  {{ gMacros.buildClassListBasic(styleClasses) -}}>	
		{% if block.headerText|length %}
			{% if block.headingLevel == '' %}
				{% set headingTag = 'div' %}
			{% else %}
				{% set headingTag = block.headingLevel %}
			{% endif %}					
			<div {{ gMacros.buildElementAttributes(headerId, 'form-mainheader', ['anim-child', block.mainHeaderStyle ~ '-outer'], null) -}}>				
				<{{ headingTag }} {{ gMacros.buildClassListBasic(['inner', 'form-mainheader-inner',  block.mainHeaderStyle]) -}}>
					<span>{{ gMacros.stripTags(block.headerText) }}</span>
				</{{ headingTag }}>				
			</div>			
		{% endif %}
		
		{% if block.simpleText|length %}				
			<div id="{{introId}}" class="anim-child form-intro">				
				<div class="inner form-intro-inner">
					{{block.simpleText}}
				</div>				
			</div>
		{% endif %}  
		
		<div class="elem-block form-wrapper anim-child">			
			<div class="inner">
				{{ block.formToDisplay.render({submitClass: 'btn btn-standard'}) }}
				<small>* Required Field</small>
			</div>			
		</div>
		
	</div>	     
</div>
