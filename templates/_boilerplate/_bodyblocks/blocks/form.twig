{#
/**
 * Tilt Boilermaker - Generic Form Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# set variables for content child and style adjustment containers  #}
{% set styleAdjusts = block.children.one() %}
	
{# Set block id attribute value #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
	{% set headerId = block.customId ~ '-header' %}
	{% set introId = block.customId ~ '-intro' %}
{% else %}
	{% set blockId = 'form-' ~ block.id %}
	{% set headerId = 'form-' ~ block.id  ~ '-header' %}
	{% set introId = 'form-' ~ block.id  ~ '-intro' %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block ' ~ block.type.handle %}
{% set innerClass = 'inner ' ~ block.type.handle ~ '-inner' %}

{# Sort Out Styling Adjustments to set up class lit arrays #}

{# create arrays to collect style changes to primary element and inner and bg #}
{% set styleClasses = [] %}
{% set outerClasses = [] %}
{% set bgClasses = [] %}
{% set bgSizes = [] %}
{% set headerClasses = [] %}
{% set headerOuterClasses = [] %}
{% set introClasses = [] %}
{% set introOuterClasses = [] %}
{% set btnClasses = ['btn', 'btn-formsubmit'] %}


{% if styleAdjusts != null %}	
	{# add style changes to array except for padding because it isn't applied to primary element #}
		
	{% for styleSet in clone(styleAdjusts.children).collect() %}
		{% set devSize = styleSet.deviceSize %}		  
		{% set styleSetFieldLayout = styleSet.getFieldLayout() %}
		{% set styleSetFields = styleSetFieldLayout.getCustomFields() %}		
		{% for fieldItem in styleSetFields %}
		
			{# Leave out padding since it goes to a different element and leave out background fields #}			
			{% if fieldItem.handle != 'deviceSize' and fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle starts with 'row') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'column') and not (fieldItem.handle starts with 'background') and styleSet[fieldItem.handle]|length %}				
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}
			
			{# add color classes #}
			{% if fieldItem.handle ends with 'Color' and fieldItem.handle != 'backgroundColor' and styleSet[fieldItem.handle] != null %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle].class %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}			
			
			{# Add padding settings to padCLasses array #}			
			{% if fieldItem.handle ends with 'Margin' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}
			
			{% if fieldItem.handle == 'displaySetting' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}
			
			{# Add row layout classes to to rowClasses array #}			
			{% if fieldItem.handle starts with 'row' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set rowClasses = rowClasses|merge([classItem]) -%}
			{% endif %}	
			
		{% endfor %}
			
		{# Get main header styleset adjustments if any #}			
		{% set headerStyles = clone(styleSet.children).type('styleSetMainHeader').one() %}
		{% if headerStyles != null %}
			{% set headerFieldLayout = headerStyles.getFieldLayout() %}
			{% set headerFields = headerFieldLayout.getCustomFields() %}
			{% for fieldItem in headerFields %}						
				
				{% if fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'background') and headerStyles[fieldItem.handle]|length %}					
					{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
					{%- set headerClasses = headerClasses|merge([classItem]) -%}
				{% endif %}	
				
				{# add color classes #}
				{% if fieldItem.handle ends with 'Color' and headerStyles[fieldItem.handle] != null %}
					{% set classItem = devSize ~ headerStyles[fieldItem.handle].class %}
					{%- set headerClasses = headerClasses|merge([classItem]) -%}
				{% endif %}
				
				{% if fieldItem.handle ends with 'Margin' and headerStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
					{%- set headerOuterClasses = headerOuterClasses|merge([classItem]) -%}
				{% endif %}
				
				{% if fieldItem.handle == 'displaySetting' and headerStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
					{%- set headerOuterClasses = headerOuterClasses|merge([classItem]) -%}
				{% endif %}
				
			{% endfor %}
		{% endif %}
						
		{# Get content text styleset adjustments if any #}
		
		{% if block.simpleText|length %}
			{% set introStyles = clone(styleSet.children).type('styleSetContentText').one() %}
			{% if introStyles != null %}
				{% set introFieldLayout = introStyles.getFieldLayout() %}
				{% set introFields = introFieldLayout.getCustomFields() %}
				{% for fieldItem in introFields %}						
					
					{% if fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'background') and introStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
						{%- set introClasses = introClasses|merge([classItem]) -%}
					{% endif %}	
					
					{# add color classes #}
					{% if fieldItem.handle ends with 'Color' and introStyles[fieldItem.handle] != null %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle].class %}
						{%- set introClasses = introClasses|merge([classItem]) -%}
					{% endif %}						
					
					{% if fieldItem.handle ends with 'Margin' and introStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
						{%- set introOuterClasses = introOuterClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if fieldItem.handle == 'displaySetting' and introStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
						{%- set introOuterClasses = introOuterClasses|merge([classItem]) -%}
					{% endif %}
					
				{% endfor %}
			{% endif %}
		{% endif %}
	
		{% set btnGrpStyles = clone(styleSet.children).type('styleSetChildButtons').one() %}
		{% if btnGrpStyles != null %}					
			{% set btnGrpFieldLayout = btnGrpStyles.getFieldLayout() %}
			{% set btnGrpFields = btnGrpFieldLayout.getCustomFields() %}
			{% for fieldItem in btnGrpFields %}						
				{% if not (fieldItem.handle ends with 'Margin') and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'button') and btnGrpStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
					{%- set btnWrapperClasses = btnWrapperClasses|merge([classItem]) -%}
				{% endif %}									
				
				{% if fieldItem.handle ends with 'Margin' and btnGrpStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
					{%- set btnWrapperClasses = btnWrapperClasses|merge([classItem]) -%}
				{% endif %}
				
				{% if fieldItem.handle == 'displaySetting' and btnGrpStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
					{%- set btnWrapperClasses = btnWrapperClasses|merge([classItem]) -%}
				{% endif %}
				
				{# add button classes to child btn array #}
				{% if (fieldItem.handle starts with 'button') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle ends with 'Margin') and btnGrpStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
					{%- set btnClasses = btnClasses|merge([classItem]) -%}
				{% endif %}
				
				{# add color classes to btn classes #}
				{% if fieldItem.handle ends with 'Color' and btnGrpStyles[fieldItem.handle] != null %}
					{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle].class %}
					{%- set btnClasses = btnClasses|merge([classItem]) -%}
				{% endif %}
											
				{# add button margin classes to array #}
				{% if (fieldItem.handle starts with 'button') and (fieldItem.handle ends with 'Margin') and btnGrpStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
					{%- set btnOuterClasses = btnOuterClasses|merge([classItem]) -%}
				{% endif %}	
								
			{% endfor %}
		{% endif %}
		
		{# set up background objects and drop into array. If no color and no image are set them skip styleset #}
		{% if (styleSet.backgroundColor.class is defined and styleSet.backgroundColor.class) or (styleSet.backgroundImage is defined and styleSet.backgroundImage|length) %}
			{% set bgItem  = {
				'devSize': devSize,
				'bgColor': styleSet.backgroundColor.class ?? '',
				'bgImg': styleSet.backgroundImage[0] ?? null,
				'bgSize': styleSet.backgroundSize ?? '',
				'bgPosition': styleSet.backgroundPosition ?? '',
				'bgRepeat': styleSet.backgroundRepeat ?? '',
				'bgOpacity': styleSet.backgroundOpacity ?? '',
				'bgImgOpacity': styleSet.backgroundImageOpacity ?? '',
			}		
			%}
			{% set bgClasses = bgClasses|merge([bgItem]) %}	
			{% set bgSizes = bgSizes|merge([devSize])%}	
		{% endif %}	
				
	{% endfor %}
	
{% endif %}


{% set btnStyleList = btnClasses|join(' ') %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}


{# set animation classes for reveal #}

{% set animClasses = [] %}
{% if block.revealAnimation is defined and block.revealAnimation != '' %}  
	{% set animClasses = animClasses|merge(['anim-wrapper', 'anim-child']) %}
	{% set revealClass = block.revealAnimation %}
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set animClasses = animClasses|merge(['anim-parent']) %}
			{% if block.staggerChildReveals is not empty %}
				{% if block.staggerChildReveals == true %}
					{% set revealClass = revealClass ~ '-stagger' %}
				{% endif %}
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %}  		
		{% endif %}
	{% else %}
		{% set animClasses = animClasses|merge(['anim-elem']) %} 
	{% endif %}	
	{% set animClasses = animClasses|merge([revealClass]) %}	
{% endif %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 	
	<div {{ gMacros.buildClassListBasic(animClasses) -}}>
		<div {{ gMacros.buildClassList(innerClass, styleClasses, null) -}}>	
			{% if block.headerText|length and block.headingLevel != '' %}
				<div {{ gMacros.buildElementAttributes(headerId, 'elem-block form-header ' ~ block.mainHeaderBaseClass , headerOuterClasses, null) -}}>
					<div class="anim-wrapper anim-child">
						<{{ block.headingLevel }} {{ gMacros.buildClassList('inner ' ~ block.mainHeaderBaseClass ~ '-inner', headerClasses, null) -}}>
					    	{{ gMacros.stripTags(block.headerText) }}
						</{{ block.headingLevel }}>
					</div>
				</div>
			{% endif %}
			
			{% if block.simpleText|length %}				
				<div {{ gMacros.buildElementAttributes(introId, 'elem-block form-intro', introOuterClasses, null) -}}>
					<div class="anim-wrapper anim-child">
						<div {{ gMacros.buildClassList('inner', introClasses, null) -}}>
							{{block.simpleText}}
						</div>
					</div>
				</div>
			{% endif %}  
			
			<div class="elem-block form-wrapper">
				<div class="anim-wrapper anim-child">
					<div class="inner">
						{{ block.formToDisplay.render({submitClass: btnStyleList}) }}
						<small>* Required Field</small>
					</div>
				</div>
			</div>
			
		</div>
		<div class="background form-default-bg">
			{% if bgClasses != null %}		
				{{ gMacros.buildElementBackground(bgClasses, bgSizes, {'default': '100vw'}, null) }}
			{% endif %}		
		</div>		
	</div>     
</div>
