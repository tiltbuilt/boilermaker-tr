{#
/**
 * Tilt Boilermaker - Generic Slider Set Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# Set block id attribute value #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
{% else %}
	{% set blockId = 'sliderSet-' ~ block.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = block.type.handle %}
{% set innerClass = 'inner ' ~ block.type.handle ~ '-inner' %}

{# set up attribute list for settings #}

{% set sliderAttrs = {'data-autoplay': block.autoplay, 'data-timing': block.slideTransitionDelay, 'data-buttons': block.buttons, 'data-dots': block.dots, 'data-effect': block.sliderEffect} %}


{% if block.colorScheme != null and block.colorScheme.class != '' %}
	{% set colorScheme = block.colorScheme.class %}
{% endif %}

{# arrays for outer classes  #}
{% set outerClasses = ['elem-block', colorScheme, block.topMargin, block.bottomMargin, 'bg-off'] %}

{% if block.sliderSize|length %}
	{% set outerClasses = outerClasses|merge(['rect-' ~ block.sliderSize]) %}
{% endif %}
{% set aspectSize = block.sliderSize %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}

{# set animation classes for reveal #}

{% set revealClass = [] %}
{% if block.revealAnimation == 'anim-child' %}	
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-pass']) %}			
		{% else %}
			{% set revealClass = revealClass|merge([block.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge([block.revealAnimation]) %}
	{% endif %}	
{% else %}
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-parent']) %}
			{% if block.staggerChildReveals is not empty %}
				{% if block.staggerChildReveals == true %}
					{% set revealClass = revealClass|merge([block.revealAnimation ~ '-stagger']) %}
				{% else %}
					{% set revealClass = revealClass|merge([block.revealAnimation]) %}
				{% endif %}
			{% endif %}			
		{% else %}
			{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}
	{% endif %}			
{% endif %}
{% set outerClasses = outerClasses|merge(revealClass) %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString, sliderAttrs) -}}> 	
	<div class="{{innerClass}}">				
		
			{% set slideList = clone(block.children).collect() %}
			<div class="swiper-elem {% if slideList|length > 1 %}swiper{% endif %}" id="{{ blockId  ~ '-swiper'}}">
				<div class="swiper-wrapper">
		
				{% for child in slideList %}	  
				
				  	{%
						include [
					  	'_project/_bodyblocks/blocks/' ~ child.type.handle,
					  	'_boilerplate/_bodyblocks/blocks/' ~ child.type.handle,
					  	'_project/_bodyblocks/blocks/block',
					  	'_boilerplate/_bodyblocks/blocks/block'
						] ignore missing with { 'block' :  child }
				  	%}
				  						
				{% endfor %}
				</div>					
			</div>
			{% if (block.buttons) and (slideList|length > 1)  %}
				<button class="swiper-button-prev" data-target="#{{ blockId  ~ '-swiper'}}" id="{{blockId}}-prev">
					<svg><use xlink:href="#{% if gSettings.sliderPreviousIcon.sprite|length %}{{ gSettings.sliderPreviousIcon.sprite }}{% else %}icon-angle-left{% endif %}"></use></svg>
				</button>
				
				<button class="swiper-button-next" data-target="#{{ blockId  ~ '-swiper'}}" id="{{blockId}}-next">
					<svg><use xlink:href="#{% if gSettings.sliderNextIcon.sprite|length %}{{ gSettings.sliderNextIcon.sprite }}{% else %}icon-angle-right{% endif %}"></use></svg>
				</button>
			{% endif %}  
			{% if (block.dots) and (slideList|length > 1)  %}
				<div class="swiper-pagination" id="{{blockId}}-pagination"></div>
			{% endif %}					
		
	</div>	     
</div>
