{#
/**
 * Tilt Boilermaker - Generic Slider Set Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# set variables for content child and style adjustment containers  #}
{% set contentKids = null %}
{% set styleAdjusts = null %}
{% for item in block.children.all() %}
	{% if item.type.handle == 'childrenSlider' %}
		{% set contentKids = item %}
	{% elseif item.type.handle == 'styleAdjustmentsSliderSet' %}
		{% set styleAdjusts = item %}
	{% endif %}
{% endfor %}

{# Set block id attribute value #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
{% else %}
	{% set blockId = 'sliderSet-' ~ block.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block ' ~ block.type.handle %}
{% set innerClass = 'inner ' ~ block.type.handle ~ '-inner ' ~ block.sliderSize %}

{# set up attribute list for settings #}

{% set sliderAttrs = {'data-autoplay': block.autoplay, 'data-timing': block.slideTransitionDelay, 'data-controls': block.sliderControls, 'data-effect': block.sliderEffect} %}


{# Sort Out Styling Adjustments to set up class lit arrays #}

{# create arrays to collect style changes to primary element and inner and bg #}
{% set styleClasses = [] %}
{% set bgClasses = null %}

{% if styleAdjusts != null %}	
	{# add style changes to array except for padding because it isn't applied to primary element #}
		
	{% for styleItem in clone(styleAdjusts.children).type(['not', 'styleControlsBackgroundImage']).collect() %}
		{% set styleClasses = styleClasses|merge([styleItem]) %}
	{% endfor %}
	
		
	{# Set variable for background settings if there are any #}
		
	{% set bgClasses = clone(styleAdjusts.children).type('styleControlsBackgroundImage').one() %}
	
{% endif %}


{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}


{# set animation classes for reveal #}

{% set animClasses = [] %}
{% if block.revealAnimation is defined and block.revealAnimation != '' %}  
	{% set animClasses = animClasses|merge(['anim-wrapper', 'anim-child']) %}
	{% set revealClass = block.revealAnimation %}
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set animClasses = animClasses|merge(['anim-parent']) %}
			{% if block.staggerChildReveals is not empty %}
				{% if block.staggerChildReveals == true %}
					{% set revealClass = revealClass ~ '-stagger' %}
				{% endif %}
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %}  		
		{% endif %}
	{% else %}
		{% set animClasses = animClasses|merge(['anim-elem']) %} 
	{% endif %}	
	{% set animClasses = animClasses|merge([revealClass]) %}	
{% endif %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, styleClasses, customClassString, sliderAttrs) -}}> 	
	<div {{ gMacros.buildClassListBasic(animClasses) -}}>
		<div class="{{innerClass}}">	
			{% if contentKids != null %}
			
				{% set slideList = clone(contentKids.children).collect() %}
				<div class="{% if slideList|length > 1 %}swiper{% endif %}" id="{{ blockId  ~ '-swiper'}}">
					<div class="swiper-wrapper">
			
					{% for child in slideList %}	  
					
						{#-
						For each child component, attempt to load a custom template for the
						component handle from the project's files,
						then the same template from the core Tiltrus files,
						then a custom default template from the project,
						and finally the default template for this component type from the core Tiltrus files.
						-#}
						
						
					  	{%
							include [
						  	'_project/_bodyblocks/blocks/' ~ child.type.handle,
						  	'_boilerplate/_bodyblocks/blocks/' ~ child.type.handle,
						  	'_project/_bodyblocks/blocks/block',
						  	'_boilerplate/_bodyblocks/blocks/block'
							] ignore missing with { 'block' :  child }
					  	%}
					  	
						
					{% endfor %}
					</div>
					
					{% if (block.sliderControls == 'buttons' or block.sliderControls == 'both') and (slideList|length > 1)  %}
						<button class="swiper-button-prev" data-target="#{{ blockId  ~ '-swiper'}}">
							<svg><use xlink:href="#{{ gSettings.sliderPreviousIcon.sprite }}"></use></svg>
						</button>
						
						<button class="swiper-button-next" data-target="#{{ blockId  ~ '-swiper'}}">
							<svg><use xlink:href="#{{ gSettings.sliderNextIcon.sprite }}"></use></svg>
						</button>
					{% endif %}  
					{% if (block.sliderControls == 'dots' or block.sliderControls == 'both') and (slideList|length > 1)  %}
						<div class="swiper-pagination"></div>
					{% endif %}
				</div>					
			{% endif %}
		</div>
		{% if bgClasses != null %}		  
			{{ gMacros.buildElementBackground(bgClasses, {'default': '100vw'}, null) }}
		{% endif %}		
	</div>     
</div>
