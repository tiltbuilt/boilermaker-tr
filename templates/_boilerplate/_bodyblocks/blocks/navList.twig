{#
/**
 * Tilt Boilermaker - Generic Nav List Block Template
 * -----
 * Nav lists function as Button Groups, but they pull their list of buttons from a nav collection rather than child blocks in the page builder
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# set variables for content child and style adjustment containers  #}
{% set styleAdjusts = block.children.one() %}
{% set navCollection = craft.navigation.nodes().handle(block.navListToDisplay).collect() %}
{% set collectionIds = [] %}
{% for node in navCollection %}
	{% set collectionIds = collectionIds|merge([node.elementId]) %}
{% endfor %}
{% set btnLinkList = craft.entries().id(collectionIds).fixedOrder().collect() %}

{# Set block id attribute value #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
{% else %}
	{% set blockId = 'navList-' ~ block.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block ' ~ block.type.handle %}

{# Sort Out Styling Adjustments to set up class lit arrays #}

{# create arrays to collect style changes to primary element and inner and bg #}
{% set styleClasses = [] %}
{% set outerClasses = [] %}
{% set childBtnClasses = [] %}
{% set childBtnOuterClasses = [] %}


{% if styleAdjusts != null %}	
	
	{# Iterate through style sets in adjustment block and write out style adjustment classes to an array. #}
		
	{% for styleSet in clone(styleAdjusts.children).collect() %}
		{% set devSize = styleSet.deviceSize %}		  
		{% set styleSetFieldLayout = styleSet.getFieldLayout() %}
		{% set styleSetFields = styleSetFieldLayout.getCustomFields() %}		
		{% for fieldItem in styleSetFields %}
		
			{# Leave out padding since it goes to a different element and leave out background fields #}			
			{% if fieldItem.handle != 'deviceSize' and fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle starts with 'row') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'button') and not (fieldItem.handle starts with 'background') and styleSet[fieldItem.handle]|length %}				
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}
			
			{# add color classes #}
			{% if not (fieldItem.handle starts with 'button') and (fieldItem.handle ends with 'Color') and fieldItem.handle != 'backgroundColor' and styleSet[fieldItem.handle] != null %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle].class %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}
			
			{# Add margin settings to outerCLasses array #}			
			{% if not (fieldItem.handle starts with 'button') and (fieldItem.handle ends with 'Margin') and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}
			
			{% if fieldItem.handle == 'displaySetting' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}	
			
			{# add button classes to child btn array #}
			{% if (fieldItem.handle starts with 'button') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle ends with 'Margin') and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set childBtnClasses = childBtnClasses|merge([classItem]) -%}
			{% endif %}
			
			{# add color classes to btn classes #}
			{% if fieldItem.handle ends with 'Color' and styleSet[fieldItem.handle] != null %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle].class %}
				{%- set childBtnClasses = childBtnClasses|merge([classItem]) -%}
			{% endif %}
			
			{# add button margin classes to array #}
			{% if (fieldItem.handle starts with 'button') and (fieldItem.handle ends with 'Margin') and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set childBtnOuterClasses = childBtnOuterClasses|merge([classItem]) -%}
			{% endif %}
					
		{% endfor %}
			
	{% endfor %}
		
{% endif %}


{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}


{# set animation classes for reveal #}

{% set animClasses = [] %}
{% if block.revealAnimation is defined and block.revealAnimation != '' %}  
	{% set animClasses = animClasses|merge(['anim-wrapper', 'anim-child']) %}
	{% set revealClass = block.revealAnimation %}
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set animClasses = animClasses|merge(['anim-parent']) %}
			{% if block.staggerChildReveals is not empty %}
				{% if block.staggerChildReveals == true %}
					{% set revealClass = revealClass ~ '-stagger' %}
				{% endif %}
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %}  		
		{% endif %}
	{% else %}
		{% set animClasses = animClasses|merge(['anim-elem']) %} 
	{% endif %}	
	{% set animClasses = animClasses|merge([revealClass]) %}	
{% endif %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 	
	<div {{ gMacros.buildClassListBasic(animClasses) -}}>
		<div {{ gMacros.buildClassList('inner navList-inner', styleClasses, null) -}}>	
			
			{% if btnLinkList|length %}
			
				{% for link in btnLinkList %}
				
					<div {{ gMacros.buildElementAttributes(null, 'elem-block navList-button-wrapper', childBtnOuterClasses, null) -}}> 	
						<div class="anim-elem anim-child">
							<div {{ gMacros.buildClassList('inner', null, null) -}}>	
								<a href="{{ link.url }}" {{ gMacros.buildClassList('btn btn-nav-list', childBtnClasses, null) -}} title="{{link.title}}">
							  	<span>{{link.title}}</span>
								</a>
							</div>
						</div>
					</div>
				
				{% endfor %}
			
			{% endif %}
		
		</div>		
	</div>     
</div>
