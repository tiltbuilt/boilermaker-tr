{#
/**
 * Tilt Boilermaker - Generic Button Group Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# Set block id attribute value #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
{% else %}
	{% set blockId = block.type.handle ~ block.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block ' ~ block.type.handle %}
{% set innerClass = 'inner ' ~ block.type.handle ~ '-inner' %}

{# Sort Out Styling Adjustments to set up class lit arrays #}

{# create arrays to collect style changes to primary element and inner and bg #}
{% set outerClasses = [colorScheme, block.topMargin, block.bottomMargin] %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}


{# set animation classes for reveal #}

{% set revealClass = [] %}
{% if block.revealAnimation == 'anim-child' %}	
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-pass']) %}			
		{% else %}
			{% set revealClass = revealClass|merge([block.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge([block.revealAnimation]) %}
	{% endif %}	
{% else %}
	{% if block.animateChildren is not empty %}
		{% if block.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-parent']) %}
			{% if block.staggerChildReveals is not empty %}
				{% if block.staggerChildReveals == true %}
					{% set revealClass = revealClass|merge([block.revealAnimation ~ '-stagger']) %}
				{% else %}
					{% set revealClass = revealClass|merge([block.revealAnimation]) %}
				{% endif %}
			{% endif %}			
		{% else %}
			{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge(['anim-elem', block.revealAnimation]) %}
	{% endif %}			
{% endif %}
{% set outerClasses = outerClasses|merge(revealClass) %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 	
	<div class="{{innerClass}} {{block.contentAlignment}}">	
		
		{% for child in clone(block.children).collect() %}
		
			<div class="anim-child btn-wrapper">
			  
				{% set btnClasses = ['btn'] %}
				{% set buttonLink = child.linkSettings %}
				
				{% if child.buttonStyle != '' %}
					{% set btnClasses = btnClasses|merge([child.buttonStyle]) %}
				{% else %}
					{% set btnClasses = btnClasses|merge([block.buttonStyle]) %}
				{% endif %}
				
				{% if child.buttonSize != '' %}
					{% set btnClasses = btnClasses|merge([child.buttonSize]) %}
				{% else %}
					{% set btnClasses = btnClasses|merge([block.buttonSize]) %}
				{% endif %}
				
				
				{% set canModal = buttonLink.hasElement() %}
				{% set buttonEl = buttonLink.getElement() %}
				{% set useModal = false %}
				{% if buttonEl != null and buttonLink.getType() == 'asset' %}
					{% if craft.embeddedAssets.get(buttonEl) %}
						{% set useModal = true %}
					{% endif %}
				{% endif %}
				{% if child.openAsModal %}
					{% set useModal = true %}
				{% endif %}
				{% if canModal and useModal %}
					{% if buttonLink.getType() == 'asset' %}										
						{% set modalUrl = '/resources/assetmodal?assetid=' ~ buttonLink.getElement().id %}						
					{% else %}
						{% set modalUrl = '/resources/entrymodal?entryid=' ~ buttonLink.getElement().id %}
					{% endif %}
					{% set btnClasses = btnClasses|merge(['btn-modal']) %}
					<button data-modal-target="{{ modalUrl}}" {{ gMacros.buildClassListBasic(btnClasses) -}}>
						<span>{{ buttonLink.getCustomText('More Info') }}</span>
					</button>								
				{% else %}
					<a href="{{ buttonLink.url }}" {{- buttonLink.target|length ? ' target="_blank"' : '' }} {{ gMacros.buildClassListBasic(btnClasses) -}} {% if buttonLink.ariaLabel|length %}aria-label="{{buttonLink.ariaLabel}}"{% endif %} {% if buttonLink.title|length %} title="{{buttonLink.title}}"{% endif %}>
						  <span>{{ buttonLink.getCustomText('More Info') }}</span>
					</a>
				{% endif %}
				
			</div>
													
		{% endfor %}
		
	</div>    
</div>
