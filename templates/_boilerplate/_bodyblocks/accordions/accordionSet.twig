{#
/**
 * Tilt Boilermaker - Generic Accordion Set Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# Set block id attribute value #}
{% if accordion.customId is defined and accordion.customId != '' %}
	{% set blockId = accordion.customId %}
{% else %}
	{% set blockId = accordion.type.handle ~ accordion.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = accordion.type.handle %}
{% set innerClass = 'inner ' ~ accordion.type.handle ~ '-inner' %}


{# set settings for sub accordions #}

{% set accHeadingLevel = 'div' %}
{% if accordion.headingLevel != '' %}
	{% set accHeadingLevel = accordion.headingLevel %}	
{% endif %}


{% if accordion.accordionIcon.sprite|length %}
	{% set accIcon = accordion.accordionIcon.value %}
{% else %}
	{% set accIcon = gSettings.accordionIcon.value %}
{% endif %}


{% if accordion.colorScheme != null and accordion.colorScheme.class != '' %}
	{% set colorScheme = accordion.colorScheme.class %}
{% endif %}

{% set outerClasses = [colorScheme, 'bg-off', 'elem-block', accordion.topMargin, accordion.bottomMargin] %}



{# Set styling classes and attributes for accordion button and panel #}
{% set accOuterClasses = ['anim-child'] %}
{% set buttonClasses = ['btn-accordion'] %}
{% set panelClasses = ['inner', 'accordion-inner', 'elem-block', accordion.topPadding, accordion.bottomPadding, accordion.gutterPadding, accordion.contentAlignment] %}
{% set bgSettings = accordion.backgroundImagery %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (accordion['customClassList'] is defined ? accordion.customClassList :'') %}

{% if accordion.accordionSetAllowMultipleOpenPanels is defined and accordion.accordionSetAllowMultipleOpenPanels == null %}
	{% set customClassString = customClassString ~ ' accordionSetSingleOpen' %}
{% endif %}

{% set revealClass = [] %}
{% if accordion.revealAnimation == 'anim-child' %}	
	{% if accordion.animateChildren is not empty %}
		{% if accordion.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-pass']) %}			
		{% else %}
			{% set revealClass = revealClass|merge([accordion.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge([accordion.revealAnimation]) %}
	{% endif %}	
{% else %}
	{% if accordion.animateChildren is not empty %}
		{% if accordion.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-parent']) %}
			{% if accordion.staggerChildReveals is not empty %}
				{% if accordion.staggerChildReveals == true %}
					{% set revealClass = revealClass|merge([accordion.revealAnimation ~ '-stagger']) %}
				{% else %}
					{% set revealClass = revealClass|merge([accordion.revealAnimation]) %}
				{% endif %}
			{% endif %}			
		{% else %}
			{% set revealClass = revealClass|merge(['anim-elem', accordion.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge(['anim-elem', accordion.revealAnimation]) %}
	{% endif %}			
{% endif %}
{% set outerClasses = outerClasses|merge(revealClass) %}


{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 	
	
	<div class="{{innerClass}}">	
						
		{% for child in clone(accordion.children).collect() %}						
								
			{# set loop dependent sub accordion settings #}
			
			{% if accordion.accordionStartState is defined and accordion.accordionStartState == 1 and loop.first == true %}
				{% set openStatus = true %}
			{% else %}
				{% set openStatus = false %}
			{% endif %}
			
			{# Set block id attribute values #}
			
			{% set accId = blockId ~ '-accordion' ~ loop.index %}
			{% set panelId = accId ~ '-panel' %}
			{% set buttonId = accId ~ '-button' %}
			{% set headingId = accId ~ '-heading' %}
			
			{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
			{% set accCustomClassString = (child['customClassList'] is defined ? child.customClassList : null) %}
			
			{# set button spacial attributes #}
			{% set buttonAttrs = {'type': 'button', 'data-toggle': 'expanded', 'data-target': '#' ~ panelId, 'aria-controls': panelId, 'data-parent': '#' ~ blockId} %}
			{% if openStatus %}
				{% set buttonCustClasses = 'expanded' %}
				{% set buttonAttrs = buttonAttrs|merge({'aria-expanded': 'true'}) %}
				{% set outerExpClass = 'expanded' %}
			{% else %}
				{% set buttonCustClasses = '' %}
				{% set buttonAttrs = buttonAttrs|merge({'aria-expanded': 'false'}) %}
				{% set outerExpClass = '' %}
			{% endif %}
			
			{# outer outerExpClass to custom string #}					
			{% set accCustomClassString = accCustomClassString ~ ' ' ~ outerExpClass %}
			
			{# set button spacial attributes #}
			{% set panelAttrs = {'aria-labelledby': headingId, 'role': 'region', 'data-parent': '#' ~ blockId} %}
			{% set panelCustClasses = '' %}
			{% if openStatus %}
				{% set panelCustClasses = 'init-expanded' %}
			{% endif %}
			
			{# ACCORDION OUTPUT #}					
			
			<div {{ gMacros.buildElementAttributes(accId, 'accordion', accOuterClasses, accCustomClassString) -}}> 	
				
				<div class="inner">															
					<{{accHeadingLevel}} id="{{ headingId }}" class="accordion-button-header" >
						<button {{ gMacros.buildElementAttributes(buttonId, null, buttonClasses, buttonCustClasses, buttonAttrs) -}}>
							<div class="accordion-icon">
								<svg><use xlink:href="#{%if child.accordionIcon != null and child.accordionIcon.value|length %}{{child.accordionIcon.value}}{% else %}{{accIcon}}{% endif %}"></use></svg>
							</div>
							{{ gMacros.stripTags(child.tabTitle) }}
						</button>
					</{{accHeadingLevel}}>
					
					<div id="{{ panelId }}" class="accordion-panel {{ panelCustClasses }}" {{- gMacros.buildOtherElementAttributes(panelAttrs) -}}>
						<div {{ gMacros.buildClassListBasic(panelClasses) -}}>	
																									
							{% for accChild in clone(child.children).collect() %}	  
																			
								{% if accChild.type.handle starts with 'row' %}
								  {%
									include [
									  '_project/_bodyblocks/rows/' ~ accChild.type.handle,
									  '_boilerplate/_bodyblocks/rows/' ~ accChild.type.handle,
									  '_project/_bodyblocks/rows/row',
									  '_boilerplate/_bodyblocks/rows/row'
									] with { 'row' :  accChild }
								  %}
								{% elseif accChild.type.handle starts with 'repeater' %}
								  {%
									include [
									  '_project/_bodyblocks/repeaters/' ~ accChild.type.handle,
									  '_boilerplate/_bodyblocks/repeaters/' ~ accChild.type.handle,
									  '_project/_bodyblocks/repeaters/repeater',
									  '_boilerplate/_bodyblocks/repeaters/repeater'
									] with { 'repeater' :  accChild }
								  %}
								{% elseif accChild.type.handle starts with 'accordion' %}
								{%
								  include [
									'_project/_bodyblocks/accordions/' ~ accChild.type.handle,
									'_boilerplate/_bodyblocks/accordions/' ~ accChild.type.handle,
									'_project/_bodyblocks/accordions/accordion',
									'_boilerplate/_bodyblocks/accordions/accordion'
								  ] with { 'accordion' :  accChild }
								%}
								{% elseif accChild.type.handle starts with 'tabSet' %}
								{%
								  include [
									'_project/_bodyblocks/tabs/' ~ accChild.type.handle,
									'_boilerplate/_bodyblocks/tabs/' ~ accChild.type.handle,
									'_project/_bodyblocks/tabs/tabSet',
									'_boilerplate/_bodyblocks/tabs/tabSet'
								  ] with { 'tabSet' :  accChild }
								%}
								{% elseif accChild.type.handle starts with 'tabPanel' %}
								{%
								  include [
									'_project/_bodyblocks/tabs/' ~ accChild.type.handle,
									'_boilerplate/_bodyblocks/tabs/' ~ accChild.type.handle,
									'_project/_bodyblocks/tabs/tabPanel',
									'_boilerplate/_bodyblocks/tabs/tabPanel'
								  ] with { 'tabPanel' :  accChild }
								%}
								{% else %}
								  {%
									include [
									  '_project/_bodyblocks/blocks/' ~ accChild.type.handle,
									  '_boilerplate/_bodyblocks/blocks/' ~ accChild.type.handle,
									  '_project/_bodyblocks/blocks/block',
									  '_boilerplate/_bodyblocks/blocks/block'
									] ignore missing with { 'block' :  accChild }
								  %}
								{% endif %}
								
							{% endfor %}										
							
						</div>
					</div>									
				</div>
					
				<div class="background">
					{% if bgSettings|length %}		
						{{ gMacros.buildElementBackground(bgSettings, {'default': '100vw'}, null, null) }}
					{% endif %}	
				</div>
				    
			</div>
			
		{% endfor %}
		
	</div>				
	
</div>
