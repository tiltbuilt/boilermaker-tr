{#
/**
 * Tilt Boilermaker - Generic Accordion Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# set variables for content child and style adjustment containers  #}
{% set contentKids = null %}
{% set styleAdjusts = null %}
{% for item in accordion.children.all() %}
	{% if item.type.handle == 'childrenAccordion' %}
		{% set contentKids = item %}
	{% elseif item.type.handle == 'styleAdjustmentsStandaloneAccordion' %}
		{% set styleAdjusts = item %}
	{% endif %}
{% endfor %}

{# Set block id attribute values #}
{% if accordion.customId is defined and accordion.customId != '' %}
	{% set blockId = accordion.customId %}
	{% set panelId = accordion.customId ~ '-panel' %}
	{% set buttonId = accordion.customId ~ '-button' %}
	{% set headingId = accordion.customId ~ '-heading' %}		
{% else %}
	{% set blockId = 'accordion-' ~ accordion.id %}
	{% set panelId = 'accordion-' ~ accordion.id ~ '-panel' %}
	{% set buttonId = 'accordion-' ~ accordion.id ~ '-button' %}
	{% set headingId = 'accordion-' ~ accordion.id ~ '-heading' %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block accordion' %}
{% set innerClass = 'inner accordion-inner' %}

{# set accordion behavior settings and classes #}
{% set openStatus = accordion.accordionStartState %}
{% if accordion.headingLevel == '' %}
	{% set accHeadingLevel = 'div' %}
{% else %}
	{% set accHeadingLevel = accordion.headingLevel %}
{% endif %}

{# Sort Out Styling Adjustments to set up class lit arrays #}

{# create arrays to collect style changes to primary element and inner and bg #}

{% set outerClasses = [] %}
{% set bgClasses = [] %}
{% set bgSizes = [] %}

{# Set styling classes and attributes for accrodion button and panel #}
{% set buttonClasses = ['btn-accordion'] %}
{% set panelClasses = [] %}


{% if styleAdjusts != null %}	
		
	{# Iterate through style sets in adjustment block and write out style adjustment classes to an array. #}
	
	{% for styleSet in clone(styleAdjusts.children).collect() %}
		{% set devSize = styleSet.deviceSize %}	
		{% set styleSetFieldLayout = styleSet.getFieldLayout() %}
		{% set styleSetFields = styleSetFieldLayout.getCustomFields() %}		
		
		{% for fieldItem in styleSetFields %}
			
			{# Leave out padding since it goes to a different element and leave out background fields #}			
			{% if fieldItem.handle != 'deviceSize' and fieldItem.handle != 'displaySetting' and fieldItem.handle != 'allBordersMatch' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle starts with 'row') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'column') and not (fieldItem.handle starts with 'background') and styleSet[fieldItem.handle]|length %}				
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set panelClasses = panelClasses|merge([classItem]) -%}
			{% endif %}
			
			
			{# add color classes #}
			{% if fieldItem.handle == 'buttonColor' and styleSet[fieldItem.handle] != null %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle].class %}
				{%- set buttonClasses = buttonClasses|merge([classItem]) -%}
			{% endif %}
			
			{% if fieldItem.handle == 'textColor' and styleSet[fieldItem.handle] != null %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle].class %}
				{%- set panelClasses = panelClasses|merge([classItem]) -%}
			{% endif %}
			
			{% if fieldItem.handle == 'borderColor' and styleSet[fieldItem.handle] != null %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle].class %}
				{%- set panelClasses = panelClasses|merge([classItem]) -%}
			{% endif %}
						
			{# Add outer settings to outerClasses array #}			
			{% if fieldItem.handle ends with 'Margin' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}
			
			{% if fieldItem.handle == 'displaySetting' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}
					
		{% endfor %}		
		
		
		{# set up background objects and drop into array. If no color and no image are set them skip styleset #}
		{% if (styleSet.backgroundColor.class is defined and styleSet.backgroundColor.class) or (styleSet.backgroundImage is defined and styleSet.backgroundImage|length) %}
			{% set bgItem  = {
				'devSize': devSize,
				'bgColor': styleSet.backgroundColor.class ?? '',
				'bgImg': styleSet.backgroundImage[0] ?? null,
				'bgSize': styleSet.backgroundSize ?? '',
				'bgPosition': styleSet.backgroundPosition ?? '',
				'bgRepeat': styleSet.backgroundRepeat ?? '',
				'bgOpacity': styleSet.backgroundOpacity ?? '',
				'bgImgOpacity': styleSet.backgroundImageOpacity ?? '',
			}		
			%}
			{% set bgClasses = bgClasses|merge([bgItem]) %}	
			{% set bgSizes = bgSizes|merge([devSize])%}	
		{% endif %}
					
	{% endfor %}	
	
{% endif %}


{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (accordion['customClassList'] is defined ? accordion.customClassList : null) %}


{# Set styling classes and attributes for button #}
{% set buttonAttrs = {'type': 'button', 'data-toggle': 'expanded', 'data-target': '#' ~ panelId, 'aria-controls': panelId} %}

{% if openStatus %}
	{% set buttonClasses = buttonClasses|merge(['expanded']) %}
	{% set buttonAttrs = buttonAttrs|merge({'aria-expanded': 'true'}) %}
	{% set outerExpClass = 'expanded' %}
{% else %}
	{% set buttonAttrs = buttonAttrs|merge({'aria-expanded': 'false'}) %}
	{% set outerExpClass = '' %}
{% endif %}


{# outer outerExpClass to custom string #}

{% set customClassString = customClassString ~ ' ' ~ outerExpClass %}

{# Set styling classes and attributes for Panel #}
{% set panelAttrs = {'aria-labelledby': headingId, 'role': 'region'} %}
{% if openStatus %}
	{% set panelCustClasses = 'init-expanded' %}
{% else %}
	{% set panelCustClasses = '' %}
{% endif %}


{# set animation classes for reveal #}

{% set animClasses = [] %}
{% if accordion.revealAnimation is defined and accordion.revealAnimation != '' %}  
	{% set animClasses = animClasses|merge(['anim-wrapper', 'anim-child']) %}
	{% set revealClass = accordion.revealAnimation %}
	{% if accordion.animateChildren is not empty %}
		{% if accordion.animateChildren == true %}
			{% set animClasses = animClasses|merge(['anim-parent']) %}
			{% if accordion.staggerChildReveals is not empty %}
				{% if accordion.staggerChildReveals == true %}
					{% set revealClass = revealClass ~ '-stagger' %}
				{% endif %}
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %}  		
		{% endif %}
	{% else %}
		{% set animClasses = animClasses|merge(['anim-elem']) %} 
	{% endif %}	
	{% set animClasses = animClasses|merge([revealClass]) %}	
{% endif %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 	
	<div {{ gMacros.buildClassListBasic(animClasses) -}}>
		<div class="inner">
			
			<{{accHeadingLevel}} id="{{ headingId }}" class="accordion-button-header" >
				<button id="{{buttonId}}" {{ gMacros.buildClassListBasic(buttonClasses) -}} {{- gMacros.buildOtherElementAttributes(buttonAttrs) -}}>
					<div class="accordion-icon">
						<svg><use xlink:href="#{%if child.accordionIcon != null and child.accordionIcon.sprite|length %}{{child.accordionIcon.sprite}}{% else %}{{gSettings.accordionIcon.sprite}}{% endif %}"></use></svg>
					</div>
					{{ gMacros.stripTags(accordion.headerText) }}
				</button>
			</{{accHeadingLevel}}>			
			
			<div id="{{ panelId }}" class="accordion-panel {{ panelCustClasses }}" {{- gMacros.buildOtherElementAttributes(panelAttrs) -}}>
				<div {{ gMacros.buildClassList('inner accordion-inner', panelClasses, null) -}}>	
					{% if contentKids != null %}
						{% for child in clone(contentKids.children).collect() %}	  
								
							
							{% if child.type.handle starts with 'row' %}
								  {%
									include [
									  '_project/_bodyblocks/rows/' ~ child.type.handle,
									  '_boilerplate/_bodyblocks/rows/' ~ child.type.handle,
									  '_project/_bodyblocks/rows/row',
									  '_boilerplate/_bodyblocks/rows/row'
									] with { 'row' :  child }
								  %}
							  {% elseif child.type.handle starts with 'repeater' %}
								  {%
									include [
									  '_project/_bodyblocks/repeaters/' ~ child.type.handle,
									  '_boilerplate/_bodyblocks/repeaters/' ~ child.type.handle,
									  '_project/_bodyblocks/repeaters/repeater',
									  '_boilerplate/_bodyblocks/repeaters/repeater'
									] with { 'repeater' :  child }
								  %}
							  {% elseif child.type.handle starts with 'accordion' %}
								{%
								  include [
									'_project/_bodyblocks/accordions/' ~ child.type.handle,
									'_boilerplate/_bodyblocks/accordions/' ~ child.type.handle,
									'_project/_bodyblocks/accordions/accordion',
									'_boilerplate/_bodyblocks/accordions/accordion'
								  ] with { 'accordion' :  child }
								%}
							  {% elseif child.type.handle starts with 'tabSet' %}
								{%
								  include [
									'_project/_bodyblocks/tabs/' ~ child.type.handle,
									'_boilerplate/_bodyblocks/tabs/' ~ child.type.handle,
									'_project/_bodyblocks/tabs/tabSet',
									'_boilerplate/_bodyblocks/tabs/tabSet'
								  ] with { 'tabSet' :  child }
								%}
							  {% elseif child.type.handle starts with 'tabPanel' %}
								{%
								  include [
									'_project/_bodyblocks/tabs/' ~ child.type.handle,
									'_boilerplate/_bodyblocks/tabs/' ~ child.type.handle,
									'_project/_bodyblocks/tabs/tabPanel',
									'_boilerplate/_bodyblocks/tabs/tabPanel'
								  ] with { 'tabPanel' :  child }
								%}
							  {% else %}
								  {%
									include [
									  '_project/_bodyblocks/blocks/' ~ child.type.handle,
									  '_boilerplate/_bodyblocks/blocks/' ~ child.type.handle,
									  '_project/_bodyblocks/blocks/block',
									  '_boilerplate/_bodyblocks/blocks/block'
									] ignore missing with { 'block' :  child }
								  %}
							  {% endif %}
							
						{% endfor %}
					{% endif %}
				</div>
			</div>									
		
		</div>
			
		<div class="background accordion-default-bg">
			{% if bgClasses != null %}		
				{{ gMacros.buildElementBackground(bgClasses, bgSizes, {'default': '100vw'}, null) }}
			{% endif %}		
		</div>					
			
	</div>     
</div>
