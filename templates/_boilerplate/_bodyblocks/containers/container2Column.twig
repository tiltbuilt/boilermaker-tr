{#
/**
 * Tilt Boilermaker - Generic 2 Column Container Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# set variables for content child and style adjustment containers  #}
{% set contentKids = null %}
{% set styleAdjusts = null %}
{% for item in container.children.all() %}
	{% if item.type.handle == 'children2ColumnContainer' %}
		{% set contentKids = item %}
	{% elseif item.type.handle == 'styleAdjustmentsSpecialContainer' %}
		{% set styleAdjusts = item %}
	{% endif %}
{% endfor %}

{# Set block id attribute value #}
{% if container.customId is defined and container.customId != '' %}
	{% set blockId = container.customId %}
{% else %}
	{% set blockId = 'container-' ~ container.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block container ' ~ container.type.handle %}
{% set innerClass = 'inner ' ~ container.type.handle ~ '-inner' %}

{% set widthClass = '' %}
{% if container.fullScreenWidth is not empty and container.fullScreenWidth == 1 %}
	{% set widthClass = 'container-fullwidth' %}	
{% endif %}	

{# Sort Out Styling Adjustments to set up class lit arrays #}

{# create arrays to collect style changes to primary element and inner, bg and interior row #}
{% set styleClasses = [] %}
{% set outerClasses = [] %}
{% set rowClasses = [] %}
{% set bgClasses = null %}

{% if styleAdjusts != null %}	
				
	{# add separate array to add padding classes since they are applied separately to inner #}
	
	{% for styleSet in clone(styleAdjusts.children).collect() %}
		{% set devSize = styleSet.deviceSize %}	
		{% set styleSetFieldLayout = styleSet.getFieldLayout() %}
		{% set styleSetFields = styleSetFieldLayout.getCustomFields() %}		
		
		{% for fieldItem in styleSetFields %}
			
			{# Leave out padding since it goes to a different element and leave out background fields #}			
			{% if fieldItem.handle != 'deviceSize' and fieldItem.handle != 'allBordersMatch' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle starts with 'row') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'column') and not (fieldItem.handle starts with 'background') and styleSet[fieldItem.handle]|length %}				
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}
			
			{# add color classes #}
			{% if fieldItem.handle ends with 'Color' and fieldItem.handle != 'backgroundColor' and styleSet[fieldItem.handle] != null %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle].class %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}
						
			{# Add margin settings to outerClasses array #}			
			{% if fieldItem.handle ends with 'Margin' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}
			
			{# Add row layout classes to to rowClasses array #}			
			{% if fieldItem.handle starts with 'row' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set rowClasses = rowClasses|merge([classItem]) -%}
			{% endif %}	
					
		{% endfor %}		
	{% endfor %}
	
	{#
		
	{% set bgClasses = clone(styleAdjusts.children).type('styleControlsBackgroundImage').one() %}
	
	#}
	
{% endif %}


{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (container['customClassList'] is defined ? container.customClassList : null) %}

{# add widthClass to custom string to ensure it is added to container class list #}
{% set customClassString = customClassString ~ ' ' ~ widthClass %}

{# set animation classes for reveal #}

{% set animClasses = [] %}
{% if container.revealAnimation is defined and container.revealAnimation != '' %}  
	{% set animClasses = animClasses|merge(['anim-wrapper']) %}
	{% set revealClass = container.revealAnimation %}
	{% if container.animateChildren is not empty %}
		{% if container.animateChildren == true %}
			{% set animClasses = animClasses|merge(['anim-parent']) %}
			{% if container.staggerChildReveals is not empty %}
				{% if container.staggerChildReveals == true %}
					{% set revealClass = revealClass ~ '-stagger' %}
				{% endif %}
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %}  		
		{% endif %}
	{% else %}
		{% set animClasses = animClasses|merge(['anim-elem']) %} 
	{% endif %}	
	{% set animClasses = animClasses|merge([revealClass]) %}	
{% endif %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 	
	<div {{ gMacros.buildClassListBasic(animClasses) -}}>
		<div {{ gMacros.buildClassList(innerClass, styleClasses, null) -}}>	
			<div {{ gMacros.buildClassList('row anim-pass', rowClasses, null) -}}>
				{% if contentKids != null %}
					{% for child in clone(contentKids.children).collect() %}	  
						
						{#-
						For each child component, attempt to load a custom template for the
						component handle from the project's files,
						then the same template from the core Tiltrus files,
						then a custom default template from the project,
						and finally the default template for this component type from the core Tiltrus files.
						-#}
							
							
						{%
						include [
						  	'_project/_bodyblocks/columns/' ~ child.type.handle,
						  	'_boilerplate/_bodyblocks/columns/' ~ child.type.handle,
						  	'_project/_bodyblocks/columns/column',
						  	'_boilerplate/_bodyblocks/columns/column'
						] with { 'column' :  child }
						%}						  
						
					{% endfor %}
				{% endif %}
			</div>			
		</div>
		{% if bgClasses != null %}		  
			{{ gMacros.buildElementBackground(bgClasses, {'default': '100vw'}, null) }}
		{% endif %}		
	</div>     
</div>
