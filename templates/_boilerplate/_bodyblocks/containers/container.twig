{#
/**
 * Tilt Boilermaker - Generic Container Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# set variables for content child and style adjustment containers  #}
{% set contentKids = null %}
{% set styleAdjusts = null %}
{% for item in container.children.all() %}
	{% if item.type.handle == 'childrenContainer' %}
		{% set contentKids = item %}
	{% elseif item.type.handle == 'styleAdjustmentsContainer' %}
		{% set styleAdjusts = item %}
	{% endif %}
{% endfor %}

{# Set block id attribute value #}
{% if container.customId is defined and container.customId != '' %}
	{% set blockId = container.customId %}
{% else %}
	{% set blockId = 'container-' ~ container.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block ' ~ container.type.handle %}
{% set innerClass = 'inner ' ~ container.type.handle ~ '-inner' %}

{% set widthClass = '' %}
{% if container.fullScreenWidth is not empty and container.fullScreenWidth == 1 %}
	{% set widthClass = 'container-fullwidth' %}	
{% endif %}	

{# Sort Out Styling Adjustments to set up class lit arrays #}

{# create arrays to collect style changes to primary element and inner and bg #}
{% set styleClasses = [] %}
{% set outerClasses = [] %}
{% set bgClasses = null %}

{% if styleAdjusts != null %}	
	
	{# Iterate through style sets in adjustment block and write out style adjustment classes to an array. #}
	
	{% for styleSet in clone(styleAdjusts.children).collect() %}
		{% set devSize = styleSet.deviceSize %}	
		{% set styleSetFieldLayout = styleSet.getFieldLayout() %}
		{% set styleSetFields = styleSetFieldLayout.getCustomFields() %}		
		
		{% for fieldItem in styleSetFields %}
			
			{# Leave out padding since it goes to a different element and leave out background fields #}			
			{% if fieldItem.handle != 'deviceSize' and fieldItem.handle != 'allBordersMatch' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle starts with 'row') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'column') and not (fieldItem.handle starts with 'background') and styleSet[fieldItem.handle]|length %}				
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}
			
			{# add color classes #}
			{% if fieldItem.handle ends with 'Color' and fieldItem.handle != 'backgroundColor' and styleSet[fieldItem.handle] != null %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle].class %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}
						
			{# Add margin settings to outerCLasses array #}			
			{% if fieldItem.handle ends with 'Margin' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}
					
		{% endfor %}		
	{% endfor %}
	
	{#
		
	{% set bgClasses = clone(styleAdjusts.children).type('styleControlsBackgroundImage').one() %}
	
	#}
	
	
{% endif %}


{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (container['customClassList'] is defined ? container.customClassList : null) %}

{# add widthClass to custom string to ensure it is added to container class list #}
{% set customClassString = customClassString ~ ' ' ~ widthClass %}

{# set animation classes for reveal #}

{% set animClasses = [] %}
{% if container.revealAnimation is defined and container.revealAnimation != '' %}  
	{% set animClasses = animClasses|merge(['anim-wrapper']) %}
	{% set revealClass = container.revealAnimation %}
	{% if container.animateChildren is not empty %}
		{% if container.animateChildren == true %}
			{% set animClasses = animClasses|merge(['anim-parent']) %}
			{% if container.staggerChildReveals is not empty %}
				{% if container.staggerChildReveals == true %}
					{% set revealClass = revealClass ~ '-stagger' %}
				{% endif %}
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %}  		
		{% endif %}
	{% else %}
		{% set animClasses = animClasses|merge(['anim-elem']) %} 
	{% endif %}	
	{% set animClasses = animClasses|merge([revealClass]) %}	
{% endif %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 	
	<div {{ gMacros.buildClassListBasic(animClasses) -}}>
		<div {{ gMacros.buildClassList(innerClass, styleClasses, null) -}}>	
			{% if contentKids != null %}
				{% for child in clone(contentKids.children).collect() %}	  
					
					{#-
					For each child component, attempt to load a custom template for the
					component handle from the project's files,
					then the same template from the core Tiltrus files,
					then a custom default template from the project,
					and finally the default template for this component type from the core Tiltrus files.
					-#}
					
					{% if child.type.handle starts with 'row' %}
				  		{%
							include [
					  		'_project/_bodyblocks/rows/' ~ child.type.handle,
					  		'_boilerplate/_bodyblocks/rows/' ~ child.type.handle,
					  		'_project/_bodyblocks/rows/row',
					  		'_boilerplate/_bodyblocks/rows/row'
							] with { 'row' :  child }
				  		%}
			  		{% elseif child.type.handle starts with 'repeater' %}
				  		{%
							include [
					  		'_project/_bodyblocks/repeaters/' ~ child.type.handle,
					  		'_boilerplate/_bodyblocks/repeaters/' ~ child.type.handle,
					  		'_project/_bodyblocks/repeaters/repeater',
					  		'_boilerplate/_bodyblocks/repeaters/repeater'
							] with { 'repeater' :  child }
				  		%}
			  		{% elseif child.type.handle starts with 'accordion' %}
						{%
				  		include [
							'_project/_bodyblocks/accordions/' ~ child.type.handle,
							'_boilerplate/_bodyblocks/accordions/' ~ child.type.handle,
							'_project/_bodyblocks/accordions/accordion',
							'_boilerplate/_bodyblocks/accordions/accordion'
				  		] with { 'accordion' :  child }
						%}
			  		{% elseif child.type.handle starts with 'tabSet' %}
						{%
				  		include [
							'_project/_bodyblocks/tabs/' ~ child.type.handle,
							'_boilerplate/_bodyblocks/tabs/' ~ child.type.handle,
							'_project/_bodyblocks/tabs/tabSet',
							'_boilerplate/_bodyblocks/tabs/tabSet'
				  		] with { 'tabSet' :  child }
						%}
			  		{% elseif child.type.handle starts with 'tabPanel' %}
						{%
				  		include [
							'_project/_bodyblocks/tabs/' ~ child.type.handle,
							'_boilerplate/_bodyblocks/tabs/' ~ child.type.handle,
							'_project/_bodyblocks/tabs/tabPanel',
							'_boilerplate/_bodyblocks/tabs/tabPanel'
				  		] with { 'tabPanel' :  child }
						%}
			  		{% else %}
				  		{%
							include [
					  		'_project/_bodyblocks/blocks/' ~ child.type.handle,
					  		'_boilerplate/_bodyblocks/blocks/' ~ child.type.handle,
					  		'_project/_bodyblocks/blocks/block',
					  		'_boilerplate/_bodyblocks/blocks/block'
							] ignore missing with { 'block' :  child }
				  		%}
			  		{% endif %}
					
				{% endfor %}
			{% endif %}
		</div>
		{% if bgClasses != null %}		  
			{{ gMacros.buildElementBackground(bgClasses, {'default': '100vw'}, null) }}
		{% endif %}		
	</div>     
</div>
