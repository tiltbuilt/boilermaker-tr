{#
/**
 * Tilt Boilermaker - Generic Column Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# Set block id attribute value #}
{% if column.customId is defined and column.customId != '' %}
	{% set blockId = column.customId %}
{% else %}
	{% set blockId = 'column-' ~ column.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block column' %}
{% set innerClass = "inner " ~ column.type.handle ~ "-inner" %}

{% if column.type.handle == 'columnSlide' %}
	{% set loadType = 1 %}
{% else %}
	{% set loadType = 0 %}
{% endif %}

{# set styleClasses with classes needed to be applied to inner div #}
{% set styleClasses = [column.contentAlignment] %}

{% if column.colorScheme.class != '' %}
	{% set colorScheme = column.colorScheme.class %}
{% endif %}

{# outerClasses has color scheme class and class if column should have transparent bg instead of bg specified in color scheme #}
{% set outerClasses = [colorScheme, column.topMargin] %}
{% if column.transparentBackground %}
	{% set outerClasses = outerClasses|merge(['bg-off']) %}
{% endif %}

{% if not column.transparentBackground and column.colorScheme.class|length %}	
	{% set styleClasses = styleClasses|merge(['py-normal']) %}
{% endif %}

{% for columnAdj in column.columnDisplay %}
	{% if columnAdj.columnSize != '' %}
		{% set outerClasses = outerClasses|merge([columnAdj.deviceSize ~ columnAdj.columnSize, columnAdj.deviceSize ~ 'mt-0']) %}
	{% endif %}
	{% if columnAdj.columnOrder != '' %}
		{% set outerClasses = outerClasses|merge([columnAdj.deviceSize ~ columnAdj.columnOrder]) %}
	{% endif %}
	{% if columnAdj.columnVerticalAlignment != '' %}
		{% set outerClasses = outerClasses|merge([columnAdj.deviceSize ~ columnAdj.columnVerticalAlignment]) %}
	{% endif %}
{% endfor %}

{# set variable to pass background images to global macro #}

{% set bgSettings = column.backgroundImagery %}

{% for bg in bgSettings %}
	{% set styleClasses = styleClasses|merge([bg.deviceSize ~ 'py-normal']) %}
{% endfor %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (column['customClassList'] is defined ? column.customClassList : null) %}

{# set animation classes for reveal #}

{% set revealClass = [] %}
{% if column.revealAnimation == 'anim-child' %}	
	{% if column.animateChildren is not empty %}
		{% if column.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-pass']) %}			
		{% else %}
			{% set revealClass = revealClass|merge([column.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge([column.revealAnimation]) %}
	{% endif %}	
{% else %}
	{% if column.animateChildren is not empty %}
		{% if column.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-parent']) %}
			{% if column.staggerChildReveals is not empty %}
				{% if column.staggerChildReveals == true %}
					{% set revealClass = revealClass|merge([column.revealAnimation ~ '-stagger']) %}
				{% else %}
					{% set revealClass = revealClass|merge([column.revealAnimation]) %}
				{% endif %}
			{% endif %}			
		{% else %}
			{% set revealClass = revealClass|merge(['anim-elem', column.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge(['anim-elem', column.revealAnimation]) %}
	{% endif %}			
{% endif %}
{% set outerClasses = outerClasses|merge(revealClass) %}

{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}>	
	<div {{ gMacros.buildClassList(innerClass, styleClasses, null) -}}>	
										
		{% for child in clone(column.children).collect() %}	  
							
			{% if child.type.handle starts with 'row' %}
				  {%
					include [
					  '_project/_bodyblocks/rows/' ~ child.type.handle,
					  '_boilerplate/_bodyblocks/rows/' ~ child.type.handle,
					  '_project/_bodyblocks/rows/row',
					  '_boilerplate/_bodyblocks/rows/row'
					] with { 'row' :  child, 'loadType': loadType }
				  %}
			  {% elseif child.type.handle starts with 'repeater' %}
				  {%
					include [
					  '_project/_bodyblocks/repeaters/' ~ child.type.handle,
					  '_boilerplate/_bodyblocks/repeaters/' ~ child.type.handle,
					  '_project/_bodyblocks/repeaters/repeater',
					  '_boilerplate/_bodyblocks/repeaters/repeater'
					] with { 'repeater' :  child, 'loadType': loadType }
				  %}
			  {% elseif child.type.handle starts with 'accordion' %}
				{%
				  include [
					'_project/_bodyblocks/accordions/' ~ child.type.handle,
					'_boilerplate/_bodyblocks/accordions/' ~ child.type.handle,
					'_project/_bodyblocks/accordions/accordion',
					'_boilerplate/_bodyblocks/accordions/accordion'
				  ] with { 'accordion' :  child, 'loadType': loadType }
				%}
			  {% elseif child.type.handle starts with 'tabSet' %}
				{%
				  include [
					'_project/_bodyblocks/tabs/' ~ child.type.handle,
					'_boilerplate/_bodyblocks/tabs/' ~ child.type.handle,
					'_project/_bodyblocks/tabs/tabSet',
					'_boilerplate/_bodyblocks/tabs/tabSet'
				  ] with { 'tabSet' :  child, 'loadType': loadType }
				%}
			  {% elseif child.type.handle starts with 'tabPanel' %}
				{%
				  include [
					'_project/_bodyblocks/tabs/' ~ child.type.handle,
					'_boilerplate/_bodyblocks/tabs/' ~ child.type.handle,
					'_project/_bodyblocks/tabs/tabPanel',
					'_boilerplate/_bodyblocks/tabs/tabPanel'
				  ] with { 'tabPanel' :  child, 'loadType': loadType }
				%}
			  {% else %}
				  {%
					include [
					  '_project/_bodyblocks/blocks/' ~ child.type.handle,
					  '_boilerplate/_bodyblocks/blocks/' ~ child.type.handle,
					  '_project/_bodyblocks/blocks/block',
					  '_boilerplate/_bodyblocks/blocks/block'
					] ignore missing with { 'block' :  child, 'loadType': loadType }
				  %}
			{% endif %}
			
		{% endfor %}
		
	</div>
	<div class="background">
		{% if bgSettings|length %}		
			{{ gMacros.buildElementBackground(bgSettings, {'default': '100vw'}, null, null) }}
		{% endif %}		
	</div>	    
</div>
