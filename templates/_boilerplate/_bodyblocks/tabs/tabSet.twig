{#
/**
 * Tilt Boilermaker - Generic Container Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}


{# Set block id attribute value #}
{% if tabSet.customId is defined and tabSet.customId != '' %}
	{% set blockId = tabSet.customId %}
{% else %}
	{% set blockId = 'tabSet-' ~ tabSet.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = tabSet.type.handle %}
{% set innerClass = 'inner ' ~ tabSet.type.handle ~ '-inner' %}

{% if tabSet.colorScheme != null and tabSet.colorScheme.class != '' %}
	{% set colorScheme = tabSet.colorScheme.class %}
{% endif %}

{# create arrays to collect style changes to primary element and inner and bg #}
{% set outerClasses = ['elem-block', colorScheme, 'bg-off'] %}

{% set bgSettings = tabSet.backgroundImagery %}

{# Set styling classes and attributes for accrodion button and panel #}

{% set buttonClasses = ['btn-tab'] %}
{% set panelClasses = [] %}
{% set iconClasses = ['tab-icon-wrapper'] %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (tabSet['customClassList'] is defined ? tabSet.customClassList : null) %}

{# set animation classes for reveal #}

{% set revealClass = [] %}
{% if tabSet.revealAnimation == 'anim-child' %}	
	{% if tabSet.animateChildren is not empty %}
		{% if tabSet.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-pass']) %}			
		{% else %}
			{% set revealClass = revealClass|merge([tabSet.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge([tabSet.revealAnimation]) %}
	{% endif %}	
{% else %}
	{% if tabSet.animateChildren is not empty %}
		{% if tabSet.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-parent']) %}
			{% if tabSet.staggerChildReveals is not empty %}
				{% if tabSet.staggerChildReveals == true %}
					{% set revealClass = revealClass|merge([tabSet.revealAnimation ~ '-stagger']) %}
				{% else %}
					{% set revealClass = revealClass|merge([tabSet.revealAnimation]) %}
				{% endif %}
			{% endif %}			
		{% else %}
			{% set revealClass = revealClass|merge(['anim-elem', tabSet.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge(['anim-elem', tabSet.revealAnimation]) %}
	{% endif %}			
{% endif %}
{% set outerClasses = outerClasses|merge(revealClass) %}


{# OUTPUT #}

<div {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}> 	
	
	<div class="{{innerClass}}">	
						
		<div class="tab-button-panel">
			{% for child in clone(tabSet.children).collect() %}
			
			  {# Set IDs for appropriate component parts #}
			  
			  {% if child.customId is defined and child.customId != '' %}			  
				  {% set panelId = child.customId ~ '-panel' %}
				  {% set buttonId = child.customId ~ '-button' %}
				  {% set headingId = child.customId ~ '-heading' %}		
			  {% else %}			  
				  {% set panelId = 'tab-' ~ child.id ~ '-panel' %}
				  {% set buttonId = 'tab-' ~ child.id ~ '-button' %}
				  {% set headingId = 'tab-' ~ child.id ~ '-heading' %}
			  {% endif %}
		
			  {# determine if this is the first loop through children to determine how to set initial state of first clid tabSet #}
			  
			  {% if loop.first == true %}
				  {% set openState = true %}
			  {% else %}
				  {% set openState = false %}
			  {% endif %}
			  
			  {# set up attributes for header and button #}
			  
			  {% set buttonClasses = ['btn-tab'] %}
			  {% if openState %}
				  {% set buttonClasses = buttonClasses|merge(['active-tab']) %}
			  {% endif %}
			  {% set buttonAttrs = {'role': 'tab', 'data-target': '#' ~ panelId, 'aria-controls': panelId, 'data-parent': '#' ~ blockId} %}
			  				  
				<button id="{{buttonId}}" {{ gMacros.buildclassListBasic(buttonClasses) -}} {{- gMacros.buildOtherElementAttributes(buttonAttrs) -}}>
					{% if child.iconAsset is not empty and child.iconAsset.valuee|length %}
						<div {{ gMacros.buildClassListBasic(iconClasses) -}}>									
							<svg><use xlink:href="#{{ child.iconAsset.value }}"></use></svg>
						</div>
					{% endif %}
					<{{ tabSet.headingLevel }} id="{{headingId}}" class="tab-title">{{child.tabTitle}}</{{ tabSet.headingLevel }}>
				</button>	  
		
			{% endfor %}  
		</div>
		<div class="tab-panel-wrapper">
			{% for child in clone(tabSet.children).collect() %}
		
				{% if child.customId is defined and child.customId != '' %}							
					{% set headingId = child.customId ~ '-heading' %}
					{% set panelId = child.customId ~ '-panel' %}		
				{% else %}							
					{% set headingId = 'tab-' ~ child.id ~ '-heading' %}
					{% set panelId = 'tab-' ~ child.id ~ '-panel' %}
				{% endif %}
				
				{# determine if this is the first loop through children to determine how to set initial state of first clid tabSet #}
				
				{% if loop.first == true %}
					{% set openState = 'active-tab' %}
				{% else %}
					{% set openState = '' %}
				{% endif %}
				
				{% set panelAttrs = {'aria-labelledby': headingId} %}
		
				<div {{ gMacros.buildElementAttributes(panelId, 'tabPanel', panelClasses, openState, panelAttrs) -}}> 	
					
					<div {{ gMacros.buildClassListBasic(['inner', 'tabPanel-inner']) -}}>	
																								
						{% for panelChild in clone(child.children).collect() %}											  
																							
							{% if panelChild.type.handle starts with 'row' %}
								  {%
									include [
									  '_project/_bodyblocks/rows/' ~ panelChild.type.handle,
									  '_boilerplate/_bodyblocks/rows/' ~ panelChild.type.handle,
									  '_project/_bodyblocks/rows/row',
									  '_boilerplate/_bodyblocks/rows/row'
									] with { 'row' :  panelChild }
								  %}
							  {% elseif panelChild.type.handle starts with 'repeater' %}
								  {%
									include [
									  '_project/_bodyblocks/repeaters/' ~ panelChild.type.handle,
									  '_boilerplate/_bodyblocks/repeaters/' ~ panelChild.type.handle,
									  '_project/_bodyblocks/repeaters/repeater',
									  '_boilerplate/_bodyblocks/repeaters/repeater'
									] with { 'repeater' :  panelChild }
								  %}
							  {% elseif panelChild.type.handle starts with 'accordion' %}
								{%
								  include [
									'_project/_bodyblocks/accordions/' ~ panelChild.type.handle,
									'_boilerplate/_bodyblocks/accordions/' ~ panelChild.type.handle,
									'_project/_bodyblocks/accordions/accordion',
									'_boilerplate/_bodyblocks/accordions/accordion'
								  ] with { 'accordion' :  panelChild }
								%}					  
							  {% else %}
								  {%
									include [
									  '_project/_bodyblocks/blocks/' ~ panelChild.type.handle,
									  '_boilerplate/_bodyblocks/blocks/' ~ panelChild.type.handle,
									  '_project/_bodyblocks/blocks/block',
									  '_boilerplate/_bodyblocks/blocks/block'
									] ignore missing with { 'block' :  panelChild }
								  %}
							  {% endif %}
							
						{% endfor %}								
					</div>
					<div class="background">
						{% if bgSettings|length %}		
							{{ gMacros.buildElementBackground(bgSettings, {'default': '100vw'}, null, null) }}
						{% endif %}				
					</div> 						    
				</div>  
		
			{% endfor %}				
			 
		</div>			
	</div>			
	     
</div>
