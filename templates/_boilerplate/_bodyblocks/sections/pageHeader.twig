{#
/**
 * Tilt Boilermaker - Page Header Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# set variables for content child and style adjustment containers #} 
{% set buttonGroup = clone(section.children).type('childrenButtonGroup').one() %}
{% set styleAdjusts = clone(section.children).type('styleAdjustmentsPageHeader').one() %}

	
{# Set block id attribute value #}
{% if section.customId is defined and section.customId != '' %}
	{% set blockId = section.customId %}
	{% set headerId = section.customId ~ '-mainheader' %}
	{% set subId = section.customId ~ '-subhead' %}
	{% set introId = section.customId ~ '-intro' %}
	{% set btnGrpId = section.customId ~ '-btngrp' %}
{% else %}
	{% set blockId = section.type.handle ~ '-' ~ section.id %}
	{% set headerId = section.type.handle ~ '-' ~ section.id ~ '-mainheader' %}
	{% set subId = section.type.handle ~ '-' ~ section.id ~ '-subhead' %}
	{% set introId = section.type.handle ~ '-' ~ section.id ~ '-intro' %}
	{% set btnGrpId = section.type.handle ~ '-' ~ section.id ~ '-btngrp' %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block ' ~ section.type.handle %}
{% set innerClass = 'inner ' ~ section.type.handle ~ '-inner rect-3-1' %}

{# Sort Out Styling Adjustments to set up class lit arrays #}

{# create array to collect style changes to primary element #}
{% set styleClasses = [] %}
{% set outerClasses = [] %}
{% set rowClasses = [] %}
{% set bgClasses = [] %}
{% set headerClasses = [] %}
{% set subClasses = [] %}
{% set introClasses = [] %}
{% set headerOuterClasses = [] %}
{% set subOuterClasses = [] %}
{% set introOuterClasses = [] %}
{% set btnGrpClasses = [] %}
{% set btnGrpOuterClasses = [] %}
{% set childBtnClasses = [] %}
{% set childBtnOuterClasses = [] %}
{% set bgSizes = [] %}

{% if styleAdjusts != null %}	
	
	{# Iterate through style sets in adjustment block and write out style adjustment classes to an array. #}
		
	{% for styleSet in clone(styleAdjusts.children).collect() %}
		{% set devSize = styleSet.deviceSize %}		  
		{% set styleSetFieldLayout = styleSet.getFieldLayout() %}
		{% set styleSetFields = styleSetFieldLayout.getCustomFields() %}		
		{% for fieldItem in styleSetFields %}
		
			{# Leave out padding since it goes to a different element and leave out background fields #}			
			{% if fieldItem.handle != 'deviceSize' and fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle starts with 'row') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'column') and not (fieldItem.handle starts with 'background') and styleSet[fieldItem.handle]|length %}				
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}
			
			{# add color classes #}
			{% if fieldItem.handle ends with 'Color' and fieldItem.handle != 'backgroundColor' and styleSet[fieldItem.handle] != null %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle].class %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}
			
			{# Add padding settings to padCLasses array #}			
			{% if fieldItem.handle ends with 'Margin' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}
			
			{# Add row layout classes to to rowClasses array #}			
			{% if fieldItem.handle starts with 'row' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set rowClasses = rowClasses|merge([classItem]) -%}
			{% endif %}	
			
			{% if fieldItem.handle == 'displaySetting' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}
			
		{% endfor %}
			
		{# Get main header styleset adjustments if any #}			
		{% set headerStyles = clone(styleSet.children).type('styleSetMainHeader').one() %}
		{% if headerStyles != null %}
			{% set headerFieldLayout = headerStyles.getFieldLayout() %}
			{% set headerFields = headerFieldLayout.getCustomFields() %}
			{% for fieldItem in headerFields %}						
				
				{% if fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'background') and headerStyles[fieldItem.handle]|length %}					
					{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
					{%- set headerClasses = headerClasses|merge([classItem]) -%}
				{% endif %}	
				
				{# add color classes #}
				{% if fieldItem.handle ends with 'Color' and headerStyles[fieldItem.handle] != null %}
					{% set classItem = devSize ~ headerStyles[fieldItem.handle].class %}
					{%- set headerClasses = headerClasses|merge([classItem]) -%}
				{% endif %}
				
				{% if fieldItem.handle ends with 'Margin' and headerStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
					{%- set headerOuterClasses = headerOuterClasses|merge([classItem]) -%}
				{% endif %}
				
				{% if fieldItem.handle == 'displaySetting' and headerStyles[fieldItem.handle]|length %}
					{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
					{%- set headerOuterClasses = headerOuterClasses|merge([classItem]) -%}
				{% endif %}
				
			{% endfor %}
		{% endif %}
		
		{# Get subhead styleset adjustments if any #}			
		{% if section.subheadText|length %}
			{% set subStyles = clone(styleSet.children).type('styleSetSubhead').one() %}
			{% if subStyles != null %}
				{% set subheadFieldLayout = subStyles.getFieldLayout() %}
				{% set subheadFields = subheadFieldLayout.getCustomFields() %}
				{% for fieldItem in subheadFields %}						
					
					{% if fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'background') and subStyles[fieldItem.handle]|length %}					
						{% set classItem = devSize ~ subStyles[fieldItem.handle] %}
						{%- set subClasses = subClasses|merge([classItem]) -%}
					{% endif %}	
					
					{# add color classes #}
					{% if fieldItem.handle ends with 'Color' and subStyles[fieldItem.handle] != null %}
						{% set classItem = devSize ~ subStyles[fieldItem.handle].class %}
						{%- set subClasses = subClasses|merge([classItem]) -%}
					{% endif %}						
					
					{% if fieldItem.handle ends with 'Margin' and subStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ subStyles[fieldItem.handle] %}
						{%- set subOuterClasses = subOuterClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if fieldItem.handle == 'displaySetting' and subStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ subStyles[fieldItem.handle] %}
						{%- set subOuterClasses = subOuterClasses|merge([classItem]) -%}
					{% endif %}
					
				{% endfor %}
			{% endif %}
		{% endif %}
		
		{# Get content text styleset adjustments if any #}
		
		{% if section.simpleText|length %}
			{% set introStyles = clone(styleSet.children).type('styleSetContentText').one() %}
			{% if introStyles != null %}
				{% set introFieldLayout = introStyles.getFieldLayout() %}
				{% set introFields = introFieldLayout.getCustomFields() %}
				{% for fieldItem in introFields %}						
					
					{% if fieldItem.handle != 'allBordersMatch' and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'background') and introStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
						{%- set introClasses = introClasses|merge([classItem]) -%}
					{% endif %}	
					
					{# add color classes #}
					{% if fieldItem.handle ends with 'Color' and introStyles[fieldItem.handle] != null %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle].class %}
						{%- set introClasses = introClasses|merge([classItem]) -%}
					{% endif %}						
					
					{% if fieldItem.handle ends with 'Margin' and introStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
						{%- set introOuterClasses = introOuterClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if fieldItem.handle == 'displaySetting' and introStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
						{%- set introOuterClasses = introOuterClasses|merge([classItem]) -%}
					{% endif %}
					
				{% endfor %}
			{% endif %}
		{% endif %}
	
		
		{# Get button group styleset adjustments if any #}
		
		{% if buttonGroup != null %} 				
			{% set btnGrpStyles = clone(styleSet.children).type('styleSetChildButtons').one() %}
			{% if btnGrpStyles != null %}					
				{% set btnGrpFieldLayout = btnGrpStyles.getFieldLayout() %}
				{% set btnGrpFields = btnGrpFieldLayout.getCustomFields() %}
				{% for fieldItem in btnGrpFields %}						
					{% if not (fieldItem.handle ends with 'Margin') and fieldItem.handle != 'displaySetting' and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'button') and btnGrpStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
						{%- set btnGrpClasses = btnGrpClasses|merge([classItem]) -%}
					{% endif %}									
					
					{% if fieldItem.handle ends with 'Margin' and btnGrpStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
						{%- set btnGrpOuterClasses = btnGrpOuterClasses|merge([classItem]) -%}
					{% endif %}
					
					{% if fieldItem.handle == 'displaySetting' and btnGrpStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
						{%- set btnGrpOuterClasses = btnGrpOuterClasses|merge([classItem]) -%}
					{% endif %}
					
					{# add button classes to child btn array #}
					{% if (fieldItem.handle starts with 'button') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle ends with 'Margin') and btnGrpStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
						{%- set childBtnClasses = childBtnClasses|merge([classItem]) -%}
					{% endif %}
					
					{# add color classes to btn classes #}
					{% if fieldItem.handle ends with 'Color' and btnGrpStyles[fieldItem.handle] != null %}
						{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle].class %}
						{%- set childBtnClasses = childBtnClasses|merge([classItem]) -%}
					{% endif %}
												
					{# add button margin classes to array #}
					{% if (fieldItem.handle starts with 'button') and (fieldItem.handle ends with 'Margin') and btnGrpStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ btnGrpStyles[fieldItem.handle] %}
						{%- set childBtnOuterClasses = childBtnOuterClasses|merge([classItem]) -%}
					{% endif %}	
									
				{% endfor %}
			{% endif %}
		{% endif %}	
		
		{# set up background objects and drop into array. If no color and no image are set them skip styleset #}
		{% if (styleSet.backgroundColor.class is defined and styleSet.backgroundColor.class) or (styleSet.backgroundImage is defined and styleSet.backgroundImage|length) %}				
			{% set bgItem  = {
				'devSize': devSize,
				'bgColor': styleSet.backgroundColor.class ?? '',
				'bgImg': styleSet.backgroundImage.one(),
				'bgSize': styleSet.backgroundSize ?? '',
				'bgPosition': styleSet.backgroundPosition ?? '',
				'bgRepeat': styleSet.backgroundRepeat ?? '',
				'bgOpacity': styleSet.backgroundOpacity ?? '',
				'bgImgOpacity': styleSet.backgroundImageOpacity ?? '',
			}		
			%}
			{% set bgClasses = bgClasses|merge([bgItem]) %}	
			{% set bgSizes = bgSizes|merge([devSize])%}	
		{% endif %}	
				
	{% endfor %}
	
{% endif %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (section['customClassList'] is defined ? section.customClassList : null) %}


{# set animation classes for reveal #}

{% set animClasses = [] %}
{% if section.revealAnimation is defined and section.revealAnimation != '' %}  

	{% set animClasses = animClasses|merge(['anim-wrapper']) %}
	{% set revealClass = section.revealAnimation %}
	{% set revealClass = section.revealAnimation %}
	{% if section.animateChildren is not empty %}
		{% if section.animateChildren == true %}
			{% set animClasses = animClasses|merge(['anim-parent']) %}
			{% if section.staggerChildReveals is not empty %}
				{% if section.staggerChildReveals == true %}
					{% set revealClass = revealClass ~ '-stagger' %}
				{% endif %}
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %}  		
		{% endif %}
	{% else %}
		{% set animClasses = animClasses|merge(['anim-elem']) %} 
	{% endif %}	
	{% set animClasses = animClasses|merge([revealClass]) %}	
{% endif %}

{# OUTPUT #}

<section {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}>	
	<div {{ gMacros.buildClassList(null, animClasses, null ) -}}>
		<div {{ gMacros.buildClassList(innerClass, styleClasses, null) -}}>
			<div class="container slide-container {% if section.fullScreenWidth is not empty and section.fullScreenWidth == 1 %}container-fullwidth{% endif %}">	
				<div {{ gMacros.buildClassList('pageHeader-layout anim-pass', rowClasses, null) -}}>	
					<div class="w-full anim-pass">
						
						{% if section.subheadText|length and section.subheadPosition == 1 %}
				  		<div {{ gMacros.buildElementAttributes(subId, 'elem-block pageHeader-subhead-outer', subOuterClasses) -}}>
							<div class="anim-wrapper anim-child">
								<div {{ gMacros.buildClassList('inner pageHeader-subhead', subClasses, null) -}}>
									{{ gMacros.stripTags(section.subheadText) }}
								</div>
							</div>
				  		</div>
						{% endif %}
						
						
						<div {{ gMacros.buildElementAttributes(headerId, 'elem-block pageHeader-mainheader heading1-outer', headerOuterClasses, null) -}}>
							<div class="anim-wrapper anim-child">
								<h1 {{ gMacros.buildClassList('inner pageHeader-mainheader-inner heading1', headerClasses, null) -}}>
									{% if section.headerText|length %}
										{{ gMacros.stripTags(section.headerText) }}
									{% else %}
										{{entry.title}}
									{% endif %}
								</h1>
							</div>
						</div>
						
						
						{% if section.subheadText|length and section.subheadPosition == 0 %}
				  		<div {{ gMacros.buildElementAttributes(subId, 'elem-block pageHeader-subhead-outer', subOuterClasses) -}}>
							<div class="anim-wrapper anim-child">
								<div {{ gMacros.buildClassList('inner pageHeader-subhead', subClasses, null) -}}>
									{{ gMacros.stripTags(section.subheadText) }}
								</div>
							</div>
				  		</div>
						{% endif %}
						
						{% if section.simpleText|length %}				
							<div {{ gMacros.buildElementAttributes(introId, 'elem-block pageHeader-outer', introOuterClasses, null) -}}>
								<div class="anim-wrapper anim-child">
									<div {{ gMacros.buildClassList('inner pageHeader-intro ', introClasses, null) -}}>
										{{section.simpleText}}
									</div>
								</div>
							</div>
						{% endif %}  
						
						{% if buttonGroup != null %}
							<div {{ gMacros.buildElementAttributes(btnGrpId, 'elem-block pageHeader-buttonGroup', btnGrpOuterClasses, null) -}}> 	
								<div class="anim-wrapper anim-child">
									<div {{ gMacros.buildClassList('inner pageHeader-buttonGroup-inner ', btnGrpClasses, null) -}}>								
									{% for child in clone(buttonGroup.children).collect() %}	  
										
										{#-
										For each child component, attempt to load a custom template for the
										component handle from the project's files,
										then the same template from the core Tiltrus files,
										then a custom default template from the project,
										and finally the default template for this component type from the core Tiltrus files.
										-#}
																			
							  		{%
										include [
								  		'_project/_bodyblocks/blocks/' ~ child.type.handle,
								  		'_boilerplate/_bodyblocks/blocks/' ~ child.type.handle,
								  		'_project/_bodyblocks/blocks/block',
								  		'_boilerplate/_bodyblocks/blocks/block'
										] ignore missing with { 'block' :  child, 'groupStyles': childBtnClasses, 'spacingStyles': childBtnOuterClasses, 'inGroup': true }
							  		%}									  
										
									{% endfor %}							
									</div>		
								</div>     
							</div>			
						{% endif %}
						
					</div>
				</div>
			</div>			
		</div> 
	
		<div class="background pageHeader-default-bg">
			{% if bgClasses != null %}		
				{{ gMacros.buildElementBackground(bgClasses, bgSizes, {'default': '100vw'}, null) }}
			{% endif %}		
		</div>
	
	</div>	   
</section>
