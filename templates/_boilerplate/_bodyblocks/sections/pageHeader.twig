{#
/**
 * Tilt Boilermaker - Page Header Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# set variables for content child and style adjustment containers  #}
{% set buttonGroup = clone(section.children).type('childrenButtonGroup').one() %}
{% set styleAdjusts = clone(section.children).type('styleAdjustmentsPageHeader').one() %}

{# set section color scheme variable #}
{% set colorScheme = section.colorScheme %}
	
{# Set block id attribute value #}
{% if section.customId is defined and section.customId != '' %}
	{% set blockId = section.customId %}
	{% set headerId = section.customId ~ '-mainheader' %}
	{% set subId = section.customId ~ '-subhead' %}
	{% set introId = section.customId ~ '-intro' %}
	{% set btnGrpId = section.customId ~ '-btngrp' %}
{% else %}
	{% set blockId = section.type.handle ~ '-' ~ section.id %}
	{% set headerId = section.type.handle ~ '-' ~ section.id ~ '-mainheader' %}
	{% set subId = section.type.handle ~ '-' ~ section.id ~ '-subhead' %}
	{% set introId = section.type.handle ~ '-' ~ section.id ~ '-intro' %}
	{% set btnGrpId = section.type.handle ~ '-' ~ section.id ~ '-btngrp' %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block ' ~ section.type.handle %}
{% set innerClass = 'inner ' ~ section.type.handle ~ '-inner rect-3-1' %}

{# Sort Out Styling Adjustments to set up class lit arrays #}

{# create array to collect style changes to primary element #}
{% set styleClasses = [colorScheme.color[0].background, colorScheme.color[0].text] %}
{% set rowClasses = [] %}
{% set bgClasses = null %}
{% set headerClasses = [] %}
{% set subClasses = [] %}
{% set introClasses = [] %}
{% set headerPadClasses = [] %}
{% set subPadClasses = [] %}
{% set introPadClasses = [] %}
{% set btnGrpClasses = [] %}
{% set btnGrpPadClasses = [] %}
{% set childBtnAdjusts = null %}


{% if styleAdjusts != null %}	
	
	{# Iterate through style sets in adjustment block and write out style adjustment classes to an array. #}
		
	{% for styleSet in clone(styleAdjusts.children).collect() %}
		{% set devSize = styleSet.deviceSize %}		  
		{% set styleSetFieldLayout = styleSet.getFieldLayout() %}
		{% set styleSetFields = styleSetFieldLayout.getCustomFields() %}
		{% for fieldItem in styleSetFields %}
		
			{# Leave out padding since it goes to a different element and leave out background fields #}
			{% if fieldItem.handle != 'deviceSize' and not (fieldItem.handle ends with 'Padding') and not (fieldItem.handle ends with 'background') and not (fieldItem.handle starts with 'row') and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}	
			
			{# Add padding settings to padClasses array #}
			{% if fieldItem.handle ends with 'Padding' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set padClasses = padClasses|merge([classItem]) -%}
			{% endif %}	
			
			{# Add row layout classes to to rowClasses array #}
			{% if fieldItem.handle starts with 'row' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set rowClasses = rowClasses|merge([classItem]) -%}
			{% endif %}	
			
			{# Get main header styleset adjustments if any #}
			{% set headerStyles = clone(styleSet.children).type('styleSetMainHeader').one() %}
			{% if headerStyles != null %}
				{% set headerFieldLayout = headerStyles.getFieldLayout() %}
				{% set headerFields = headerFieldLayout.getCustomFields() %}
				{% for fieldItem in headerFields %}						
					{# Leave out padding since it goes to a different element and leave out background fields #}
					{% if not (fieldItem.handle ends with 'Padding') and headerStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
						{%- set headerClasses = headerClasses|merge([classItem]) -%}
					{% endif %}	
					
					{# Add padding settings to padClasses array #}
					{% if fieldItem.handle ends with 'Padding' and headerStyles[fieldItem.handle]|length %}
						{% set classItem = devSize ~ headerStyles[fieldItem.handle] %}
						{%- set headerPadClasses = headerPadClasses|merge([classItem]) -%}
					{% endif %}
				{% endfor %}
			{% endif %}
			
			{# Get subhead styleset adjustments if any #}
			{% if section.subheadText|length %}
				{% set subStyles = clone(styleSet.children).type('styleSetSubhead').one() %}
				{% if subStyles != null %}
					{% set subheadFieldLayout = subStyles.getFieldLayout() %}
					{% set subheadFields = subheadFieldLayout.getCustomFields() %}
					{% for fieldItem in subheadFields %}						
						{# Leave out padding since it goes to a different element and leave out background fields #}
						{% if not (fieldItem.handle ends with 'Padding') and subStyles[fieldItem.handle]|length %}
							{% set classItem = devSize ~ subStyles[fieldItem.handle] %}
							{%- set subClasses = subClasses|merge([classItem]) -%}
						{% endif %}	
						
						{# Add padding settings to padClasses array #}
						{% if fieldItem.handle ends with 'Padding' and subStyles[fieldItem.handle]|length %}
							{% set classItem = devSize ~ subStyles[fieldItem.handle] %}
							{%- set subPadClasses = subPadClasses|merge([classItem]) -%}
						{% endif %}
					{% endfor %}
				{% endif %}
			{% endfor %}
			
			{# Get content text styleset adjustments if any #}
			{% if section.simpleText|length %}
				{% set introStyles = clone(styleSet.children).type('styleSetContentText').one() %}
				{% if introStyles != null %}
					{% set introFieldLayout = introStyles.getFieldLayout() %}
					{% set introFields = subheadFieldLayout.getCustomFields() %}
					{% for fieldItem in introFields %}						
						{# Leave out padding since it goes to a different element and leave out background fields #}
						{% if not (fieldItem.handle ends with 'Padding') and introStyles[fieldItem.handle]|length %}
							{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
							{%- set introClasses = introClasses|merge([classItem]) -%}
						{% endif %}	
						
						{# Add padding settings to padClasses array #}
						{% if fieldItem.handle ends with 'Padding' and introStyles[fieldItem.handle]|length %}
							{% set classItem = devSize ~ introStyles[fieldItem.handle] %}
							{%- set introPadClasses = introPadClasses|merge([classItem]) -%}
						{% endif %}
					{% endfor %}
				{% endif %}
			{% endif %}
			
			{% if buttonGroup != null %} 			
				{% set btnStyles = clone(styleSet.children).type('styleSetButton').one() %}
				{% if btnStyles != null %}
					{% set btnFieldLayout = btnStyles.getFieldLayout() %}
					{% set btnFields = btnFieldLayout.getCustomFields() %}
					{% for fieldItem in btnFields %}						
						{# Leave out padding since it goes to a different element and leave out background fields #}
						{% if introStyles[fieldItem.handle]|length %}
							{% set classItem = devSize ~ btnStyles[fieldItem.handle] %}
							{%- set btnClasses = btnClasses|merge([classItem]) -%}
						{% endif %}					
					{% endfor %}
				{% endif %}
			{% endif %}			
			
								
		{% endfor %}
				
	{% endfor %}
	
{% endif %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (section['customClassList'] is defined ? section.customClassList : null) %}


{# set animation classes for reveal #}

{% set animClasses = [] %}
{% if section.revealAnimation is defined and section.revealAnimation != '' %}  

	{% set animClasses = animClasses|merge(['anim-wrapper']) %}
	{% set revealClass = section.revealAnimation %}
	{% set revealClass = section.revealAnimation %}
	{% if section.animateChildren is not empty %}
		{% if section.animateChildren == true %}
			{% set animClasses = animClasses|merge(['anim-parent']) %}
			{% if section.staggerChildReveals is not empty %}
				{% if section.staggerChildReveals == true %}
					{% set revealClass = revealClass ~ '-stagger' %}
				{% endif %}
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %}  		
		{% endif %}
	{% else %}
		{% set animClasses = animClasses|merge(['anim-elem']) %} 
	{% endif %}	
	{% set animClasses = animClasses|merge([revealClass]) %}	
{% endif %}

{# OUTPUT #}

<section {{ gMacros.buildElementAttributes(blockId, blockClass, styleClasses, customClassString) -}}>	
	<div {{ gMacros.buildClassList(null, animClasses, null ) -}}>
		<div {{ gMacros.buildClassList(innerClass, null, null) -}}>			
				<div {{ gMacros.buildClassList('pageHeader-layout anim-pass', rowClasses, null) -}}>	
					<div class="w-full lg:w-3/4 anim-pass">
						
						{% if section.subheadText|length and section.subheadPosition == 1 %}
					  	<div {{ gMacros.buildElementAttributes(subId, 'elem-block pageHeader-subhead', subClasses) -}}>
							<div class="anim-wrapper anim-child">
								<div {{ gMacros.buildClassList('inner pageHeader-subhead-inner', subPadClasses, null) -}}>
									{{ gMacros.stripTags(section.subheadText) }}
								</div>
							</div>
					  	</div>
						{% endif %}
						
						
						<h1 {{ gMacros.buildElementAttributes(headerId, 'elem-block pageHeader-mainheader heading1', headerClasses, null) -}}>
							<div class="anim-wrapper anim-child">
								<div {{ gMacros.buildClassList('inner pageHeader-mainheader-inner heading1-inner', headerPadClasses, null) -}}>
									{% if section.headerText|length %}
										{{ gMacros.stripTags(section.headerText) }}
									{% else %}
										{{entry.title}}
									{% endif %}
								</div>
							</div>
						</h1>
						
						
						{% if section.subheadText|length and section.subheadPosition == 0 %}
					  	<div {{ gMacros.buildElementAttributes(subId, 'elem-block pageHeader-subhead', subClasses) -}}>
							<div class="anim-wrapper anim-child">
								<div {{ gMacros.buildClassList('inner pageHeader-subhead-inner', subPadClasses, null) -}}>
									{{ gMacros.stripTags(section.subheadText) }}
								</div>
							</div>
					  	</div>
						{% endif %}
						
						{% if section.simpleText|length %}				
							<div {{ gMacros.buildElementAttributes(introId, 'elem-block pageHeader-intro', introClasses, null) -}}>
								<div class="anim-wrapper anim-child">
									<div {{ gMacros.buildClassList('inner pageHeader-intro-inner ', introPadClasses, null) -}}>
										{{section.simpleText}}
									</div>
								</div>
							</div>
						{% endif %}  
						
						{% if buttonGroup != null %}
							<div {{ gMacros.buildElementAttributes(btnGrpId, 'elem-block pageHeader-buttonGroup', btnGrpClasses, null) -}}> 	
								<div class="anim-wrapper anim-child">
									<div {{ gMacros.buildClassList('inner pageHeader-buttonGroup-inner ', btnGrpPadClasses, null) -}}>
										
									{% for child in clone(buttonGroup.children).collect() %}	  
										
										{#-
										For each child component, attempt to load a custom template for the
										component handle from the project's files,
										then the same template from the core Tiltrus files,
										then a custom default template from the project,
										and finally the default template for this component type from the core Tiltrus files.
										-#}
																			
								  	{%
										include [
									  	'_project/_bodyblocks/blocks/' ~ child.type.handle,
									  	'_boilerplate/_bodyblocks/blocks/' ~ child.type.handle,
									  	'_project/_bodyblocks/blocks/block',
									  	'_boilerplate/_bodyblocks/blocks/block'
										] ignore missing with { 'block' :  child, 'groupStyles': childBtnAdjusts, 'ignoreMargins': true, 'inGroup': true }
								  	%}									  
										
									{% endfor %}							
									</div>		
								</div>     
							</div>			
						{% endif %}
						
					</div>
				</div>
			</div>
		</div> 
	
		{% if bgClasses != null %}		  
			{{ gMacros.buildElementBackground(bgClasses, {'default': '100vw'}, null) }}
		{% endif %}
	</div>	   
</section>
