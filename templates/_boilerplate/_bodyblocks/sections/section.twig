{#
/**
 * Tilt Boilermaker - Generic Page Section Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# Set block id attribute value #}
{% if section.customId is defined and section.customId != '' %}
	{% set blockId = section.customId %}
{% else %}
	{% set blockId = 'section-' ~ section.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = section.type.handle %}
{% set innerClass = 'inner ' ~ section.type.handle ~ '-inner' %}


{# set styleClasses with classes needed to be applied to container inner div #}
{% set styleClasses = ['inner', 'container-inner', section.topPadding, section.bottomPadding, section.gutterPadding, section.contentAlignment] %}

{% set colorScheme = section.colorScheme.class %}

{# outerClasses has color scheme class and class if section should have transparent bg instead of bg specified in color scheme #}
{% set outerClasses = ['elem-block', colorScheme] %}
{% if section.transparentBackground %}
	{% set outerClasses = outerClasses|merge(['bg-transparent']) %}
{% endif %}

{% set bgSettings = section.backgroundImagery %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (section['customClassList'] is defined ? section.customClassList : null) %}

{# set animation classes for reveal #}

{% set revealClass = [] %}
{% if section.revealAnimation == 'anim-child' %}	
	{% if section.animateChildren is not empty %}
		{% if section.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-pass']) %}			
		{% else %}
			{% set revealClass = revealClass|merge([section.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge([section.revealAnimation]) %}
	{% endif %}	
{% else %}
	{% if section.animateChildren is not empty %}
		{% if section.animateChildren == true %}
			{% set revealClass = revealClass|merge(['anim-parent']) %}
			{% if section.staggerChildReveals is not empty %}
				{% if section.staggerChildReveals == true %}
					{% set revealClass = revealClass|merge([section.revealAnimation ~ '-stagger']) %}
				{% else %}
					{% set revealClass = revealClass|merge([section.revealAnimation]) %}
				{% endif %}
			{% endif %}			
		{% else %}
			{% set revealClass = revealClass|merge(['anim-elem', section.revealAnimation]) %}		
		{% endif %}
	{% else %}
		{% set revealClass = revealClass|merge(['anim-elem', section.revealAnimation]) %}
	{% endif %}			
{% endif %}
{% set outerClasses = outerClasses|merge(revealClass) %}

{# OUTPUT #}

<section {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}>
	<div class="{{innerClass}}">
		<div class="container {% if section.fullScreenWidth %}container-fullwidth{% endif %}">		 		
			
			<div {{ gMacros.buildClassListBasic(styleClasses) -}}> 
				
				{% for child in clone(section.children).collect() %}			
					
					{% if child.type.handle starts with 'row' %}
						  {%
							include [
							  '_project/_bodyblocks/rows/' ~ child.type.handle,
							  '_boilerplate/_bodyblocks/rows/' ~ child.type.handle,
							  '_project/_bodyblocks/rows/row',
							  '_boilerplate/_bodyblocks/rows/row'
							] with { 'row' :  child }
						  %}
					  {% elseif child.type.handle starts with 'repeater' %}
						  {%
							include [
							  '_project/_bodyblocks/repeaters/' ~ child.type.handle,
							  '_boilerplate/_bodyblocks/repeaters/' ~ child.type.handle,
							  '_project/_bodyblocks/repeaters/repeater',
							  '_boilerplate/_bodyblocks/repeaters/repeater'
							] with { 'repeater' :  child }
						  %}
					  {% elseif child.type.handle starts with 'accordion' %}
						{%
						  include [
							'_project/_bodyblocks/accordions/' ~ child.type.handle,
							'_boilerplate/_bodyblocks/accordions/' ~ child.type.handle,
							'_project/_bodyblocks/accordions/accordion',
							'_boilerplate/_bodyblocks/accordions/accordion'
						  ] with { 'accordion' :  child }
						%}
					  {% elseif child.type.handle starts with 'tabSet' %}
						{%
						  include [
							'_project/_bodyblocks/tabs/' ~ child.type.handle,
							'_boilerplate/_bodyblocks/tabs/' ~ child.type.handle,
							'_project/_bodyblocks/tabs/tabSet',
							'_boilerplate/_bodyblocks/tabs/tabSet'
						  ] with { 'tabSet' :  child }
						%}
					  {% elseif child.type.handle starts with 'tabPanel' %}
						{%
						  include [
							'_project/_bodyblocks/tabs/' ~ child.type.handle,
							'_boilerplate/_bodyblocks/tabs/' ~ child.type.handle,
							'_project/_bodyblocks/tabs/tabPanel',
							'_boilerplate/_bodyblocks/tabs/tabPanel'
						  ] with { 'tabPanel' :  child }
						%}
					  {% else %}
						  {%
							include [
							  '_project/_bodyblocks/blocks/' ~ child.type.handle,
							  '_boilerplate/_bodyblocks/blocks/' ~ child.type.handle,
							  '_project/_bodyblocks/blocks/block',
							  '_boilerplate/_bodyblocks/blocks/block'
							] ignore missing with { 'block' :  child }
						  %}
					  {% endif %}
					
				{% endfor %}				
			</div> 		
			
		</div>
	</div>
	<div class="background">
		{% if bgSettings|length %}		
			{{ gMacros.buildElementBackground(bgSettings, {'default': '100vw'}, null) }}
		{% endif %}		
	</div>	   
</section>
