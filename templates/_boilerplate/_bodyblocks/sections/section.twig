{#
/**
 * Tilt Boilermaker - Generic Page Section Block Template
 * -----
 * 
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_boilerplate/_macros/globalMacros' as gMacros %}

{# set variables for content child and style adjustment containers  #}
{% set contentKids = null %}
{% set styleAdjusts = null %}
{% for item in section['children'].collect() %}
	{% if item.type.handle == 'childrenSection' %}
		{% set contentKids = item %}
	{% elseif item.type.handle == 'styleAdjustmentsSection' %}
		{% set styleAdjusts = item %}
	{% endif %}
{% endfor %}

{# set section color scheme variable #}
{% set colorScheme = section.colorScheme %}

{# Set block id attribute value #}
{% if section.customId is defined and section.customId != '' %}
	{% set blockId = section.customId %}
{% else %}
	{% set blockId = 'section-' ~ section.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'elem-block ' ~ section.type.handle %}
{% set innerClass = 'inner ' ~ section.type.handle ~ '-inner' %}

{# Sort Out Styling Adjustments to set up class lit arrays #}

{% set styleClasses = [] %}
{% set outerClasses = [] %}
{% set bgClasses = [] %}
{% set bgSizes = [] %}

{% if styleAdjusts != null %}	
	
	{# Iterate through style sets in adjustment block and write out style adjustment classes to an array. #}
	
	{% for styleSet in clone(styleAdjusts.children).collect() %}
		{% set devSize = styleSet.deviceSize %}	
		{% set styleSetFieldLayout = styleSet.getFieldLayout() %}
		{% set styleSetFields = styleSetFieldLayout.getCustomFields() %}		
		
		{% for fieldItem in styleSetFields %}
			
			{# Leave out padding since it goes to a different element and leave out background fields #}			
			{% if fieldItem.handle != 'deviceSize' and fieldItem.handle != 'allBordersMatch' and not (fieldItem.handle ends with 'Margin') and not (fieldItem.handle starts with 'row') and not (fieldItem.handle ends with 'Color') and not (fieldItem.handle starts with 'column') and not (fieldItem.handle starts with 'background') and styleSet[fieldItem.handle]|length %}				
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}
			
			{# add color classes #}
			{% if fieldItem.handle ends with 'Color' and fieldItem.handle != 'backgroundColor' and styleSet[fieldItem.handle] != null %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle].class %}
				{%- set styleClasses = styleClasses|merge([classItem]) -%}
			{% endif %}
						
			{# Add outer settings to outerClasses array #}			
			{% if fieldItem.handle ends with 'Margin' and styleSet[fieldItem.handle]|length %}
				{% set classItem = devSize ~ styleSet[fieldItem.handle] %}
				{%- set outerClasses = outerClasses|merge([classItem]) -%}
			{% endif %}
					
		{% endfor %}
		
		{# set up background objects and drop into array. If no color and no image are set them skip styleset #}
		{% if (styleSet.backgroundColor.class ?? false) or (styleSet.backgroundImage[0] ?? false) %}
			{% set bgItem  = {
				'devSize': devSize,
				'bgColor': styleSet.backgroundColor.class ?? '',
				'bgImg': styleSet.backgroundImage[0] ?? null,
				'bgSize': styleSet.backgroundSize ?? '',
				'bgPosition': styleSet.backgroundPosition ?? '',
				'bgRepeat': styleSet.backgroundRepeat ?? '',
				'bgOpacity': styleSet.backgroundOpacity ?? '',
				'bgImgOpacity': styleSet.backgroundImageOpacity ?? '',
			}		
			%}
			{% set bgClasses = bgClasses|merge([bgItem]) %}	
			{% set bgSizes = bgSizes|merge([devSize])%}	
		{% endif %}
				
	{% endfor %}
	
{% endif %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (section['customClassList'] is defined ? section.customClassList : null) %}

{# set animation classes for reveal #}

{% set animClasses = [] %}
{% if section.revealAnimation is defined and section.revealAnimation != '' %}  

	{% set animClasses = animClasses|merge(['anim-wrapper']) %}
	{% set revealClass = section.revealAnimation %}
	{% set revealClass = section.revealAnimation %}
	{% if section.animateChildren is not empty %}
		{% if section.animateChildren == true %}
			{% set animClasses = animClasses|merge(['anim-parent']) %}
			{% if section.staggerChildReveals is not empty %}
				{% if section.staggerChildReveals == true %}
					{% set revealClass = revealClass ~ '-stagger' %}
				{% endif %}
			{% endif %}
		{% else %}
			{% set animClasses = animClasses|merge(['anim-elem']) %}  		
		{% endif %}
	{% else %}
		{% set animClasses = animClasses|merge(['anim-elem']) %} 
	{% endif %}	
	{% set animClasses = animClasses|merge([revealClass]) %}	
{% endif %}

{# OUTPUT #}

<section {{ gMacros.buildElementAttributes(blockId, blockClass, outerClasses, customClassString) -}}>		
	<div {{ gMacros.buildClassList(null, animClasses, null) -}}>
		<div {{ gMacros.buildClassList(innerClass, styleClasses, null) -}}> 
			{% if contentKids != null %}
				{% for child in clone(contentKids.children).collect() %}			
					
					{% if child.type.handle starts with 'container' %}
						{%
  						include [
							'_project/_bodyblocks/containers/' ~ child.type.handle,
							'_boilerplate/_bodyblocks/containers/' ~ child.type.handle,
							'_project/_bodyblocks/containers/container',
							'_boilerplate/_bodyblocks/containers/container'
						] with { 'container' : child }			  
						%}	  
					{% endif %}
					
				{% endfor %}
			{% endif %}
		</div> 
	
		{% if bgClasses != null %}		  
			{{ gMacros.buildElementBackground(bgClasses, bgSizes, {'default': '100vw'}, null) }}
		{% endif %}
	</div>	   
</section>
