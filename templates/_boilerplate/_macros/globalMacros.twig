{#
/**
 * Global macros
 * -----
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 * @package   tiltrus
 */
#}

{#
  Strip tags from a string except for a certain subset
  -----
#}

{% macro stripTags(string, safeTagsString) %}
  {% set safeTagsString = (safeTagsString ? safeTagsString : '<b><strong><i><em><a><br>') %}
  {{- string|striptags(safeTagsString)|raw -}}
{% endmacro %}



{# EMBED RENDERING #}

{#
  Render any header embeds for the current entry/category
#}

{% macro entryHeaderEmbeds(object) %}
  {% if object|length and object['headerEmbeds'] is defined and object.headerEmbeds|length %}
	{{ object.headerEmbeds|raw }}
  {% endif %}
{% endmacro %}

{#
  Render any body tag embeds for the current entry/category
#}

{% macro entryBodyEmbeds(object) %}
  {% if object|length and object['bodyTagEmbeds'] is defined and object.bodyTagEmbeds|length %}
	{{ object.bodyTagEmbeds|raw }}
  {% endif %}
{% endmacro %}

{#
  Render any footer embeds for the current entry/category
#}

{% macro entryFooterEmbeds(object) %}
  {% if object|length and object['footerEmbeds'] is defined and object.footerEmbeds|length %}
	{{ object.footerEmbeds|raw }}
  {% endif %}
{% endmacro %}

{#
  Display an inline list of news topics links
#}
{% macro newsTopicsList(entry) %}
  {%- set i = 0 -%}
  {%- for newsTopic in entry.newsTopics.all() -%}
	{%- set i = i + 1 -%}
	{{- (i > 1 ? ', ' : null) -}}
	<a href="{{ newsTopic.url }}">{{ newsTopic.title }}</a>
  {%- endfor -%}
{% endmacro %}


{#
  Render social icon links
#}

{% macro socialIconLinks() %}
  {% if companyInfo.socialMediaLinks is defined and companyInfo.socialMediaLinks|length %}
	{% for socialLink in companyInfo.socialMediaLinks.all() %}
		<a href="{{ socialLink.linkUrl }}" class="social-icon-link" title="{{ socialLink.linkName }}" target="_blank"><svg><use xlink:href="#{{ socialLink.linkIcon.sprite }}"></use></svg></a>
	{% endfor %}
  {% endif %}
{% endmacro %}


{# ELEMENT RENDERING #}

{%- macro buildElementAttributes(blockId, blockClass, styleClasses, customClassString, attributeObj) -%}
  {% import '_boilerplate/_macros/globalMacros' as gMacros %}
  
  {%- set blockId = blockId is defined and blockId != null ? blockId : '' -%}
  
	
  {#- Add an id attribute if `onPageId` is set -#}
  {%- if blockId|length -%} id="{{ blockId }}"{%- endif -%}
  
  {{ gMacros.buildClassList(blockClass, styleClasses, customClassString) }}
  
  {{ gMacros.buildOtherElementAttributes(attributeObj) }}
  
{%- endmacro -%}

{#-
  Element Display Controls - Classes
  -----
  Output classes for the element.
-#}
{%- macro buildClassList(blockClass, styleClasses, customClassString) -%}
  {# Start class output array with block class for block type #}
  {%- set classesOutput = [] -%}
  
  {# Add block class string #}
  {% if blockClass != null and blockClass != '' %}
	{%- set classesOutput = classesOutput|merge([blockClass]) -%}
  {% endif %}
  
  {# Add styleClasses #}
  {% if styleClasses != null and styleClasses|length %}
	  {%- set classesOutput = classesOutput|merge(styleClasses) -%}
  {% endif %}
    
  {# Add custom class string #}
  {% if customClassString != null and customClassString != '' %}
	{%- set classesOutput = classesOutput|merge([customClassString]) -%}
  {% endif %}
  
  {#- Join classes into string -#}
  {%- set classesOutput = classesOutput|join(' ') -%}

  {#- Output the classes string -#}
  class="{{ classesOutput }}"
{%- endmacro -%}

{#-
  Element Display Controls - Classes Basic
  -----
  Output classes for the element. using basic array. Doesn't do tailwind device size adjustments
-#}

{%- macro buildClassListBasic(styleClasses) -%}
	{% set classesOutput = styleClasses|join(' ') %}
	class="{{ classesOutput }}"
{%- endmacro -%}

{#-
  Element Display Controls - Attributes
  -----
  Output animation (or other) data-attributes for the element.
-#}
{%- macro buildOtherElementAttributes(attrObj) -%}
  {% for key, value in attrObj %}
	{{- key -}}="{{- value -}}" 
  {% endfor %}
{%- endmacro -%}

{#-
  Background Rendering
  -----
  Output a background node based on an element's Background Imagery field.
-#}
{%- macro buildElementBackground(bgSettings, sizesAtr, aspect, loadType) -%}
  {% import '_boilerplate/_macros/globalMacros' as gMacros %}
  	{% set bgSizes = [] %}
	{% for bgSet in bgSettings %}
  		{% set bgSize = bgSizes|merge([bgSet.deviceSize]) %}	  
	{% endfor %}
	
	{% if aspect|length %}
		{% set tfSize = 'headerImage-' ~ aspect %}
		{% set tfSizeWebp = 'headerImageWebp-' ~ aspect %}
	{% else %}
		{% set tfSize = 'contentImage' %}
		{% set tfSizeWebp = 'contentImageWebp' %}
	{% endif %} 
	
    {% for bgSet in bgSettings %}
  	
		{% set bgOuterClasses = ['background'] %}
		
		{% if bgSet.deviceSize != '' %}
			{% set bgOuterClasses = bgOuterClasses|merge(['hidden', bgSet.deviceSize ~ 'block']) %}
		{% endif %}
		
		{% switch bgSet.deviceSize %}
			{% case 'sm:' %}
				{% if 'md:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['md:hidden']) %}
				{% elseif 'lg:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['lg:hidden']) %}
				{% elseif 'xl:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['xl:hidden']) %}
				{% elseif '2xl:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['2xl:hidden']) %}
				{% endif %}
				
			{% case 'md:' %}			
				{% if 'lg:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['lg:hidden']) %}
				{% elseif 'xl:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['xl:hidden']) %}
				{% elseif '2xl:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['2xl:hidden']) %}
				{% endif %}
				
			{% case 'lg:' %}			
				{% if 'xl:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['xl:hidden']) %}
				{% elseif '2xl:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['2xl:hidden']) %}
				{% endif %}
			
			{% case 'xl:' %}			
				{% if '2xl:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['2xl:hidden']) %}
				{% endif %}
				
			{% case '2xl:' %}
				
			{% default %}
				{% if 'sm:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['sm:hidden']) %}
				{% elseif 'md:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['md:hidden']) %}
				{% elseif 'lg:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['lg:hidden']) %}
				{% elseif 'xl:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['xl:hidden']) %}
				{% elseif '2xl:' in bgSizes %}
					{% set bgOuterClasses = bgOuterClasses|merge(['2xl:hidden']) %}
				{% endif %}
				
		{% endswitch %}	
		
    	<div {{ gMacros.buildClassListBasic(bgOuterClasses) -}}>
			
			{% if bgSet.backgroundImage != null %}			
				{% set bgAsset = bgSet.backgroundImage[0] %}
				{% set loadClass = null %}
				{# check loadType, if it is set and value is 1 use owl carousel load class, otherwise use lazyload #}
				{% if loadType is defined and loadType != null and loadType != 0 %}
					{% set loadClass = 'swiper-lazy' %}
				{% else %}
					{% set loadClass = 'lazyload' %}
				{% endif %}			
				{% set bgInnerClasses = ['background', bgSet.backgroundImageOpacity] %}
				{% set bgElemClasses = ['background', loadClass] %}
				
				{# Check if BG Asset is image or video #}
				{% if bgAsset.kind == 'image' %}				
							
					{% if bgSet.backgroundRepeat == 'bg-no-repeat' or bgSet.backgroundRepeat == '' %}
					
						<div {{ gMacros.buildClassList(null, bgInnerClasses, null) -}}>	
							{% if bgSet.backgroundSize == 'auto' or bgSet.backgroundSize == '' %}
								{% set bgElemClasses = bgElemClasses|merge(['object-scale-down']) %}
							{% else %}
								{% set  bgElemClasses = bgElemClasses|merge(['object-' ~ bgSet.backgroundSize])%}
							{% endif %}
							{% if bgSet.backgroundPosition != '' %}
								{% set bgElemClasses = bgElemClasses|merge(['object-' ~ bgSet.backgroundPosition]) %}
							{% endif %}
							
							{# set image to bgAsset for transformations #}
							{% set image = bgAsset %}					
							{%- set transformedImages = craft.imagerx.transformImage(image, tfSize)	%}					
							{% if craft.imager.serverSupportsWebp() %}
						  	{% set transformedImagesWebp = craft.imagerx.transformImage(image, tfSizeWebp) %}
						  	
						  	<picture class="background">		  
										
								{% if craft.imager.serverSupportsWebp() %}
							  	<source data-sizes="auto" data-srcset="{{ craft.imager.srcset(transformedImagesWebp) }}" type="image/webp">
								{% endif %}
						  	
							  	<img src="{{ craft.imager.placeholder({width: image.width, height: image.height}) }}"
							  	width="{{image.width}}"
							  	height="{{image.height}}"
							  	data-sizes="auto"
							  	data-src="{{ transformedImages[0] }}"
							  	data-srcset="{{ craft.imager.srcset(transformedImages) }}"
							  	alt="background" {{ gMacros.buildClassListBasic(bgElemClasses) -}}
							  	>
						  	</picture>
							{% endif %}
						</div>
						
					{% else %}
						
						{% set bgInnerClasses = bgInnerClasses|merge([bgSet.backgroundRepeat, 'bg-auto', 'bg-' ~ bgSet.backgroundPosition]) %}
						<div {{ gMacros.buildClassListBasic(bgInnerClasses) }} style="background-image:url('{{ bgAsset.url }}');"></div>
						
					{% endif %}
					
				{% elseif bgAsset.kind == 'video' %}
					
					{% if bgSet.backgroundSize == 'auto' or bgSet.backgroundSize == '' %}
						{% set bgElemClasses = bgElemClasses|merge(['object-scale-down']) %}
					{% else %}
						{% set  bgElemClasses = bgElemClasses|merge(['object-' ~ bgSet.backgroundSize])%}
					{% endif %}
					{% if bgSet.bgPosition != '' %}
						{% set bgElemClasses = bgElemClasses|merge(['object-' ~ bgSet.backgroundPosition]) %}
					{% endif %}
					
					<div {{ gMacros.buildClassListBasic(bgInnerClasses) -}}>
						<video          
					  	{{ gMacros.buildClassListBasic(bgElemClasses) }}
					  	aria-hidden="true"
					  	role="presentation"
					  	preload=""
					  	autoplay playsinline muted loop
					  	data-src="{{ bgAsset.url }}"
					  	type="{{ bgAsset.mimeType }}"
						></video>
					</div>
					
				{% endif %}		
				
			{% endif %}
		</div>	
	  
  {% endfor %}  
  
{%- endmacro -%}





