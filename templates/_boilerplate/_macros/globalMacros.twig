{#
/**
 * Global macros
 * -----
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 * @package   tiltrus
 */
#}

{#
  Strip tags from a string except for a certain subset
  -----
#}

{% macro stripTags(string, safeTagsString) %}
  {% set safeTagsString = (safeTagsString ? safeTagsString : '<b><strong><i><em><a><br>') %}
  {{- string|striptags(safeTagsString)|raw -}}
{% endmacro %}



{# EMBED RENDERING #}

{#
  Render any header embeds for the current entry/category
#}

{% macro entryHeaderEmbeds(object) %}
  {% if object|length and object['headerEmbeds'] is defined and object.headerEmbeds|length %}
	{{ object.headerEmbeds|raw }}
  {% endif %}
{% endmacro %}

{#
  Render any body tag embeds for the current entry/category
#}

{% macro entryBodyEmbeds(object) %}
  {% if object|length and object['bodyTagEmbeds'] is defined and object.bodyTagEmbeds|length %}
	{{ object.bodyTagEmbeds|raw }}
  {% endif %}
{% endmacro %}

{#
  Render any footer embeds for the current entry/category
#}

{% macro entryFooterEmbeds(object) %}
  {% if object|length and object['footerEmbeds'] is defined and object.footerEmbeds|length %}
	{{ object.footerEmbeds|raw }}
  {% endif %}
{% endmacro %}

{#
  Display an inline list of news topics links
#}
{% macro newsTopicsList(entry) %}
  {%- set i = 0 -%}
  {%- for newsTopic in entry.newsTopics.all() -%}
	{%- set i = i + 1 -%}
	{{- (i > 1 ? ', ' : null) -}}
	<a href="{{ newsTopic.url }}">{{ newsTopic.title }}</a>
  {%- endfor -%}
{% endmacro %}


{#
  Render social icon links
#}

{% macro socialIconLinks() %}
  {% if companyInfo.socialMediaLinks is defined and companyInfo.socialMediaLinks|length %}
	{% for socialLink in companyInfo.socialMediaLinks.all() %}
		<a href="{{ socialLink.linkUrl }}" class="social-icon-link" title="{{ socialLink.linkName }}" target="_blank"><svg><use xlink:href="#{{ socialLink.linkIcon.sprite }}"></use></svg></a>
	{% endfor %}
  {% endif %}
{% endmacro %}


{# ELEMENT RENDERING #}

{%- macro buildElementAttributes(blockId, blockClass, styleClasses, customClassString, attributeObj) -%}
  {% import '_boilerplate/_macros/globalMacros' as gMacros %}
  
  {%- set blockId = blockId is defined and blockId != null ? blockId : '' -%}
  
	
  {#- Add an id attribute if `onPageId` is set -#}
  {%- if blockId|length -%} id="{{ blockId }}"{%- endif -%}
  
  {{ gMacros.buildClassList(blockClass, styleClasses, customClassString) }}
  
  {{ gMacros.buildOtherElementAttributes(attributeObj) }}
  
{%- endmacro -%}

{#-
  Element Display Controls - Classes
  -----
  Output classes for the element.
-#}
{%- macro buildClassList(blockClass, styleClasses, customClassString) -%}
  {# Start class output array with block class for block type #}
  {%- set classesOutput = [] -%}
  
  {# Add block class string #}
  {% if blockClass != null and blockClass != '' %}
	{%- set classesOutput = classesOutput|merge([blockClass]) -%}
  {% endif %}
  
  {# Add styleClasses #}
  {% if styleClasses != null and styleClasses|length %}
	  {%- set classesOutput = classesOutput|merge(styleClasses) -%}
  {% endif %}
    
  {# Add custom class string #}
  {% if customClassString != null and customClassString != '' %}
	{%- set classesOutput = classesOutput|merge([customClassString]) -%}
  {% endif %}
  
  {#- Join classes into string -#}
  {%- set classesOutput = classesOutput|join(' ') -%}

  {#- Output the classes string -#}
  class="{{ classesOutput }}"
{%- endmacro -%}

{#-
  Element Display Controls - Classes Basic
  -----
  Output classes for the element. using basic array. Doesn't do tailwind device size adjustments
-#}

{%- macro buildClassListBasic(styleClasses) -%}
	{% set classesOutput = styleClasses|join(' ') %}
	class="{{ classesOutput }}"
{%- endmacro -%}

{#-
  Element Display Controls - Attributes
  -----
  Output animation (or other) data-attributes for the element.
-#}
{%- macro buildOtherElementAttributes(attrObj) -%}
  {% for key, value in attrObj %}
	{{- key -}}="{{- value -}}" 
  {% endfor %}
{%- endmacro -%}

{#-
  Style Adjustments - Background
  -----
  Output a background node based on an element's Tiltrus EDC field.
-#}
{%- macro buildElementBackground(bgInfo, sizesAtr, loadType) -%}
  {% import '_boilerplate/_macros/globalMacros' as gMacros %}
  
  {% for bgSet in bgInfo %}
  	
	
		BGSET: {{bgSet.devSize}}<br>
		BGCOLOR: {{bgSet.bgColor}}<br>
		BGIMG: {% if bgSet.bgImg != null %}{{bgSet.bgImg.url}}{% else %}NULL{% endif %}<br>
		BGIMGTYPE: {% if bgSet.bgImg != null %}{{bgSet.bgImg.kind}}{% endif %}<br>
		BGSIZE: {{bgSet.bgSize}}<br>
		BGPOS: {{bgSet.bgPosition}}<br>
		BGRPT: {{bgSet.bgRepeat}}<br>
		BGOP: {{bgSet.bgOpacity}}<br>
	
    <div class="{{bgSet.bgColor}} {% if devSize != ''%}{% endif %}">
		{% if bgSet.bgImg != null %}
			{% set bgAsset = bgInfo.bgImg %}
			{% set loadClass = null %}
			{# check loadType, if it is set and value is 1 use owl carousel load class, otherwise use lazyload #}
			{% if loadType is defined and loadType != null and loadType != 0 %}
				{% set loadClass = 'owl-lazy' %}
			{% else %}
				{% set loadClass = 'lazyload' %}
			{% endif %}
			{# set up bgClasses object with all classes needed for the background #}
			
			
		{% endif %}
	</div>	
	  
  {% endfor %}  
  
{%- endmacro -%}



