{#
/**
 * Tilt Boilermaker - Standard Layout Column Template
 * -----
 * Loads the appropriate page partial or the default
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_macros/globalMacros' as gMacros %}

{# Create array for classes to pass to macros for section #}
{% set columnClassList = ['col-span-12'] %}
{% set gutterClassList = [] %}

{# Set block id attribute value #}
{% if entry.customId is defined and entry.customId != '' %}
	{% set blockId = entry.customId|replace({' ': '-'})|trim %}
{% else %}
	{% set blockId = 'column-' ~ entry.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = entry.type.handle|kebab %}

{# Get classes for element animation settings #}
{% if animSetting is defined %}
	{% if animSetting.animate and animSetting.animateContent and animSetting.animLevel %}
		{% set animate = true %}	
	{% else %}
		{% set animate = false %}		
	{% endif %}
{% else %}
	{% set animate = false %}
{% endif %}

{# Set color classes #}
{% if colorScheme is not defined %}
	{% set colorScheme = "color-theme-default" %}	
{% endif %}
{% set colorClasses = [] %}
{% if entry.colorScheme != null %}
	{% set colorScheme = entry.colorScheme.class %}	
{% endif %}
{% set colorClasses = colorClasses|merge([colorScheme]) %}
{% if entry.bgColor|length %}
	{% set colorClasses = colorClasses|merge(['bg-' ~ entry.bgColor]) %}
{% endif %}
{% set columnClassList = columnClassList|merge(colorClasses) %}

{# Set Layout Styles #}

{% for layoutItem in entry.columnLayout %}
	{% set devSize = layoutItem.layoutSize %}
	{% if devSize|length %}
		{% set devSize = devSize ~ ':' %}	
	{% endif %}
	{% if layoutItem.columnWidth|length %}
		{% switch layoutItem.columnWidth %}
			{% case '1/6' %}
				{% set colSizeClass = 'col-span-2' %}
			{% case '1/4' %}
				{% set colSizeClass = 'col-span-3' %}
			{% case '1/3' %}
				{% set colSizeClass = 'col-span-4' %}
			{% case '5/12' %}
				{% set colSizeClass = 'col-span-5' %}
			{% case '1/2' %}
				{% set colSizeClass = 'col-span-6' %}
			{% case '7/12' %}
				{% set colSizeClass = 'col-span-7' %}
			{% case '2/3' %}
				{% set colSizeClass = 'col-span-8' %}
			{% case '3/4' %}
				{% set colSizeClass = 'col-span-9' %}
			{% case '5/6' %}
				{% set colSizeClass = 'col-span-10' %}
			{% default %}
				{% set colSizeClass = 'col-span-12' %}
		{% endswitch %}
		{% set columnClassList = columnClassList|merge([devSize ~ colSizeClass]) %}
	{% endif %}
	{% if layoutItem.display|length %}
		{% set columnClassList = columnClassList|merge([devSize ~ layoutItem.display]) %}
	{% endif %}
	{% if layoutItem.columnOrder|length %}
		{% set columnClassList = columnClassList|merge([devSize ~ layoutItem.columnOrder]) %}
	{% endif %}
	{% if layoutItem.verticalAlignment|length %}
		{% set columnClassList = columnClassList|merge([devSize ~ layoutItem.verticalAlignment]) %}
	{% endif %}
{% endfor %}

{% if layoutSettings is defined %}
	{% for layoutItem in layoutSettings %}
		{% set devSize = layoutItem.layoutSize %}
		{% if devSize|length %}
			{% set devSize = devSize ~ ':' %}	
		{% endif %}	
		{% if layoutItem.gutterSize|length %}
			{% set gutterClassList = gutterClassList|merge([devSize ~ 'px-' ~ layoutItem.gutterSize]) %}
		{% endif %}
	{% endfor %}
{% endif %}

{# Retrieve styling adjustments #}
{% set backgroundSettings = entry.backgroundSettings.eagerly().with('bgImg', 'bgVideo').all() %}

<div id="{{blockId}}" class="{{- blockClass }} @container {{ gMacros.displayClasses(entry.display, false)}} {{ gMacros.spacingClasses(entry.margins, false) }} {{ columnClassList|join(' ') }} {{ gMacros.spacingClasses(entry.padding, false) }} {{ gutterClassList|join(' ') }} {{ entry.customClasses }}" {{ gMacros.attributesOut(entry.customAttributes) -}}>	
	<div class="inner column-inner {{- gMacros.typeClasses(entry.typeSettings, false) }} ">
		{% for chunk in entry.elementContent %}
			{% if chunk.type == 'markup' %}
				{% if animate %}
					{{chunk|raw|retconAttr(['body > p', 'body > ol', 'body > ul'], { 'class' : 'animate' }, false)|retconAttr(['ul'], { 'class' : 'bullet-list' }, false)|typogrify}}
				{% else %}
					{{chunk|raw|retconAttr(['ul'], { 'class' : 'bullet-list' }, false)|typogrify}}
				{% endif %}
			{% else %}
				{{ chunk.entry.render({
					'animSetting': animSetting,
					'colorScheme': colorScheme
				}) }}
			{% endif %}
		{% endfor %}							
	</div>
	<div class="background">
		{{ gMacros.buildElementBackground(backgroundSettings) }}
	</div>		
</div>

