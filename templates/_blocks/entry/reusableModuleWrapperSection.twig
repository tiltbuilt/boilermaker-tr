{#
/**
 * Tilt Boilermaker - Standard Page Section Template
 * -----
 * Loads the appropriate page partial or the default
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_macros/globalMacros' as gMacros %}

{# Create array for classes to pass to macros for section #}
{% set sectionClassList = [] %}

{# Set block id attribute value #}
{% if entry.customId is defined and entry.customId != '' %}
	{% set blockId = entry.customId|replace({' ': '-'})|trim %}
{% else %}
	{% set blockId = 'section-' ~ entry.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'section-standard ' ~ entry.type.handle|kebab %}

{# Set color classes #}
{% set colorClasses = [] %}
{% if entry.colorScheme == null %}
	{% set colorScheme = "colormode-default" %}	
{% else %}
	{% set colorScheme = entry.colorScheme.class %}
{% endif %}
{% set colorClasses = colorClasses|merge([colorScheme]) %}
{% if entry.bgColor|length %}
	{% set colorClasses = colorClasses|merge(['bg-' ~ entry.bgColor]) %}
{% endif %}
{% set sectionClassList = sectionClassList|merge(colorClasses) %}


{# Retrieve styling adjustments #}
{#{% set adjustments = entry.sectionStyleAdjustments.eagerly().with('bgImg', 'bgVideo').all() %}#}

{# retrieve content module to be displayed #}
{% set contentMod = entry.moduleToInclude.eagerly().one() %}

{% if contentMod != null %}
	<section id="{{blockId}}" class="{{- blockClass }} @container {#{{- gMacros.classesOut(adjustments, 'Display') -}}#} {{ gMacros.spacingClasses(entry.margins, false) }} {{ sectionClassList|join(' ') }} {{ entry.customClasses }}" {{- gMacros.attributesOut(entry.customAttributes) }}
	{% if entry.animate %}
		x-data="sectionStandard({{entry.animateContent ? 'true': 'false'}},{{entry.staggerAnimations ? 'true': 'false'}})"	
		x-ref="{% if entry.animateContent %}animparent{% else %}animate{% endif %}"
	{% endif %}
	>
		<div class="container {{ entry.fullscreen ? 'container-fullscreen' }}">
			<div class="inner container-inner {{ gMacros.typeClasses(entry.typeSettings, false) }} {{ gMacros.spacingClasses(entry.padding, false) }}">			
				{% for chunk in contentMod.elementContent %}
					{% if chunk.type == 'markup' %}
						{% if entry.animate and entry.animateContent %}
							{{chunk|raw|retconAttr(['body > p', 'body > ol', 'body > ul'], { 'class' : 'animate' }, false)|retconAttr(['ul'], { 'class' : 'bullet-list' }, false)|typogrify}}
						{% else %}
							{{chunk|raw|retconAttr(['ul'], { 'class' : 'bullet-list' }, false|typogrify)}}
						{% endif %}
					{% else %}
						{{ chunk.entry.render({
							'animSetting': {'animate': entry.animate, 'animateContent': entry.animateContent, 'animLevel': true},
							'colorScheme': colorScheme
						}) }}
					{% endif %}
				{% endfor %}							
			</div>
			<div class="background">
				{#{{ gMacros.buildElementBackground(adjustments) }}#}
			</div>
		</div>	
	</section>
{% endif %}
