{#
/**
 * Tilt Boilermaker - Accordion Set Template
 * -----
 * Loads the appropriate page partial or the default
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_macros/globalMacros' as gMacros %}

{# Create array for classes to pass to macros for set #}
{% set accSetClassList = [] %}

{# Set block id attribute value #}
{% if entry.customId is defined and entry.customId != '' %}
	{% set blockId = entry.customId|replace({' ': '-'})|trim %}
{% else %}
	{% set blockId = 'accordion-set-' ~ entry.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = entry.type.handle|kebab %}

{# Get classes for element animation settings #}
{% if animSetting is defined %}
	{% if animSetting.animate and animSetting.animateContent and animSetting.animLevel %}
		{% set animate = true %}	
	{% else %}
		{% set animate = false %}		
	{% endif %}
{% else %}
	{% set animate = false %}
{% endif %}

{# Set color classes for set #}
{% if colorScheme is not defined %}
	{% set colorScheme = "color-theme-default" %}	
{% endif %}
{% if entry.colorScheme != null %}
	{% set colorScheme = entry.colorScheme.class %}	
{% endif %}

{# Retrieve styling adjustments #}
{% set setPadding = entry.padding.eagerly().all() %}

{# set default heading level for set #}
{% set setHeaderLevel = entry.headingLevel %}

<div {% if entry.accordionsAllowMultiple == 0 %}x-data="{ active: {% if entry.accordionStartState %}1{% else %}0{% endif %} }"{% endif %} id="{{blockId}}" class="{{- blockClass -}} {{ gMacros.displayClasses(entry.display, false)}} {{ gMacros.spacingClasses(entry.margins, false) }} {{ accSetClassList|join(' ') }} {{ entry.customClasses }}" {{ gMacros.attributesOut(entry.customAttributes) -}} >
	
	{% set accordions = entry.accordions.eagerly().all() %}
	{% for acc in accordions %}
		{% set accClassList = ['accordion'] %}				
		{% set colorClasses = [] %}		
		
		{# Set accordion id attribute value #}
		{% if acc.customId is defined and acc.customId != '' %}
			{% set accId = acc.customId|replace({' ': '-'})|trim %}
		{% else %}
			{% set accId = 'acc-' ~ acc.id ~ '-accSet-' ~ entry.id %}
		{% endif %}
		
		{# set colors for accordion #}		
		{% if acc.colorScheme != null %}
			{% set accColorScheme = acc.colorScheme.class %}			
		{% else %}
			{% set accColorScheme = colorScheme %}
		{% endif %}
		{% set colorClasses = colorClasses|merge([accColorScheme]) %}
		{% if acc.bgColor|length %}
			{% set colorClasses = colorClasses|merge(['bg-' ~ acc.bgColor]) %}
		{% else %}
			{% if entry.bgColor|length %}
				{% set colorClasses = colorClasses|merge(['bg-' ~ entry.bgColor]) %}
			{% endif %}
		{% endif %}
		{% set accClassList = accClassList|merge(colorClasses) %}
		
		{% if acc.accordionIcon|length %}
			{% set accIcon = acc.accordionIcon %}
		{% elseif entry.accordionIcon|length %}
			{% set accIcon = entry.accordionIcon %}
		{% elseif gSettings.accordionIcon|length %}
			{% set accIcon = gSettings.accordionIcon %}
		{% else %}
			{% set accIcon = null %}
		{% endif %}		
		
		{# sort out content styling #}

		{% set styleListMaster = ['accordion-content'] %}
		{% set styleObj = {} %}	

		
		{% set accPadding = acc.padding.eagerly().all() %}
			
		{% for adj in accPadding %}
			{% set devSize = adj.layoutSize %}
			{% if devSize|length %}
				{% set devSize = devSize ~ ':' %}	
			{% endif %}
						
			{% set fLayout = adj.getFieldLayout() %}
			{% for tabObj in fLayout.tabs %}									
				{% for tabEl in tabObj.elements %}				
					{% if tabEl.className is same as("craft\\fieldlayoutelements\\CustomField") %}
						{% if tabEl.field.handle != 'deviceSize' %}
							{% if adj.getFieldValue(tabEl.field.handle)|length %}
								{% set styleHandle = devSize ~ tabEl.field.handle %}
								{% set styleObj = styleObj|merge({(styleHandle) : devSize ~ tabEl.field.handle ~ '-' ~ adj.getFieldValue(tabEl.field.handle)}) %}
							{% endif %}
						{% endif%}
					{% endif %}				
				{% endfor %}			
			{% endfor %}					
		{% endfor %}
		{# sweep through adjustments from accordion set and if adjustment doesn't have an override already in the list from the accordion itself, then add it.#}
		
		{% for setAdj in setPadding %}			
			{% set devSize = setAdj.layoutSize %}
			{% if devSize|length %}
				{% set devSize = devSize ~ ':' %}	
			{% endif %}
			{% set fLayout = setAdj.getFieldLayout() %}
			{% for tabObj in fLayout.tabs %}					
				{% for tabEl in tabObj.elements %}				
					{% if tabEl.className is same as("craft\\fieldlayoutelements\\CustomField") %}
						{% if tabEl.field.handle != 'deviceSize' %}
							{% if setAdj.getFieldValue(tabEl.field.handle)|length %}
								{% set styleHandle = devSize ~ tabEl.field.handle %}
								{% if styleObj[styleHandle] is not defined %}
									{% set styleObj = styleObj|merge({(styleHandle) : devSize ~ tabEl.field.handle ~ '-' ~ setAdj.getFieldValue(tabEl.field.handle)}) %}
								{% endif %}
							{% endif %}
						{% endif %}
					{% endif %}				
				{% endfor %}				
			{% endfor %}
		{% endfor %}
		
		{% for key, value in styleObj %}
			{% set styleListMaster = styleListMaster|merge([value]) %}
		{% endfor %}
			
		<div id="{{accId}}" x-data="{
			id: {{loop.index}},
			{% if entry.accordionsAllowMultiple %}
				{% if entry.accordionStartState and loop.index == 1 %}
					active: 1,
				{% else %}
					active: 0,
				{% endif %}
			{% endif %}
			get expanded() {
				return this.active === this.id
			},
			set expanded(value) {
				this.active = value ? this.id : null
			},
		}" role="region" class="{{- accClassList|join(' ') }} {{- gMacros.displayClasses(acc.display)}} {% if animate %}animate{% endif %}" {{- gMacros.attributesOut(acc.customAttributes) }}>
			<{{setHeaderLevel}} class="accordion-header">
				<button
					x-on:click="expanded = !expanded"
					:aria-expanded="expanded"
					class="accordion-button"
					:class="expanded ? 'active' : ''"
				>
					<span>{{acc.title}}</span>
					<div class="accordion-icon">
						{% if accIcon %}
							{% if accIcon.type == 'svg' %}
								{{ accIcon.inline }}
							{% elseif accIcon.type == 'css' %}
								<i class="{{ accIcon.value }}"></i>								
							{% else %}
								<svg><use xlink:href="/sprites.svg#{{ accIcon.value }}"></use></svg>
							{% endif %}
						{% else %}
							<svg><use xlink:href="/sprites.svg#icon-caret-right"></use></svg>
						{% endif %}
					</div>					
				</button>
			</{{setHeaderLevel}}>
	
			<div x-show="expanded" x-collapse.duration.300ms >
				<div class="{{- styleListMaster|join(' ') }}">				
					{% for chunk in acc.elementContent %}
						{% if chunk.type == 'markup' %}
							{{chunk|raw|retconAttr('ul', {'class': 'bullet-list'})|typogrify}}
						{% else %}
							{{ chunk.entry.render({
								'animSetting': {'animate': false, 'animateContent': false, 'animLevel': false},
								'colorScheme': accColorScheme,
								'sizeTracker': sizeTracker
							}) }}
						{% endif %}
					{% endfor %} 					
				</div>
			</div>
		</div>		
	{% endfor %}	
</div>