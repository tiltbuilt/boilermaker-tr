{#
/**
 * Tilt Boilermaker - CTA Block Template Template
 * -----
 * Loads the appropriate page partial or the default
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_macros/globalMacros' as gMacros %}

{# Create array for classes to pass to macros for section #}
{% set ctaClassList = [] %}

{# Set block id attribute value #}
{% if entry.customId is defined and entry.customId != '' %}
	{% set blockId = entry.customId|replace({' ': '-'})|trim %}
{% else %}
	{% set blockId = 'cta-' ~ entry.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = entry.type.handle|kebab %}

{# Get classes for element animation settings #}
{% if animSetting is defined %}
	{% if animSetting.animate and animSetting.animateContent and animSetting.animLevel %}
		{% set animate = true %}	
	{% else %}
		{% set animate = false %}		
	{% endif %}
{% else %}
	{% set animate = false %}
{% endif %}
	
{# Set color classes #}
{% if colorScheme is not defined %}
	{% set colorScheme = "color-theme-default" %}	
{% endif %}
{% set colorClasses = [] %}
{% if entry.colorScheme != null %}
	{% set colorScheme = entry.colorScheme.class %}	
{% endif %}
{% set colorClasses = colorClasses|merge([colorScheme]) %}
{% if entry.bgColor|length %}
	{% set colorClasses = colorClasses|merge(['bg-' ~ entry.bgColor]) %}
{% endif %}
{% set ctaClassList = ctaClassList|merge(colorClasses) %}

{# Get image #}
{% set ctaImg = null %}
{% if entry.ctaType %}
	{% set ctaImg = entry.ctaImg.eagerly().one() %}
{% endif %}


{# Set content and image classes #}
{% set innerClasses = [] %}
{% set contentClasses = [] %}
{% set imgClasses = [] %}
{% if entry.ctaType and ctaImg != null %}
	{% if entry.contentVerticalAlignment != '' %}
		{% set contentClasses = contentClasses|merge(['@sm:items-' ~ entry.contentVerticalAlignment ]) %}
	{%endif %}	
	{% if entry.contentPositionSmall %}
		{% set contentClasses = contentClasses|merge(['order-last']) %}
	{% else %}
		{% set contentClasses = contentClasses|merge(['order-first']) %}
	{% endif %}
	{% if entry.contentPositionLarge %}
		{% set contentClasses = contentClasses|merge(['@sm:order-last']) %}
	{% else %}
		{% set contentClasses = contentClasses|merge(['@sm:order-first']) %}
	{% endif %}
	{% if entry.contentWidthLarge == '' %}
		{% set contentClasses = contentClasses|merge(['@sm:w-1/2']) %}
	{% else %}
		{% set contentClasses = contentClasses|merge(['@sm:w-' ~ entry.contentWidthLarge]) %}
	{% endif %}
	
	{% switch entry.contentWidthLarge %}
		{% case '1/5' %}
			{% set imgClasses = imgClasses|merge(['@sm:w-4/5']) %}
		{% case '1/4' %}
			{% set imgClasses = imgClasses|merge(['@sm:w-3/4']) %}
		{% case '1/3' %}
			{% set imgClasses = imgClasses|merge(['@sm:w-2/3']) %}
		{% case '2/5' %}
			{% set imgClasses = imgClasses|merge(['@sm:w-3/5']) %}
		{% case '1/2' %}
			{% set imgClasses = imgClasses|merge(['@sm:w-1/2']) %}
		{% case '3/5' %}
			{% set imgClasses = imgClasses|merge(['@sm:w-2/5']) %}
		{% case '2/3' %}
			{% set imgClasses = imgClasses|merge(['@sm:w-1/3']) %}
		{% case '3/4' %}
			{% set imgClasses = imgClasses|merge(['@sm:w-1/4']) %}
		{% case '4/5' %}
			{% set imgClasses = imgClasses|merge(['@sm:w-1/5']) %}
		{% case 'full' %}
			{% set imgClasses = imgClasses|merge(['@sm:w-full']) %}
		{% default %}
			{% set imgClasses = imgClasses|merge(['@sm:w-1/2']) %}
	{% endswitch %}
{% endif %}

{% if entry.contentPositionSmallCta|length %}
	{% set contentClasses = contentClasses|merge(['@sm:w-1/2']) %}
{% endif %}

{% switch entry.contentPositionSmallCtaMobile %}
	{% case "top" %}
		{% set innerClasses = innerClasses|merge(['items-start']) %}
	{% case "center" %}
		{% set innerClasses = innerClasses|merge(['items-center']) %}
	{% case "bottom" %}
		{% set innerClasses = innerClasses|merge(['items-end']) %}
	{% default %}
		{% set innerClasses = innerClasses|merge(['items-center']) %}
{% endswitch %}


{% switch entry.contentPositionSmallCta %}
	{% case "center-left" %}
		{% set innerClasses = innerClasses|merge(['{@sm:justify-start @sm:items-center']) %}
	{% case "center-center" %}
		{% set innerClasses = innerClasses|merge(['@sm:justify-center @sm:items-center']) %}
	{% case "center-right" %}
		{% set innerClasses = innerClasses|merge(['@sm:justify-end @sm:items-center']) %}
	{% case "top-left" %}
		{% set innerClasses = innerClasses|merge(['@sm:justify-start @sm:items-start']) %}
	{% case "top-center" %}
		{% set innerClasses = innerClasses|merge(['@sm:justify-center @sm:items-start']) %}
	{% case "top-right" %}
		{% set innerClasses = innerClasses|merge(['@sm:justify-end @sm:items-start']) %}
	{% case "bottom-left" %}
		{% set innerClasses = innerClasses|merge(['@sm:justify-start @sm:items-end']) %}
	{% case "bottom-center" %}
		{% set innerClasses = innerClasses|merge(['@sm:justify-center @sm:items-end']) %}
	{% case "bottom-right" %}
		{% set innerClasses = innerClasses|merge(['@sm:justify-end @sm:items-end']) %}
	{% default %}
		{% set innerClasses = innerClasses|merge(['@sm:justify-center @sm:items-center']) %}
{% endswitch %}

{# Retrieve styling adjustments #}
{% set backgroundSettings = entry.backgroundSettings.eagerly().with('bgImg', 'bgVideo').all() %}

<div id="{{blockId}}" class="{{- blockClass }} @container {% if entry.ctaType %}cta-lg{% else %}cta-sm{% endif %} {% if animate %}animate{% endif %} {{ gMacros.displayClasses(entry.display)}} {{ gMacros.spacingClasses(entry.margins) }} {{ ctaClassList|join(' ') }} {{ entry.customClasses }}" {{- gMacros.attributesOut(entry.customAttributes) }}>
	<div class="inner cta-inner {{ innerClasses|join(' ') }}">
		<div class="cta-content w-full {{ contentClasses|join(' ') }}  {{- gMacros.typeClasses(entry.typeSettings) }} {{ gMacros.spacingClasses(entry.contentPadding) }}">
			<div>
				{% for chunk in entry.ctaContent %}
					{% if chunk.type == 'markup' %}
						{{chunk|raw|retconAttr(['ul'], { 'class' : 'bullet-list' }, false)|typogrify}}
					{% else %}
						{{ chunk.entry.render({
							'animSetting': {'animate': false, 'animateContent': false, 'animLevel': false},
							'colorScheme': colorScheme
						}) }}
					{% endif %}
				{% endfor %}
			</div>
		</div>
		{% if entry.ctaType and ctaImg != null %}
			<div class="cta-img-wrapper w-full {{ imgClasses|join(' ') }} {{ gMacros.spacingClasses(entry.imagePadding) }}">
										
				{% if entry.ctaImgAspect == '' or entry.ctaImgAspect == 'auto' %}
					{% set xForm = 'contentImage' %}
					{% set xFormWidth = ctaImg.width %}
					{% set xFormHeight = ctaImg.height %}
				{% else %}
					{% if entry.ctaImgAspect == 'video' %}
						{% set numerator = 16 %}
						{% set denominator = 9 %} 
					{% elseif entry.ctaImgAspect == 'square' %}
						{% set numerator = 1 %}
						{% set denominator = 1 %} 
					{% else %}
						{% set numerator = entry.ctaImgAspect.value|split('/')|first %}
						{% set denominator = entry.ctaImgAspect.value|split('/')|last %}        
					{% endif %}

					{% set xForm = 'image-' ~ entry.ctaImgAspect %}
					{% set xFormWidth = ctaImg.width %}
					{% set xFormHeight = (ctaImg.width * denominator) / numerator %}
				{% endif %}

				{% if craft.imager.serverSupportsWebp() %}
					{%- set xForm = xForm ~ '-webp' %}
				{% endif %}

				{% set ctaOutputImage = craft.imagerx.transformImage(ctaImg, xForm) %}
				<img src="{{ craft.imager.placeholder({width: xFormWidth, height: xFormHeight}) }}"
				width="{{xFormWidth}}"
				height="{{xFormHeight}}"
				{% if not entry.lazyLoadImg %}        
					fetchpriority="high"
					sizes="{{gMacros.sizesAttr(sizeTracker, null)}}"
				{% else %}
					sizes="auto"     
				{% endif %}
				{% if entry.lazyLoadImg %}
					sizes="auto"
				{% else %}
					fetchpriority="high"
				  {% endif %}
				  src="{{ ctaOutputImage[0].url }}"
				  srcset="{{ craft.imager.srcset(ctaOutputImage) }}"
				  alt=""
				  class="block w-full h-full object-cover object-center"
				  loading="{{entry.lazyLoadImg ? 'lazy' : 'eager'}}"
				>
			</div>
		{% endif %}							
	</div>
	<div class="background">
		{{ gMacros.buildElementBackground(backgroundSettings) }}
	</div>		
</div>

	
