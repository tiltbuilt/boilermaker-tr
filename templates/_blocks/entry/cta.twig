{#
/**
 * Tilt Boilermaker - CTA Block Template Template
 * -----
 * Loads the appropriate page partial or the default
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_macros/globalMacros' as gMacros %}

{# Create array for classes to pass to macros for section #}
{% set ctaClassList = [] %}

{# Set block id attribute value #}
{% if entry.customId is defined and entry.customId != '' %}
	{% set blockId = entry.customId|replace({' ': '-'})|trim %}
{% else %}
	{% set blockId = 'cta-' ~ entry.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = entry.type.handle|kebab %}

{# Get classes for element animation settings #}
{% if animSetting.animate and animSetting.animateContent and animSetting.animLevel %}
	{% set animate = true %}	
{% else %}
	{% set animate = false %}		
{% endif %}
	
{# Set color classes #}
{% set colorClasses = [] %}
{% if entry.colorScheme != null %}
	{% set colorScheme = entry.colorScheme.class %}	
{% endif %}
{% set colorClasses = colorClasses|merge([colorScheme]) %}
{% if entry.bgColor|length %}
	{% set colorClasses = colorClasses|merge(['bg-' ~ entry.bgColor]) %}
{% endif %}
{% set ctaClassList = ctaClassList|merge(colorClasses) %}

{# Get image #}
{% set ctaImg = null %}
{% if entry.ctaType %}
	{% set ctaImg = entry.ctaImg.eagerly().one() %}
{% endif %}


{# Set content and image classes #}
{% set contentClasses = [] %}
{% set imgClasses = [] %}
{% if entry.ctaType and ctaImg != null %}
	{% if entry.contentVerticalAlignment != '' %}
		{% set contentClasses = contentClasses|merge(['@md/component:items-' ~ entry.contentVerticalAlignment ]) %}
	{%endif %}	
	{% if entry.contentPositionSmall %}
		{% set contentClasses = contentClasses|merge(['order-last']) %}
	{% else %}
		{% set contentClasses = contentClasses|merge(['order-first']) %}
	{% endif %}
	{% if entry.contentPositionLarge %}
		{% set contentClasses = contentClasses|merge(['@md/component:order-last']) %}
	{% else %}
		{% set contentClasses = contentClasses|merge(['@md/component:order-first']) %}
	{% endif %}
	{% if entry.contentWidthLarge == '' %}
		{% set contentClasses = contentClasses|merge(['@md/component:w-1/2']) %}
	{% else %}
		{% set contentClasses = contentClasses|merge(['@md/component:w-' ~ entry.contentWidthLarge]) %}
	{% endif %}
	
	{% switch entry.contentWidthLarge %}
		{% case '1/5' %}
			{% set imgClasses = imgClasses|merge(['@md/component:w-4/5']) %}
		{% case '1/4' %}
			{% set imgClasses = imgClasses|merge(['@md/component:w-3/4']) %}
		{% case '1/3' %}
			{% set imgClasses = imgClasses|merge(['@md/component:w-2/3']) %}
		{% case '2/5' %}
			{% set imgClasses = imgClasses|merge(['@md/component:w-3/5']) %}
		{% case '1/2' %}
			{% set imgClasses = imgClasses|merge(['@md/component:w-1/2']) %}
		{% case '3/5' %}
			{% set imgClasses = imgClasses|merge(['@md/component:w-2/5']) %}
		{% case '2/3' %}
			{% set imgClasses = imgClasses|merge(['@md/component:w-1/3']) %}
		{% case '3/4' %}
			{% set imgClasses = imgClasses|merge(['@md/component:w-1/4']) %}
		{% case '4/5' %}
			{% set imgClasses = imgClasses|merge(['@md/component:w-1/5']) %}
		{% case 'full' %}
			{% set imgClasses = imgClasses|merge(['@md/component:w-full']) %}
		{% default %}
			{% set imgClasses = imgClasses|merge(['@md/component:w-1/2']) %}
	{% endswitch %}
{% endif %}

{# Retrieve styling adjustments #}
{% set adjustments = entry.ctaStyleAdjustments.eagerly().with('bgImg').all() %}

<div id="{{blockId}}" class="{{- blockClass }} @container/component {% if entry.ctaType %}cta-withimg{% else %}cta-noimg{% endif %} {% if animate %}animate{% endif %} {{ gMacros.classesOut(adjustments, 'Display') -}} {{- gMacros.classesOut(adjustments, 'Margins', true) -}} {{- ctaClassList|join(' ') }} {{ entry.customClasses }}" {{- gMacros.attributesOut(entry.customAttributes) }}>
	<div class="inner cta-inner">
		<div class="cta-content w-full {{ contentClasses|join(' ') }}  {{ gMacros.classesOut(adjustments, 'Type') }} {{ gMacros.classesOut(adjustments, 'Padding', true) -}}">
			<div>
				{% for chunk in entry.ctaContent %}
					{% if chunk.type == 'markup' %}
						{{chunk|raw}}
					{% else %}
						{{ chunk.entry.render({
							'animSetting': {'animate': false, 'animateContent': false, 'animLevel': false},
							'colorScheme': colorScheme
						}) }}
					{% endif %}
				{% endfor %}
			</div>
		</div>
		{% if entry.ctaType and ctaImg != null %}
			<div class="cta-img-wrapper w-full {{ imgClasses|join(' ') }} {{ gMacros.classesOut(adjustments, 'Padding', true) -}}">
						
				{% if entry.ctaImgAspect == '' or entry.ctaImgAspect == 'auto' %}
					{%- set xForm = 'contentImage' %}								
				{% else %}
					{%- set xForm = 'image-' ~ entry.ctaImgAspect %}
				{% endif %}
				{% if craft.imager.serverSupportsWebp() %}
					{%- set xForm = xForm ~ '-webp' %}
				{% endif %}				
				{% set ctaOutputImage = craft.imagerx.transformImage(ctaImg, xForm) %}
				<img src="{{ craft.imager.placeholder({width: ctaOutputImage[0].width, height: ctaOutputImage[0].height}) }}"
				  width="{{ctaOutputImage[0].width}}"
				  height="{{ctaOutputImage[0].height}}"
				  sizes="auto"
				  src="{{ ctaOutputImage[0].url }}"
				  srcset="{{ craft.imager.srcset(ctaOutputImage) }}"
				  alt=""
				  class="block w-full h-full object-cover object-center lazyload"
				  loading="lazy"
				>
			</div>
		{% endif %}							
	</div>
	<div class="background">
		{{ gMacros.buildElementBackground(adjustments) }}
	</div>		
</div>

	
