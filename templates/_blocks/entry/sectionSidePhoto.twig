{#
/**
 * Tilt Boilermaker - Side by Side Photo Section Template
 * -----
 * Loads the appropriate page partial or the default
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_macros/globalMacros' as gMacros %}

{# Class output macros #}
{% macro contentClasses(classSettings) %}
	{% set contentClasses = [] %}
	{% for key, value in classSettings %}		
		{% set contentClasses = contentClasses|merge([key ~ ':w-' ~ value.columnWidth]) %}	
		{% set contentClasses = contentClasses|merge([key ~ ':' ~ value.columnPosition]) %}
		{% if value.columnPosition == 'order-first' %}
			{% set contentClasses = contentClasses|merge([key ~ ':justify-end']) %}
		{% else %}
			{% set contentClasses = contentClasses|merge([key ~ ':justify-start']) %}
		{% endif %}	
		{% set contentClasses = contentClasses|merge([key ~ ':' ~ value.verticalAlignment]) %}	
	{% endfor %}
	{{- contentClasses|join(' ') }}
{% endmacro contentClasses %}

{% macro imgClasses(classSettings) %}
	{% set imgClasses = [] %}
	{% for key, value in classSettings %}
		{% switch classSettings[(key)].columnWidth %}
			{% case '1/5' %}
				{% set imgClasses = imgClasses|merge([key ~ ':w-4/5']) %}
			{% case '1/4' %}
				{% set imgClasses = imgClasses|merge([key ~ ':w-3/4']) %}
			{% case '1/3' %}
				{% set imgClasses = imgClasses|merge([key ~ ':w-2/3']) %}
			{% case '2/5' %}
				{% set imgClasses = imgClasses|merge([key ~ ':w-3/5']) %}
			{% case '1/2' %}
				{% set imgClasses = imgClasses|merge([key ~ ':w-1/2']) %}
			{% case '3/5' %}
				{% set imgClasses = imgClasses|merge([key ~ ':w-2/5']) %}
			{% case '2/3' %}
				{% set imgClasses = imgClasses|merge([key ~ ':w-1/3']) %}
			{% case '3/4' %}
				{% set imgClasses = imgClasses|merge([key ~ ':w-1/4']) %}
			{% case '4/5' %}
				{% set imgClasses = imgClasses|merge([key ~ ':w-1/5']) %}
			{% case 'full' %}
				{% set imgClasses = imgClasses|merge([key ~ ':w-full']) %}				
		{% endswitch %}
	{% endfor %}
	{{- imgClasses|join(' ') }}
{% endmacro imgClasses %}

{% macro wrapperClasses(classSettings) %}
	{% set baseMaxList = {
		'@2xl': 768,
		'@3xl': 1024,
		'@4xl': 1280,
		'@5xl': 1536,
	} %}
	{% set wrapperClasses = [] %}
	{% for key, value in classSettings %}
		{% switch classSettings[(key)].columnWidth %}
			{% case '1/5' %}
				{% set wrapperClasses = wrapperClasses|merge([key ~ ':max-w-[' ~ (baseMaxList[(key)] * 0.2)|round ~ 'px]']) %}
			{% case '1/4' %}
				{% set wrapperClasses = wrapperClasses|merge([key ~ ':max-w-[' ~ (baseMaxList[(key)] * 0.252)|round ~ 'px]']) %}
			{% case '1/3' %}
				{% set wrapperClasses = wrapperClasses|merge([key ~ ':max-w-[' ~ (baseMaxList[(key)] * 0.33333332)|round ~ 'px]']) %}
			{% case '2/5' %}
				{% set wrapperClasses = wrapperClasses|merge([key ~ ':max-w-[' ~ (baseMaxList[(key)] * 0.42)|round ~ 'px]']) %}
			{% case '1/2' %}
				{% set wrapperClasses = wrapperClasses|merge([key ~ ':max-w-[' ~ (baseMaxList[(key)] * 0.52)|round ~ 'px]']) %}
			{% case '3/5' %}
				{% set wrapperClasses = wrapperClasses|merge([key ~ ':max-w-[' ~ (baseMaxList[(key)] * 0.62)|round ~ 'px]']) %}
			{% case '2/3' %}
				{% set wrapperClasses = wrapperClasses|merge([key ~ ':max-w-[' ~ (baseMaxList[(key)] * 0.66666662)|round ~ 'px]']) %}
			{% case '3/4' %}
				{% set wrapperClasses = wrapperClasses|merge([key ~ ':max-w-[' ~ (baseMaxList[(key)] * 0.752)|round ~ 'px]']) %}
			{% case '4/5' %}
				{% set wrapperClasses = wrapperClasses|merge([key ~ ':max-w-[' ~ (baseMaxList[(key)] * 0.82)|round ~ 'px]']) %}
			{% case 'full' %}
				{% set wrapperClasses = wrapperClasses|merge([key ~ ':max-w-[' ~ baseMaxList[(key)] ~ 'px]']) %}			
		{% endswitch %}
	{% endfor %}
	{{- wrapperClasses|join(' ') }}	
{% endmacro wrapperClasses %}

{# Create array for classes to pass to macros for section #}
{% set sectionClassList = [] %}

{# Set block id attribute value #}
{% if entry.customId is defined and entry.customId != '' %}
	{% set blockId = entry.customId|replace({' ': '-'})|trim %}
{% else %}
	{% set blockId = 'section-' ~ entry.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = entry.type.handle|kebab %}

{# Set color classes #}
{% set colorClasses = [] %}
{% if entry.colorScheme == null %}
	{% set colorScheme = "color-theme-default" %}	
{% else %}
	{% set colorScheme = entry.colorScheme.class %}
{% endif %}
{% set colorClasses = colorClasses|merge([colorScheme]) %}
{% if entry.bgColor|length %}
	{% set colorClasses = colorClasses|merge(['bg-' ~ entry.bgColor]) %}
{% endif %}
{% set sectionClassList = sectionClassList|merge(colorClasses) %}


{# Set Styles for Columns #}

{# set object with default settings for all sizes for comparison, if different, merge setting from field into object #}
{% set classSettings = {
	'@2xl': {'columnWidth': '1/2', 'columnPosition': 'order-first', 'verticalAlignment': 'items-center', 'imagePosition': 'object-center'},
	'@3xl': {'columnWidth': '1/2', 'columnPosition': 'order-first', 'verticalAlignment': 'items-center', 'imagePosition': 'object-center'},
	'@4xl': {'columnWidth': '1/2', 'columnPosition': 'order-first', 'verticalAlignment': 'items-center', 'imagePosition': 'object-center'},
	'@5xl': {'columnWidth': '1/2', 'columnPosition': 'order-first', 'verticalAlignment': 'items-center', 'imagePosition': 'object-center'},
	}
 %}
 
{% set newSettings = {'columnWidth': '1/2', 'columnPosition': 'order-first', 'verticalAlignment': 'items-center', 'imagePosition': 'object-center'} %}
{% set adSettings = entry.contentColumnLayout.eagerly().all() %}
{#cycle through sizes in order and compare settings from field to defaults, if they don't match, replace in the newSettings object to keep track of settings across sites then write to classSettings list when each cycle finishes #}
{% for key, value in classSettings %} 
	{% for layoutSetting in adSettings %}	
		{% if layoutSetting.deviceSize == key %}
			{% if layoutSetting.columnWidth != newSettings.columnWidth and layoutSetting.columnWidth != '' %}
				{% set newSettings = newSettings|merge({'columnWidth': (layoutSetting.columnWidth)}) %}			
			{% endif %}
			{% if layoutSetting.columnPosition != newSettings.columnPosition and layoutSetting.columnPosition != '' %}
				{% set newSettings = newSettings|merge({'columnPosition': (layoutSetting.columnPosition)}) %}			
			{% endif %}
			{% if layoutSetting.verticalAlignment != newSettings.verticalAlignment and layoutSetting.verticalAlignment != '' %}
				{% set newSettings = newSettings|merge({'verticalAlignment': (layoutSetting.verticalAlignment)}) %}			
			{% endif %}
			{% if layoutSetting.imagePosition != newSettings.imagePosition and layoutSetting.imagePosition != '' %}
				{% set newSettings = newSettings|merge({'imagePosition': (layoutSetting.imagePosition)}) %}			
			{% endif %}
		{% endif %}		
	{% endfor %}
	{% set classSettings = classSettings|merge({(key): (newSettings)}) %}
{% endfor %}

{% if entry.contentPositionSmall %}
	{% set positionClass = 'order-last' %}
{% else %}
	{% set positionClass = 'order-first' %}
{% endif %}

<section id="{{blockId}}" class="{{- blockClass }} @container {{ gMacros.displayClasses(entry.display, false)}} {{ gMacros.spacingClasses(entry.margins, false) }} {{- sectionClassList|join(' ') }} {{ entry.customClasses }}" {{- gMacros.attributesOut(entry.customAttributes) }}
{% if entry.animate %}
	x-data="{{entry.type.handle}}({{entry.animateContent ? 'true': 'false'}},{{entry.staggerAnimations ? 'true': 'false'}})"	
	x-ref="{% if entry.animateContent %}animparent{% else %}animate{% endif %}"
{% endif %}
>
	<div class="side-section-layout {{ entry.fullscreen ? 'fullscreen' -}}">
		
		<div class="side-photo-content {{positionClass}} {{ _self.contentClasses(classSettings) -}}">
			<div class="side-photo-content-wrapper {% if entry.fullscreen %}w-full{% else %}{{ _self.wrapperClasses(classSettings) }}{% endif %} {{- gMacros.typeClasses(entry.typeSettings, false) -}} {#} {{ gMacros.classesOut(adjustments, 'Padding', true) -}}#}">
				{% for chunk in entry.elementContent %}
					{% if chunk.type == 'markup' %}
						{% if entry.animate and entry.animateContent %}
							{{chunk|raw|retconAttr(['body > p', 'body > ol', 'body > ul'], { 'class' : 'animate' }, false)|retconAttr(['ul'], { 'class' : 'bullet-list' }, false)|typogrify}}
						{% else %}
							{{chunk|raw|retconAttr(['ul'], { 'class' : 'bullet-list' }, false)|typogrify}}
						{% endif %}
					{% else %}
						{{ chunk.entry.render({
							'animSetting': {'animate': entry.animate, 'animateContent': entry.animateContent, 'animLevel': true},
							'colorScheme': colorScheme,
							'paddingSetting': entry.padding
						}) }}
					{% endif %}
				{% endfor %}
			</div>			
		</div>
		
		<div class="side-photo-img {% if entry.animate and entry.animateContent %}animate{% endif %} {{ _self.imgClasses(classSettings) -}}">
			{% set image = entry.defaultPhoto.eagerly().one() %}
			{% set currentAspectAspect = 'auto' %}
			{% set xFormWidth = '' %}
			{% set xFormHeight = '' %}
			{% set imgSettings = entry.imageSettings.eagerly().all() %}
			{% set imgClasses = ['block', 'w-full', '@2xl:absolute', '@2xl:h-full', '@2xl:inset-0', 'object-cover'] %}
			{% set aspectValues =  {
				'df': 'h-auto',
				'@2xs': null,
				'@xs': null,
				'@sm': null,
				'@md': null,
				'@lg': null,
				'@xl': null,
				'@2xl': null,
				'@3xl': null,
				'@4xl': null,
				'@5xl': null,
			} %}
						
			{% for key, setting in classSettings %}
				{% if key == '' %}					
					{% if setting.imagePosition != '' %}
						{% set imgClasses = imgClasses|merge(['object-' ~ setting.imagePosition])%}
					{% endif %}
				{% else %}					
					{% if setting.imagePosition != '' %}
						{% set imgClasses  = imgClasses|merge([ key ~ ':object-' ~ setting.imagePosition ])%}
					{% endif %}
				{% endif %}
			{% endfor %}

			<picture class="w-full h-full relative block">
				{# set ordered array of objects for source settings #}
				{% set srcObjects =  {
					'df': {'minSize': 0, 'aspect': 'auto', 'image': image, 'sizes': '100vw'},
					'xs': {'minSize': 320, 'aspect': null, 'image': null, 'sizes': '100vw'},
					'sm': {'minSize': 640, 'aspect': null, 'image': null, 'sizes': '100vw'},
					'md': {'minSize': 768, 'aspect': null, 'image': null, 'sizes': ''},
					'lg': {'minSize': 1024, 'aspect': null, 'image': null, 'sizes': ''},
					'xl': {'minSize': 1280, 'aspect': null, 'image': null, 'sizes': ''},
					'2xl': {'minSize': 1536, 'aspect': null, 'image': null, 'sizes': ''},		
				} %}

				{% for key, setting in classSettings %}
					
					{# NEED TO SET KEY VALS DIFFERENTLY #}
					
					{% set newKey = key|slice(1) %}
					{% set origSrcObject = srcObjects[newKey] %}
					{% set sizeVal = "calc(80vw * " ~ setting.columnWidth ~ ")" %}
					{% set newSrcObject = origSrcObject|merge({'sizes': sizeVal}) %}
					{% set srcObjects = srcObjects|merge({(newKey): newSrcObject}) %}
				{% endfor %}
				
				{% set sizeAttr = '' %}
				{% for key, src in srcObjects|reverse %}
					{% set sizeAttr = sizeAttr ~ '(min-width: ' ~ src.minSize ~ 'px) ' ~ src.sizes ~ ',' %}
				{% endfor %}

				{% for srcSetting in imgSettings %}
					{# if there is a new image in the adjustment then use it as the image for src attributes #}
					{% if srcSetting.deviceSize == '' %}
						{% set srcSize = 'df' %}
					{% else %}
						{% set srcSize = srcSetting.deviceSize.value %}
					{% endif %}

					{% if srcSetting.imageAsset|length or srcSetting.aspectRatio != '' %}
						{% if srcSetting.imageAsset|length and srcSetting.deviceSize != '' %}
							{% set image = srcSetting.imageAsset.eagerly().one() %}
						{% endif %}
						{% if srcSetting.aspectRatio.value != '' %}				
							{% set currentAspect = srcSetting.aspectRatio.value %}
						{% else %}
							{% set myRatio = currentAspect %}
						{% endif %}
						{% set mySrcObject = srcObjects[(srcSize)] %}			
						{% set mySrcObject = mySrcObject|merge({'image': image, 'aspect': currentAspect}) %}
						{% set srcObjects = srcObjects|merge({(srcSize): mySrcObject}) %}

					{% endif %}		
				{% endfor %}
					
				{# loop through and write in src elements for different breakpoints #}
				
				{% for sizeKey, srcSettings in srcObjects|reverse %}		
					{% if srcSettings.image != null or srcSettings.aspect != null %}
						{% if srcSettings.aspect == 'auto' %}
							{% set xForm = 'contentImage' %}				
						{% else %}
							{% set xForm = 'image-' ~ srcSettings.aspect %}				
						{% endif %}
						{% set transformedImages = craft.imagerx.transformImage(srcSettings.image, xForm) %}
						{% if sizeKey == 'df' %}
							{% if srcSettings.aspect == 'auto' %}				
								{% set xFormWidth = srcSettings.image.width %}
								{% set xFormHeight = srcSettings.image.height %}
							{% else %}				
								{% if srcSettings.aspect == 'video' %}
									{% set numerator = 16 %}
									{% set denominator = 9 %} 
								{% elseif srcSettings.aspect == 'square' %}
									{% set numerator = 1 %}
									{% set denominator = 1 %} 
								{% else %}
									{% set numerator = srcSettings.aspect|split('/')|first %}
									{% set denominator = srcSettings.aspect|split('/')|last %}        
								{% endif %}
								{% set xFormWidth = srcSettings.image.width %}				
								{% set xFormHeight = (srcSettings.image.width * denominator) / numerator %}				
							{% endif %}
							
							<img src="{{ craft.imager.placeholder({width: xFormWidth, height: xFormHeight}) }}"
								width="{{xFormWidth}}"
								height="{{xFormHeight}}"
								sizes="{{sizesAttr}}"
								{% if not entry.lazyLoadImg %}						
									fetchpriority="high"
								{% endif %}    
								srcset="{{ craft.imager.srcset(transformedImages) }}"
								alt="{{ entry.altText }}"
								class="{{imgClasses|join(' ')}}"
								loading="{{entry.lazyLoadImg ? 'lazy' : 'eager'}}"
								decoding="async"
							>
						{% else %}
							<source sizes="100vw" media="(min-width: {{srcSettings.minSize}}px)" srcset="{{ craft.imager.srcset(transformedImages) }}" {% if craft.imager.serverSupportsWebp() %}type="image/webp"{% endif %}>
						{% endif %}
					{% endif %}
				{% endfor %}

			</picture>			
		</div>		
	</div>
</section>

