{#
/**
* Tilt Boilermaker - Generic Slide Block Template
* -----
* 
* 
* @author    TILT, LLC <support@tiltbuilt.com>
* @copyright Copyright (c) 2019, TILT, LLC
* @link      https://tiltbuilt.com
*/
#}

{# Load in global macros for use across all Twig templates #}
{% import '_macros/globalMacros' as gMacros %}

{# Create array for classes to pass to macros for section #}
{% set slideClassList = [] %}

{# Get slide image if there is one #}
{% set image = entry.slideImage.eagerly().one() %}

{% if entry.slideImageSm|length %}
	{% set imageSm = entry.slideImageSm.eagerly().one() %}
{% else %}
	{% set imageSm = image %}
{% endif %}

{% set xFormWidth = '' %}
{% set xFormHeight = '' %}
{% set smXFormWidth = '' %}
{% set smXFormHeight = '' %}

{# Set block id attribute value #}
{% if entry.customId is defined and entry.customId != '' %}
	{% set blockId = entry.customId|replace({' ': '-'})|trim %}
{% else %}
	{% set blockId = 'slide-' ~ entry.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = entry.type.handle|kebab %}

{# Set color classes #}
{% if colorScheme is not defined %}
	{% set colorScheme = "color-theme-default" %}	
{% endif %}
{% set colorClasses = [] %}
{% if entry.colorScheme != null %}
	{% set colorScheme = entry.colorScheme.class %}	
{% endif %}
{% set colorClasses = colorClasses|merge([colorScheme]) %}
{% if entry.bgColor|length %}
	{% set colorClasses = colorClasses|merge(['bg-' ~ entry.bgColor]) %}
{% endif %}
{% set slideClassList = slideClassList|merge(colorClasses) %}

{# Retrieve styling adjustments #}
{#{% set adjustments = entry.slideStyleAdjustments.eagerly().all() %}#}

<div id="{{blockId}}" class="{{blockClass}} swiper-slide @md:pb-0 {{ slideClassList|join(' ') }} {{ entry.customClasses }}" {{- gMacros.attributesOut(entry.customAttributes) -}} {% if entry.slideTimingOverride != '' %}data-swiper-autoplay="{{entry.slideTimingOverride}}"{% endif %}>
	
	{% if image != null %}
		<div class="slide-image aspect-{{slideAspectSm}} @md:aspect-{{slideAspectLg}}">			
			
			{% set mobileXForm = 'image-' ~ slideAspectSm %}
			{% set xForm = 'image-' ~ slideAspectLg %}
			{% if craft.imager.serverSupportsWebp() %}
				{%- set mobileXForm = mobileXForm ~ '-webp' %}
				{%- set xForm = xForm ~ '-webp' %}
			{% endif %}
			{%- set mobileImages = craft.imagerx.transformImage(imageSm, mobileXForm) %}			
			{%- set largerImages = craft.imagerx.transformImage(image, xForm) %}

			{% if slideAspectLg == 'auto' %}				
				{% set xFormWidth = image.width %}
				{% set xFormHeight = image.height %}
			{% else %}				
				{% if slideAspectLg == 'video' %}
					{% set numerator = 16 %}
					{% set denominator = 9 %} 
				{% elseif slideAspectLg == 'square' %}
					{% set numerator = 1 %}
					{% set denominator = 1 %} 
				{% else %}
					{% set numerator = slideAspectLg|split('/')|first %}
					{% set denominator = slideAspectLg|split('/')|last %}        
				{% endif %}
				{% set xFormWidth = image.width %}				
				{% set xFormHeight = (image.width * denominator) / numerator %}				
			{% endif %}

			{% if slideAspectSm == 'auto' %}				
				{% set smXFormWidth = image.width %}
				{% set smXFormHeight = image.height %}
			{% else %}				
				{% if slideAspectSm == 'video' %}
					{% set numerator = 16 %}
					{% set denominator = 9 %} 
				{% elseif slideAspectSm == 'square' %}
					{% set numerator = 1 %}
					{% set denominator = 1 %} 
				{% else %}
					{% set numerator = slideAspectLg|split('/')|first %}
					{% set denominator = slideAspectLg|split('/')|last %}        
				{% endif %}
				{% set smXFormWidth = image.width %}				
				{% set smXFormHeight = (image.width * denominator) / numerator %}				
			{% endif %}
			
			<picture class="w-full h-full">
				<source sizes="100vw" width="{{xFormWidth}}" height="{{xFormHeight}}" media="(min-width: 768px)" srcset="{{ craft.imager.srcset(largerImages) }}" {% if craft.imager.serverSupportsWebp() %}type="image/webp"{% endif %}>
			
				<img src="{{ craft.imager.placeholder({width: smXFormWidth, height: smXFormHeight}) }}"
					width="{{smXFormWidth}}"
					height="{{smXFormHeight}}"
					{% if entry.lazyLoadImg %}
						sizes="auto"
					{% else %}
						fetchpriority="high"
						sizes= "100vw"
					{% endif %}					
					srcset="{{ craft.imager.srcset(mobileImages) }}"
					alt="{{ entry.title }}"
					class="block w-full h-full object-cover object-center"
					loading="{{entry.lazyLoadImg ? 'lazy' : 'eager'}}"
    				decoding="async"
				>
			
			</picture>
						
		</div>
	{% endif %}
	
	
	{# by default layout shifts at med size and above based on size of the container. change size modifier if you want the layout shift to happen at a different size #}
		
	<div class="slide-layout @md:flex @md:{{entry.slideHorizontalLayout}} @md:{{entry.slideVerticalLayout}} {% if image != null %}@md:absolute @md:inset-0{% endif %}">
		<div class="slide-content">
			<div class="slide-content-wrapper {{- gMacros.typeClasses(entry.typeSettings, false) -}} {{- gMacros.spacingClasses(entry.padding, false) -}}">
				{% for chunk in entry.slideContent %}
					{% if chunk.type == 'markup' %}
						{{chunk|raw|retconAttr(['ul'], { 'class' : 'bullet-list' }, false)|typogrify}}
					{% elseif chunk.type == 'button' and entry.wholeSlideLink %}
						{{ chunk.entry.render({
							'animSetting': {'animate': false, 'animateContent': false, 'animLevel': false},
							'colorScheme': colorScheme,
							'linkOverride': 1,
						}) }}
					{% else %}
						{{ chunk.entry.render({
							'animSetting': {'animate': false, 'animateContent': false, 'animLevel': false},
							'colorScheme': colorScheme,
							'linkOverride': 0,
						}) }}
					{% endif %}
				{% endfor %}
			</div>
		</div>		
	</div>
	
</div>