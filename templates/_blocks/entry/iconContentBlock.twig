{#
/**
 * Tilt Boilermaker - Heading Template
 * -----
 * Loads the appropriate page partial or the default
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_macros/globalMacros' as gMacros %}

{# Set block id attribute value #}
{% if entry.customId is defined and entry.customId != '' %}
	{% set blockId = entry.customId|replace({' ': '-'})|trim %}
{% else %}
	{% set blockId = 'icon-block-' ~ entry.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'icon-block' %}

{# Get classes for element animation settings #}
{% if animSetting is defined %}
	{% if animSetting.animate and animSetting.animateContent and animSetting.animLevel %}
		{% set animate = true %}	
	{% else %}
		{% set animate = false %}		
	{% endif %}
{% else %}
	{% set animate = false %}
{% endif %}



{# set Layout Class #}
{% set layoutClasses = [] %}
{% set iconClasses = ['icon-wrapper'] %}
{% set contentClasses = ['icon-content-wrapper'] %}
{% for layoutAdj in entry.iconBlockLayoutAdjustments.eagerly().all() %}
	{% set devSize = layoutAdj.deviceSize %}
	{% if devSize|length %}
		{% set devSize = devSize ~ '/component:' %}	
	{% endif %}	
	{% if layoutAdj.iconBlockLayout == 'horizontal' %}
		{% set layoutClasses = layoutClasses|merge([devSize ~ 'flex-row']) %}
	{% else %}
		{% set layoutClasses = layoutClasses|merge([devSize ~ 'flex-col']) %}
	{% endif %}
	
{% endfor %}

{# set classes for icon #}
{% if colorScheme is not defined %}
	{% set colorScheme = "color-theme-default" %}	
{% endif %}
{% if entry.iconColor != '' %}
	{% set textColor = 'text-' ~ entry.textColor %}
{% else %}
	{% set textColor = '' %}
{% endif %}
{% set contentClasses = contentClasses|merge(['icon-content-wrapper']) %}
{% if entry.iconColor != '' %}
	{% set iconClasses = iconClasses|merge(['icon-' ~ entry.iconColor]) %}
{% else %}
	{% set iconClasses = iconClasses|merge([colorScheme]) %}
{% endif %}

{#}
{% for adjSet in adjustments %}
	{# Get Device Size for Adjustments #}{#}
	{% set devSize = adjSet.deviceSize %}
	{% if devSize|length %}
		{% set devSize = devSize ~ '/component:' %}	
	{% endif %}	
	{% if entry.blockLayout and adjSet.iconVerticalAlignment != '' %}
		{% set iconClasses = iconClasses|merge([devSize ~ 'self-' ~ adjSet.iconVerticalAlignment]) %}
	{% endif %}
{% endfor %}

#}
<div id="{{blockId}}" class="{{ blockClass }} @container/component {{ colorScheme }} {% if animate %}animate{% endif %} {{ gMacros.displayClasses(entry.display, false)}} {{ gMacros.spacingClasses(entry.margins, false) }} {{ entry.customClasses }}" {{- gMacros.attributesOut(entry.customAttributes) }} >
	<div class="icon-layout {{ layoutClasses|join(' ') }}">
		<div class="{{- iconClasses|join(' ') }}">
			{% if  entry.icon.type == 'svg' %}
				{{  entry.icon.inline }}
			{% elseif entry.icon.type == 'css' %}
				<i class="{{ entry.icon }}"></i>								
			{% else %}
				<svg><use xlink:href="/sprites.svg#{{ entry.icon.value }}"></use></svg>
			{% endif %}
		</div>	
		{% if entry.blockContent|length %}
			<div class="{{- contentClasses|join(' ') }} {{ gMacros.typeClasses(entry.typeSettings, true) -}}">
				
				{% for chunk in entry.blockContent %}
					{% if chunk.type == 'markup' %}
						{{chunk|raw|retconAttr(['ul'], { 'class' : 'bullet-list' }, false)|typogrify}}					
					{% else %}
						{{ chunk.entry.render({
							'animSetting': {'animate': false, 'animateContent': false, 'animLevel': false},
							'colorScheme': colorScheme,							
						}) }}
					{% endif %}
				{% endfor %}
				
			</div>
		{% endif %}
	</div>	
</div>
