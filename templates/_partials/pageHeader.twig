{#
/**
 * Tilt Boilermaker - Page Headern Template
 * -----
 * Loads the appropriate page partial or the default
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import '_macros/globalMacros' as gMacros %}

{# Non-modal button code macro #}
{% macro linkCode (button, btnClasses) %}
    <a {% if button.customId|length %}id="{{button.customId}}"{% endif %} href="{{ button.url }}" {{- button.target|length ? ' target="_blank"' : '' }} class="{{- btnClasses|join(' ') }} {{ button.customClasses }}" {% if button.ariaLabel|length %}aria-label="{{button.ariaLabel}}"{% endif %}  {{- gMacros.attributesOut(button.customAttributes) -}}>
        <span>{{ (button.text|length) ? button.text : 'Learn More' }}</span>
    </a>
{% endmacro linkCode %}

{# Set sizing of page header using the sizes set in the global settings #}
{% set smHeaderAspect = gSettings.pgHeaderAspectSm.value %}
{% set mdHeaderAspect = gSettings.pgHeaderAspectMd.value %}
{% set lgHeaderAspect = gSettings.pgHeaderAspectLg.value %}


{# set default color scheme for page header if none is set #}
{% if entry.pageHeaderColorScheme == null %}
    {% set pageHeaderColorScheme = 'color-theme-page-header-default' %}
{% else %}
    {% set pageHeaderColorScheme = entry.pageHeaderColorScheme.class %}
{% endif %}

<div id="{{entry.slug}}-page-header" class="page-header @container {{pageHeaderColorScheme}} " x-data="sectionStandard(true, true)"	
x-ref="animparent">
	<div class="page-header-photo-wrapper aspect-{{smHeaderAspect}} md:aspect-auto md:absolute md:inset-0 md:h-full">       
        {% if not entry.imageryType %}
            {% set image = entry.pageHeaderDefaultImage.eagerly().one() %}
            {% if image != null  %}
                {% set imgSettings = entry.pageHeaderImageArtDirection.eagerly().all() %}
                {% set currentAspectAspect = 'auto' %}
                {% set xFormWidth = '' %}
                {% set xFormHeight = '' %}
                {% set srcObjects =  {
                    'df': {'minSize': 0, 'aspect': 'auto', 'image': image, 'pos': 'center', 'opacity': 'opacity-60'},
                    'xs': {'minSize': 320, 'aspect': null, 'image': null, 'pos': null, 'opacity': null},
                    'sm': {'minSize': 640, 'aspect': null, 'image': null, 'pos': null, 'opacity': null},
                    'md': {'minSize': 768, 'aspect': null, 'image': null, 'pos': null, 'opacity': null},
                    'lg': {'minSize': 1024, 'aspect': null, 'image': null, 'pos': null, 'opacity': null},
                    'xl': {'minSize': 1280, 'aspect': null, 'image': null, 'pos': null, 'opacity': null},
                    '2xl': {'minSize': 1536, 'aspect': null, 'image': null, 'pos': null, 'opacity': null},		
                } %}

                {% set imgClasses = ['block', 'w-full', 'absolute', 'inset-0', 'h-full', 'object-cover'] %}
                
                {% for srcSetting in imgSettings %}
                    {# if there is a new image in the adjustment then use it as the image for src attributes #}
                    {% if srcSetting.deviceSize == '' %}
                        {% set srcSize = 'df' %}
                    {% else %}
                        {% set srcSize = srcSetting.deviceSize.value %}
                    {% endif %}

                    {% if srcSetting.imageAsset|length or srcSetting.aspectRatio != '' or srcSetting.imagePosition != '' or srcSetting.opacity != '' %}
                        {% if srcSetting.imageAsset|length and srcSetting.deviceSize != '' %}
                            {% set image = srcSetting.imageAsset.eagerly().one() %}
                        {% endif %}
                        {% if srcSetting.aspectRatio.value != '' %}				
                            {% set currentAspect = srcSetting.aspectRatio.value %}
                        {% else %}
                            {% set myRatio = currentAspect %}
                        {% endif %}
                        {% if srcSetting.opacity.value != '' %}
                            {% set myOpacity = srcSetting.opacity.value %}
                        {% else %}
                            {% set myOpacity = null %}
                        {% endif %}
                        {% if srcSetting.imagePosition.value != '' %}
                            {% set myPos = srcSetting.imagePosition.value %}
                        {% else %}
                            {% set myPos = null %}
                        {% endif %}
                        {% set mySrcObject = srcObjects[(srcSize)] %}			
                        {% set mySrcObject = mySrcObject|merge({'image': image, 'aspect': currentAspect, 'pos': myPos, 'opacity': myOpacity}) %}
                        {% set srcObjects = srcObjects|merge({(srcSize): mySrcObject}) %}
                    {% endif %}		
                {% endfor %}

                <picture class="absolute inset-0">
                    
                    {% for sizeKey, srcSettings in srcObjects|reverse %}
                        
                        {% if sizeKey == 'df' %}
                            {% set devSize = '' %}
                        {% else %}
                            {% set devSize = sizeKey ~ ':' %}
                        {% endif %}
                        {% if srcSettings.pos != null %}
                            {% set imgClasses = imgClasses|merge([devSize ~ 'object-' ~ srcSettings.pos]) %}                    
                        {% endif %}
                        {% if srcSettings.opacity != null %}
                            {% set imgClasses = imgClasses|merge([devSize ~ srcSettings.opacity]) %}
                        {% endif %}
                        
                        
                        {# if there is an image and/or aspect ratio to use, then output the image or source element #}
                        
                        {% if srcSettings.image != null or srcSettings.aspect != null %}
                            {% if srcSettings.aspect == 'auto' %}
                                {% set xForm = 'contentImage' %}				
                            {% else %}
                                {% set xForm = 'image-' ~ srcSettings.aspect %}				
                            {% endif %}
                            {% set transformedImages = craft.imagerx.transformImage(srcSettings.image, xForm) %}
                            
                            {% if srcSettings.aspect == 'auto' %}				
                                {% set xFormWidth = srcSettings.image.width %}
                                {% set xFormHeight = srcSettings.image.height %}
                            {% else %}				
                                {% if srcSettings.aspect == 'video' %}
                                    {% set numerator = 16 %}
                                    {% set denominator = 9 %} 
                                {% elseif srcSettings.aspect == 'square' %}
                                    {% set numerator = 1 %}
                                    {% set denominator = 1 %} 
                                {% else %}
                                    {% set numerator = srcSettings.aspect|split('/')|first %}
                                    {% set denominator = srcSettings.aspect|split('/')|last %}        
                                {% endif %}
                                {% set xFormWidth = srcSettings.image.width %}				
                                {% set xFormHeight = (srcSettings.image.width * denominator) / numerator %}				
                            {% endif %}
                            
                            {% if sizeKey == 'df' %}
                                <img src="{{ craft.imager.placeholder({width: xFormWidth, height: xFormHeight}) }}"
                                    width="{{xFormWidth}}"
                                    height="{{xFormHeight}}"
                                    fetchpriority="high"
                                    sizes="100vw" 
                                    srcset="{{ craft.imager.srcset(transformedImages) }}"
                                    alt="{{ entry.altText }}"
                                    class="{{imgClasses|join(' ')}}"
                                    loading="eager"
                                    decoding="async"
                                >
                            {% else %}
                                <source sizes="100vw" width="{{xFormWidth}}" height="{{xFormHeight}}" media="(min-width: {{srcSettings.minSize}}px)" srcset="{{ craft.imager.srcset(transformedImages) }}" {% if craft.imager.serverSupportsWebp() %}type="image/webp"{% endif %}>
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                </picture>
            {% endif %}
        {% else %}            
            {% set headerVideo = entry.pageHeaderVideo.eagerly().one() %}
            {% if headerVideo != null %}
                   <div class="background bg-video">
                    <video          
                      class="background object-cover object-center"
                      aria-hidden="true"
                      role="presentation"                      
                      preload autoplay playsinline muted loop
                      data-src="{{ headerVideo.url }}"
                      type="{{ headerVideo.mimeType }}"
                      loading="eager"			  
                    ></video>		
                </div>
            {% endif %}
        {% endif %}
    </div>
    <div class="page-header-layout {{pageHeaderColorScheme}} @2xl:aspect-{{mdHeaderAspect}} @3xl:aspect-{{ lgHeaderAspect}}">
		{% set headlineContent = entry.pageHeader.eagerly().one() %}
        {% if headlineContent != null %}
            {% include ['_blocks/entry/heading'] with {'entry': headlineContent, 'headingLvl': 'h1', 'headlineStyle': 'page-header-headline', 'subheadStyle': 'page-header-subhead', 'colorScheme': pageHeaderColorScheme, 'animSetting': {'animate': true, 'animateContent': true, 'animLevel': true}} %}
        {% else %}
            <h1 class="page-header-headline animate">{{entry.title}}</h1>
        {% endif %}
        
        {% if entry.pageHeaderContent|length %}            
            {% for chunk in entry.pageHeaderContent %}
				{% if chunk.type == 'markup' %}
					{{chunk|raw|retconAttr(['body > p', 'body > ol', 'body > ul'], { 'class' : 'animate page-header-intro' }, false)|retconAttr(['ul'], { 'class' : 'bullet-list' }, false)|typogrify}}					
				{% else %}
					{{ chunk.entry.render({
						'animSetting': {'animate': true, 'animateContent': true, 'animLevel': true},
						'colorScheme': pageHeaderColorScheme,						
					}) }}
				{% endif %}
			{% endfor %}
        {% endif %}
        
	</div>	
</div>