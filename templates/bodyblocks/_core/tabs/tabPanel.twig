{#
/**
 * Tiltrus - Tab Panel - Default
 * -----
 *
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 * @package   tiltrus
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import 'bodyblocks/_core/_macros/globalMacros' as gMacros %}
{# Load in _core Tiltrus Element Display Controls macros #}
{% import 'bodyblocks/_core/_macros/edcMacros' as edcMacros %}
{# Optionally load in project-specific EDC macro overrides #}
{# {% import '_tiltrus/_project/edcMacros' as edcMacros %} #}


{# Set block id attribute value #}
{% if tabPanel.customId is defined and tabPanel.customId != '' %}
	{% set blockId = tabPanel.customId ~ '-panel' %}
{% else %}
	{% set blockId = 'tab-' ~ tabPanel.id ~ '-panel' %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = tabPanel.type.handle %}

{# Get styling classes for block and assemble as class string #}
{% set stylingClasses = [] %}

{% if tabPanel.contentAlignment is defined and tabPanel.contentAlignment != '' %}
	{% set stylingClasses = stylingClasses|merge([tabPanel.contentAlignment]) %}
{% endif %}

{% if tabPanel.textStyling is defined and tabPanel.textStyling != null  %}
	{% set stylingClasses = stylingClasses|merge(tabPanel.textStyling) %}
{% endif %}

{% if openState is defined and openState %}
	{% set stylingClasses = stylingClasses|merge(['active-tab']) %}
{% endif %}

{% set panelAttrs = {'aria-labelledby': labelledBy, 'role': 'tabpanel'} %}

{# build array of padding classes and add to stylingClasses #}

{% set paddingClasses = [] %}
{% set paddingClasses = paddingClasses|merge([tabPanel.topPadding]) %}
{% set paddingClasses = paddingClasses|merge([tabPanel.bottomPadding]) %}
{% set paddingClasses = paddingClasses|merge([tabPanel.leftPadding]) %}
{% set paddingClasses = paddingClasses|merge([tabPanel.rightPadding]) %}


  
{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (tabPanel['customClassList'] is defined ? tabPanel.customClassList : null) %}

<div {{ edcMacros.buildElementAttributes(blockId, blockClass, stylingClasses, customClassString, panelAttrs) -}}>

  <div {{ edcMacros.buildClasses('inner', paddingClasses) -}}>
	{% for child in tabPanel['children'].all() %}

	  {#-
		For each child component, attempt to load a custom template for the
		component handle from the project's files,
		then the same template from the core Tiltrus files,
		then a custom default template from the project,
		and finally the default template for this component type from the core Tiltrus files.
	  -#}	  
	  {% if child.type.handle starts with 'row' %}
		  {%
			include [
			  'bodyblocks/project/rows/' ~ child.type.handle,
			  'bodyblocks/_core/rows/' ~ child.type.handle,
			  'bodyblocks/project/rows/row',
			  'bodyblocks/_core/rows/row'
			] with { 'row' :  child }
		  %}
	  {% elseif child.type.handle starts with 'repeater' %}
		  {%
			include [
			  'bodyblocks/project/repeaters/' ~ child.type.handle,
			  'bodyblocks/_core/repeaters/' ~ child.type.handle,
			  'bodyblocks/project/repeaters/repeater',
			  'bodyblocks/_core/repeaters/repeater'
			] with { 'repeater' :  child }
		  %}
	  {% elseif child.type.handle starts with 'accordion' %}
		{%
		  include [
			'bodyblocks/project/accordions/' ~ child.type.handle,
			'bodyblocks/_core/accordions/' ~ child.type.handle,
			'bodyblocks/project/accordions/accordion',
			'bodyblocks/_core/accordions/accordion'
		  ] with { 'accordion' :  child }
		%}	  
	  {% else %}
		  {%
			include [
			  'bodyblocks/project/blocks/' ~ child.type.handle,
			  'bodyblocks/_core/blocks/' ~ child.type.handle,
			  'bodyblocks/project/blocks/block',
			  'bodyblocks/_core/blocks/block'
			] ignore missing with { 'block' :  child }
		  %}
	  {% endif %}

	{% endfor %}
  </div> 
   
</div>