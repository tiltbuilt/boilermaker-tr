{#
/**
 * Tiltrus - Tab Set
 * -----
 *
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 * @package   tiltrus
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import 'bodyblocks/_core/_macros/globalMacros' as gMacros %}
{# Load in _core Tiltrus Element Display Controls macros #}
{% import 'bodyblocks/_core/_macros/edcMacros' as edcMacros %}
{# Optionally load in project-specific EDC macro overrides #}
{# {% import '_tiltrus/_project/edcMacros' as edcMacros %} #}


{# Set block id attribute value #}
{% if tabSet.customId is defined and tabSet.customId != '' %}
	{% set blockId = tabSet.customId %}
{% else %}
	{% set blockId = 'tabSet-' ~ tabSet.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = tabSet.type.handle %}

{# Get styling and script classes for block and assemble as class string #}
{% set stylingClasses = [] %}


{# add margin classes to stylingClasses #}

{% set stylingClasses = stylingClasses|merge([tabSet.topMargin, tabSet.bottomMargin]) %}


{# reveal animations #}
{% if tabSet.revealAnimation is defined and tabSet.revealAnimation != '' %}  
  {% set stylingClasses = stylingClasses|merge([tabSet.revealAnimation]) %}
{% endif %}
  
{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (tabSet['customClassList'] is defined ? tabSet.customClassList : null) %}

<div {{ edcMacros.buildElementAttributes(blockId, blockClass, stylingClasses, customClassString) -}}>
  
	<div class="tab-button-panel">
		{% for child in tabSet.children.all() %}
		
		  {# Set IDs for appropriate component parts #}
		  
		  {% if child.customId is defined and child.customId != '' %}			  
			  {% set panelId = child.customId ~ '-panel' %}
			  {% set buttonId = child.customId ~ '-button' %}
			  {% set headingId = child.customId ~ '-heading' %}		
		  {% else %}			  
			  {% set panelId = 'tab-' ~ child.id ~ '-panel' %}
			  {% set buttonId = 'tab-' ~ child.id ~ '-button' %}
			  {% set headingId = 'tab-' ~ child.customId ~ '-heading' %}
		  {% endif %}
	
		  {# determine if this is the first loop through children to determine how to set initial state of first clid tabSet #}
		  
		  {% if loop.first == true %}
			  {% set openState = true %}
		  {% else %}
			  {% set openState = false %}
		  {% endif %}
		  
		  {# set up attributes for header and button #}
		  
		  {% set buttonClasses = [] %}
		  {% if openState %}
		  	{% set buttonClasses = buttonClasses|merge(['active-tab']) %}
		  {% endif %}
		  {% set buttonAttrs = {'role': 'tab', 'data-target': '#' ~ panelId, 'aria-controls': panelId, 'data-parent': '#' ~ blockId} %}
		  
		  {#-
			For each child component, attempt to load a custom template for the
			component handle from the project's files,
			then the same template from the core Tiltrus files,
			then a custom default template from the project,
			and finally the default template for this component type from the core Tiltrus files.
		  -#}	  
		  
			<button {{ edcMacros.buildElementAttributes(buttonId, 'tab-button', buttonClasses, '', buttonAttrs) -}}>
				{% if child.iconAsset is defined and child.iconAsset.inline|length %}
					<div class="tab-icon-wrapper">
						{{ child.iconAsset.inline }}
					</div>
				{% endif %}
				<{{ tabSet.headingLevel }} id="{{headingId}}" class="tab-title">{{child.headerText}}</{{ tabSet.headingLevel }}>
			</button>	  
	
		{% endfor %}  
	</div>
	<div class="tab-panel-wrapper {{ tabSet.backgroundColor }}">
		{% for child in tabSet['children'].all() %}
	
		{% if child.customId is defined and child.customId != '' %}			  
			{% set panelId = child.customId ~ '-panel' %}
			{% set buttonId = child.customId ~ '-button' %}
			{% set headingId = child.customId ~ '-heading' %}		
		{% else %}			  
			{% set panelId = 'tab-' ~ child.id ~ '-panel' %}
			{% set buttonId = 'tab-' ~ child.id ~ '-button' %}
			{% set headingId = 'tab-' ~ child.id ~ '-heading' %}
		{% endif %}
		  
		  {# determine if this is the first loop through children to determine how to set initial state of first clid tabSet #}
		  
		  {% if loop.first == true %}
			  {% set openState = true %}
		  {% else %}
			  {% set openState = false %}
		  {% endif %}
		  
		  {#-
			For each child component, attempt to load a custom template for the
			component handle from the project's files,
			then the same template from the core Tiltrus files,
			then a custom default template from the project,
			and finally the default template for this component type from the core Tiltrus files.
		  -#}	  
		  
			{% include [
				'bodyblocks/project/tabs/' ~ child.type.handle,
				'bodyblocks/_core/tabs/' ~ child.type.handle,
				'bodyblocks/project/tabs/tabPanel',
				'bodyblocks/_core/tabs/tabPanel'
			  ] with { 'tabPanel': child, 'parentAccSet': blockId, 'openState': openState, 'labelledBy': headingId }
			%}	  
	
		{% endfor %}
		
		{% if tabSet.backgroundImage|length != 0 %}
			{% set bgAsset = tabSet.backgroundImage[0] %}
			{{ edcMacros.buildElementBackground(bgAsset, tabSet.backgroundOpacity, tabSet.backgroundSize, tabSet.backgroundRepeat, tabSet.backgroundPosition, {'default': '100vw'}) }}
		{% endif %}  
	</div>
   
</div>