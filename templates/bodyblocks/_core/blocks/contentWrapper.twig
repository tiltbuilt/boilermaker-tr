{#
/**
 * Tiltrus - Content Wrapper - Default
 * -----
 *
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 * @package   tiltrus
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import 'bodyblocks/_core/_macros/globalMacros' as gMacros %}
{# Load in _core Tiltrus Element Display Controls macros #}
{% import 'bodyblocks/_core/_macros/edcMacros' as edcMacros %}
{# Optionally load in project-specific EDC macro overrides #}
{# {% import '_tiltrus/_project/edcMacros' as edcMacros %} #}


{# Set block id attribute value #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
{% else %}
	{% set blockId = 'wrapper-' ~ block.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = block.type.handle %}

{# Get styling classes for block and assemble as class string #}
{% set stylingClasses = [] %}


{% if block.contentAlignment is defined and block.contentAlignment != '' %}
	{% set stylingClasses = stylingClasses|merge([block.contentAlignment]) %}
{% endif %}

{% if block.textStyling is defined and block.textStyling != null  %}
	{% set stylingClasses = stylingClasses|merge(block.textStyling) %}
{% endif %}

{% set stylingClasses = stylingClasses|merge([block.topMargin, block.bottomMargin]) %}

{% if block.backgroundColor is defined and block.backgroundColor != '' %}
{% set stylingClasses = stylingClasses|merge([block.backgroundColor]) %}
{% endif %}

{# build array of padding classes for content area #}

{% set paddingClasses = [] %}
{% set paddingClasses = paddingClasses|merge([block.topPadding]) %}
{% set paddingClasses = paddingClasses|merge([block.bottomPadding]) %}
{% set paddingClasses = paddingClasses|merge([block.leftPadding]) %}
{% set paddingClasses = paddingClasses|merge([block.rightPadding]) %}

{# if header has text build set of padding and margin classes for header #}

{% if block.headingText|length and block.headingLevel != '' %}
	{% set headerClasses = [] %}
	{% set headerSpacingClasses = [] %}
	{% set headerSpacingClasses = headerSpacingClasses|merge([block.leftPadding]) %}
	{% set headerSpacingClasses = headerSpacingClasses|merge([block.rightPadding]) %}
	{% set headerSpacingClasses = headerSpacingClasses|merge([block.headingTopPadding]) %}
	{% set headerSpacingClasses = headerSpacingClasses|merge([block.headingBottomPadding]) %}
	{% set headerSpacingClasses = headerSpacingClasses|merge([block.headingBottomMargin]) %}
	{% set headerClasses = headerClasses|merge([block.headerAlignment]) %}
	{% set headerClasses = headerClasses|merge(block.headingStyling) %}
	{% set headerClasses = headerClasses|merge([block.headerBackgroundColor]) %}
	{% set headerClasses = headerClasses|merge(headerSpacingClasses) %}
{% endif %}


  
{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}

<div {{ edcMacros.buildElementAttributes(blockId, blockClass, stylingClasses, customClassString) -}}>

  <div class="inner">
	  
	  {% if block.headingText|length and block.headingLevel != '' %}
		  <{{block.headingLevel}} {{ edcMacros.buildClasses('contentWrapper-header', headerClasses) -}}>
		  	{{ gMacros.stripTags(block.headingText) }}
		  </{{block.headingLevel}}>
	  {% endif %}
	  
	  <div {{ edcMacros.buildClasses('contentBlock', paddingClasses) -}}>
		{% for child in block.children.all() %}
	
		  {#-
			For each child component, attempt to load a custom template for the
			component handle from the project's files,
			then the same template from the core Tiltrus files,
			then a custom default template from the project,
			and finally the default template for this component type from the core Tiltrus files.
		  -#}	  
		  {% if child.type.handle starts with 'row' %}
			  {%
				include [
				  'bodyblocks/project/rows/' ~ child.type.handle,
				  'bodyblocks/_core/rows/' ~ child.type.handle,
				  'bodyblocks/project/rows/row',
				  'bodyblocks/_core/rows/row'
				] with { 'row' :  child }
			  %}
		  {% elseif child.type.handle starts with 'repeater' %}
			  {%
				include [
				  'bodyblocks/project/repeaters/' ~ child.type.handle,
				  'bodyblocks/_core/repeaters/' ~ child.type.handle,
				  'bodyblocks/project/repeaters/repeater',
				  'bodyblocks/_core/repeaters/repeater'
				] with { 'repeater' :  child }
			  %}
		  {% elseif child.type.handle starts with 'accordion' %}
			{%
			  include [
				'bodyblocks/project/accordions/' ~ child.type.handle,
				'bodyblocks/_core/accordions/' ~ child.type.handle,
				'bodyblocks/project/accordions/accordion',
				'bodyblocks/_core/accordions/accordion'
			  ] with { 'accordion' :  child }
			%}
		  {% elseif child.type.handle starts with 'tabSet' %}
			{%
			  include [
				'bodyblocks/project/tabs/' ~ child.type.handle,
				'bodyblocks/_core/tabs/' ~ child.type.handle,
				'bodyblocks/project/tabs/tabSet',
				'bodyblocks/_core/tabs/tabSet'
			  ] with { 'tabSet' :  child }
			%}	  
		  {% else %}
			  {%
				include [
				  'bodyblocks/project/blocks/' ~ child.type.handle,
				  'bodyblocks/_core/blocks/' ~ child.type.handle,
				  'bodyblocks/project/blocks/block',
				  'bodyblocks/_core/blocks/block'
				] ignore missing with { 'block' :  child }
			  %}
		  {% endif %}
	
		{% endfor %}
	  </div>
  </div>
  {% if block.backgroundImage|length != 0 %}
		{% set bgAsset = block.backgroundImage.one() %}
		{{ edcMacros.buildElementBackground(bgAsset, block.backgroundOpacity, block.backgroundSize, block.backgroundRepeat, block.backgroundPosition, {'default': '100vw'}) }}
  {% endif %}
   
</div>