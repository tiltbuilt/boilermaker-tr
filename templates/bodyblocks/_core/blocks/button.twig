{#
/**
 * Block - Button
 * -----
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2020, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import 'bodyblocks/_core/_macros/globalMacros' as gMacros %}
{# Load in _core Tiltrus Element Display Controls macros #}
{% import 'bodyblocks/_core/_macros/edcMacros' as edcMacros %}
{# Optionally load in project-specific EDC macro overrides #}
{# {% import '_tiltrus/_project/edcMacros' as edcMacros %} #}

{# Set block id attribute value #}
{% if blockId is not defined %}
	{% if block.customId is defined and block.customId != '' %}
		{% set blockId = block.customId %}
	{% else %}
		{% set blockId = 'button-' ~ block.id %}
	{% endif %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = block.type.handle %}

{# Get styling classes for block and assemble as class string #}
{% set stylingClasses = [] %}
{% set buttonClasses = [] %}

{% set buttonClasses = buttonClasses|merge([block.buttonStyling]) %}

{% if btnSize is not defined %}
	{% set btnSize = block.buttonSize %}	
{% endif %}

{% if btnSize != '' %}
	{% set buttonClasses = buttonClasses|merge([btnSize]) %}
{% endif %}

{# check if button is inside a button group, if it is, then don't use settings from button because it inherits from the group #}

{% if inGroup is not defined or (inGroup is defined and inGroup == false) %}

	{% if block.fullWidthOnMobile is defined and block.fullWidthOnMobile == 1 %}
		{% set stylingClasses = stylingClasses|merge(['btn-mobile-fullwidth']) %}
	{% endif %}
	
	{% if block.buttonAlignment is defined and block.buttonAlignment != '' %}
		{% set stylingClasses = stylingClasses|merge([block.buttonAlignment]) %}
	{% endif %}
	
	{% if ignoreMargins is not defined or (ignoreMargins is defined and ignoreMargins == false) %}
		{% set stylingClasses = stylingClasses|merge([block.topMargin, block.bottomMargin]) %}
	{% endif %}

{% endif %}


{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}

{# Render #}

{% set buttonLink = block.linkSettings %} 
  {% if buttonLink %}
	  {% if inGroup is not defined or (inGroup is defined and inGroup == false) %}
	  
	  <div {{ edcMacros.buildClasses('btn-wrapper', stylingClasses) -}}>
	  
	{% endif %}
	<a href="{{ buttonLink.url }}" {{- buttonLink.target|length ? ' target="_blank"' : '' }} {{ edcMacros.buildClasses('btn', buttonClasses, customClassString) -}}>
	  <span>{{ buttonLink.text }}</span>
	</a>
	{% if inGroup is not defined or (inGroup is defined and inGroup == false) %}
	
		</div>
	  
	{% endif %}
	
   {% endif %}

