{#
/**
 * Block - CTA - Standard
 * -----
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2020, TILT, LLC
 * @link      https://tiltbuilt.com
 * @package   tiltrus
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import 'bodyblocks/_core/_macros/globalMacros' as gMacros %}
{# Load in _core Tiltrus Element Display Controls macros #}
{% import 'bodyblocks/_core/_macros/edcMacros' as edcMacros %}
{# Optionally load in project-specific EDC macro overrides #}
{# {% import '_tiltrus/_project/edcMacros' as edcMacros %} #}


{# Set block id attribute value #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
{% else %}
	{% set blockId = 'cta-standard-' ~ block.id %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = block.type.handle %}

{# Get styling classes for block and assemble as class string #}
{% set stylingClasses = ['cta', block.topMargin, block.bottomMargin] %}

{# reveal animations #}
{% if block.revealAnimation is defined and block.revealAnimation != '' %}  
  {% set revealClass = block.revealAnimation %}
  {% if block.applyRevealToChildElements %}
	  {% set revealClass = revealClass ~ 'Subs' %}
	{% if block.staggerChildReveals %}
		{% set revealClass = revealClass ~ 'Stagger' %}
	{% endif %}
  {% endif %}
  {% set stylingClasses = stylingClasses|merge([revealClass]) %}
{% endif %}


{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}

{% set headingLevel = block['headingLevel'] is defined and block.headingLevel|length ? block.headingLevel : 'div' %}
  
<div {{ edcMacros.buildElementAttributes(blockId, blockClass, stylingClasses, customClassString) -}}>
  <div class="inner row">
	
	{% if block.imageAsset|length %}
  
		{% set image = block.imageAsset[0] %}
		{% set imageAltText = block.altText is defined and block.altText|length ? block.altText : (image['altText'] is defined and image.altText|length ? image.altText : image.title) %}
		
		<div class="cta-image-wrapper {% if block.imagePlacement %}md:order-last{% else %}md:order-first{% endif %}">
			{%- set transformedImages = craft.imagerx.transformImage(image, 'contentImage')	%}
			
			{% if craft.imager.serverSupportsWebp() %}
			  {% set transformedImagesWebp = craft.imagerx.transformImage(image, 'contentImageWebp') %}
			{% endif %}
			
			{% if transformedImages|length %}			
						  
			  <picture>			  
				  
				  {% if craft.imager.serverSupportsWebp() %}
					  <source data-sizes="auto" data-srcset="{{ craft.imager.srcset(transformedImagesWebp) }}" type="image/webp">
				  {% endif %}
			  
				  <img src="{{ craft.imager.base64Pixel() }}"
				  data-sizes="auto"
				  data-src="{{ transformedImages[0] }}"
				  data-srcset="{{ craft.imager.srcset(transformedImages) }}"
				  alt="{{ imageAltText }}" class="lazyload cta-image"
				  >
			  </picture>
			{% endif %}
		</div>
	{% endif %}
	
	<div class="cta-content-wrapper">
		{% if block.subheadText|length and block.subheadPosition == 1 %}
			<b class='cta-block-header-subhead'>
				{{ gMacros.stripTags(block.subheadText) }}
			</b>
		{% endif %}
		
		<{{ headingLevel }} class='cta-block-heading'>
			{{ gMacros.stripTags(block.headerText) }}
		</{{ headingLevel }}>
		
		{% if block.subheadText|length and block.subheadPosition == 0 %}
			<b class='cta-block-header-subhead'>
				{{ gMacros.stripTags(block.subheadText) }}
			</b>
		{% endif %}
	
		{% if block.simpleText|length %}
		  <div class="content">
			{{ block.simpleText }}
		  </div>
		{% endif %}
	
		{% if block.linkSettings|length %}
		  <a href="{{ block.linkSettings.url }}" class="btn cta-btn">
			{{ block.linkSettings.text }}
			<div class="link-icon">
			  <svg xmlns="http://www.w3.org/2000/svg" viewbox="0 0 30 30">
				<use xlink:href="{{ siteUrl }}images/svg-assets.svg#icon-arrow" href="{{ siteUrl }}images/svg-assets.svg#icon-arrow"></use>
			  </svg>
			</div>
		  </a>
		{% endif %}
	</div>
		
  </div>
</div>
