{#
/**
 * Block - Video
 * -----
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2020, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import 'bodyblocks/_core/_macros/globalMacros' as gMacros %}
{# Load in _core Tiltrus Element Display Controls macros #}
{% import 'bodyblocks/_core/_macros/edcMacros' as edcMacros %}
{# Optionally load in project-specific EDC macro overrides #}
{# {% import '_tiltrus/_project/edcMacros' as edcMacros %} #}


{% if block.youTubeVideoId|length and block.imageAsset|length %}

  {# Set block id attribute value #}
  {% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
	{% set imageId = block.customId ~ '-image' %}
  {% else %}
	{% set blockId = 'videoBlock-' ~ block.id %}
	{% set imageId = 'videoBlock-' ~ block.id ~ '-image' %}
  {% endif %}
  
  {% set image = block.imageAsset[0] %}
  
  {# Set block type handle as class name for styling #}
  {% set blockClass = block.type.handle %}
  
  {# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
  {% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}
    
  {# Set CSS classes for the component and any sub-components #}
  {% set stylingClasses = [block.topMargin, block.bottomMargin] %}
  {% set imageAltText = block.altText is defined and block.altText|length ? block.altText : (image['altText'] is defined and image.altText|length ? image.altText : image.title) %}
  
  
  {# reveal animations #}
  {% if block.revealAnimation is defined and block.revealAnimation != '' %}  
	{% set stylingClasses = stylingClasses|merge([block.revealAnimation]) %}
  {% endif %}
  

<div {{ edcMacros.buildElementAttributes(blockId, blockClass, stylingClasses, customClassString) -}}>
	<div class="inner">

		<div class="video-frame">
		  <div class="video-play-btn">
			<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewbox="0 0 126 126">
			  <use xlink:href="{{ siteUrl }}images/svg-assets.svg#icon-play" href="{{ siteUrl }}dist/img/svg-assets.svg#icon-play"></use>
			</svg>
		  </div>
		  <div class="video-image">
			  
			{%- set transformedImages = craft.imagerx.transformImage(image, 'thumbnail')	%}
			  
			{% if craft.imager.serverSupportsWebp() %}
				{% set transformedImagesWebp = craft.imagerx.transformImage(image, 'thumbnailWebp') %}
			{% endif %}
			  
			{% if transformedImages|length %}		  
			<picture>	  
				  
				  {% if craft.imager.serverSupportsWebp() %}
					  <source data-sizes="auto" data-srcset="{{ craft.imager.srcset(transformedImagesWebp) }}" type="image/webp">
				  {% endif %}
			  
				  <img src="{{ craft.imager.base64Pixel() }}"
				  data-sizes="auto"
				  data-src="{{ transformedImages[0] }}"
				  data-srcset="{{ craft.imager.srcset(transformedImages) }}"
				  alt="{{ imageAltText }}" class="video-thumbnail lazyload"
				  >
			</picture>
			{% endif %}
		  </div>
		  <div class="video-player">
			<div class="video" id="vid-{{ block.youTubeVideoId }}" data-youtube-id="{{ block.youTubeVideoId }}"></div>
		  </div>
		</div>

		{% if block.linkSettings|length %}
			<div class="video-link">
			  <a href="{{ block.linkSettings.url }}" class="btn {{block.buttonStyling}}">{{ block.linkSettings.text }}
				<svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewbox="0 0 32 30">
				  <use xlink:href="{{ siteUrl }}images/svg-assets.svg#icon-arrow" href="{{ siteUrl }}images/svg-assets.svg#icon-arrow"></use>
				</svg>
			  </a>
			</div>
		{% endif %}
	</div>  
</div>
{% endif %}



	