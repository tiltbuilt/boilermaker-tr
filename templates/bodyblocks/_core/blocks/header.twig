{#
/**
 * Block - Header
 * -----
 * A standard header with optional (large) body copy & link buttons
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2020, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import 'bodyblocks/_core/_macros/globalMacros' as gMacros %}
{# Load in _core Tiltrus Element Display Controls macros #}
{% import 'bodyblocks/_core/_macros/edcMacros' as edcMacros %}
{# Optionally load in project-specific EDC macro overrides #}
{# {% import '_tiltrus/_project/edcMacros' as edcMacros %} #}


{# Set block id attribute values #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
	{% set subheadId = block.customId ~ '-subhead' %}	
	{% set headingId = block.customId ~ '-heading' %}
	{% set contentId = block.customId ~ '-content' %}
	{% set buttonSetId = block.customId ~ '-buttonset' %}		
{% else %}
	{% set blockId = 'header-' ~ block.id %}
	{% set subheadId = 'header-' ~ block.id ~ '-subhead' %}	
	{% set headingId = 'header-' ~ block.customId ~ '-heading' %}
	{% set contentId = 'header-' ~ block.customId ~ '-content' %}
	{% set buttonSetId = block.customId ~ '-buttonSet' %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = block.type.handle %}

{# Set CSS classes for the component and any sub-components #}
{% set stylingClasses = [] %}
{# Get styling classes for block and assemble as class string #}
{% if block.contentAlignment is defined and block.contentAlignment != '' %}
	{% set stylingClasses = stylingClasses|merge([block.contentAlignment]) %}
{% endif %}

{% if block.textStyling is defined and block.textStyling != null  %}
	{% set stylingClasses = stylingClasses|merge(block.textStyling) %}
{% endif %}

{% set stylingClasses = stylingClasses|merge([block.topMargin, block.bottomMargin]) %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}


{% set headingClasses = [block.headerAlignment] %}
{% set headingClasses = headingClasses|merge(block.headingStyling) %}

{% set subheadClasses = ['block'] %}
{% set subheadClasses = subheadClasses|merge([block.headerAlignment]) %}
{% set subheadClasses = subheadClasses|merge(block.subheadStyling) %}

{% set blockKids = block['children'] %}

{% if block.subheadText|length or blockKids is not empty %}
	{% set headingClasses = headingClasses|merge([block.headingBottomMargin]) %}
{% endif %}

{% if blockKids is not empty %}
	{% set subheadClasses = subheadClasses|merge([block.subheadBottomMargin]) %}
{% endif %}

{% set headingLevel = block['headingLevel'] is defined and block.headingLevel|length ? block.headingLevel : 'div' %}

<div {{ edcMacros.buildElementAttributes(blockId, blockClass, stylingClasses, customClassString) -}}>
  <div class="inner">
	
		<{{ headingLevel }} {{ edcMacros.buildElementAttributes(blockId, 'header-mainHeading', headingClasses) -}}>
			{{ gMacros.stripTags(block.headingText) }}
		</{{ headingLevel }}>
	  
		{% if block.subheadText|length %}
			<b {{ edcMacros.buildElementAttributes(subheadId, 'header-subhead', subheadClasses) -}}>
				{{ gMacros.stripTags(block.subheadText) }}
			</b>
		{% endif %}
	
	  			
		{% for child in blockKids %}
		
			{% if child.type == 'simpleText' %}
				{% if loop.last != true %}
					{% set contentClass = [block.introTextBottomMargin] %}
				{% else %}
					{% set contentClass = null %}
				{% endif %}
				<div {{ edcMacros.buildElementAttributes(contentId, 'header-content', contentClass) -}}>
					{{ child.simpleText }}
				</div>
			{% else %}	
			
				{% if loop.last != true %}
					{% set marginSetting = false %}
				{% else %}
					{% set marginSetting = true %}
				{% endif %}
				
				{%				
					
					include [
					  'bodyblocks/project/blocks/' ~ child.type.handle,
					  'bodyblocks/_core/blocks/' ~ child.type.handle,
					  'bodyblocks/project/blocks/block',
					  'bodyblocks/_core/blocks/block'
					] ignore missing with { 'block': child, 'blockId': buttonSetId, 'ignoreMargins': marginSetting }
				%}
			{% endif %}
		{% endfor %}
	  	
  </div>
</div>