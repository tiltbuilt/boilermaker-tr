{#
/**
 * Block - Icon and Content
 * -----
 * A vector icon with optional headline, text and buttons
 * 
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2020, TILT, LLC
 * @link      https://tiltbuilt.com
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import 'bodyblocks/_core/_macros/globalMacros' as gMacros %}
{# Load in _core Tiltrus Element Display Controls macros #}
{% import 'bodyblocks/_core/_macros/edcMacros' as edcMacros %}
{# Optionally load in project-specific EDC macro overrides #}
{# {% import '_tiltrus/_project/edcMacros' as edcMacros %} #}

{% if block.iconAsset|length %}
{# Set block id attribute values #}
{% if block.customId is defined and block.customId != '' %}
	{% set blockId = block.customId %}
	{% set iconId = block.customId ~ '-icon' %}	
	{% set headingId = block.customId ~ '-heading' %}
	{% set contentId = block.customId ~ '-content' %}
	{% set buttonSetId = block.customId ~ '-buttonset' %}		
{% else %}
	{% set blockId = 'iconContent-' ~ block.id %}
	{% set iconId = 'iconContent-' ~ block.id ~ '-icon' %}	
	{% set headingId = 'iconContent-' ~ block.id ~ '-heading' %}
	{% set contentId = 'iconContent-' ~ block.id ~ '-content' %}
	{% set buttonSetId = 'iconContent-' ~ block.id ~ '-buttonSet' %}
{% endif %}

{# Set block type handle as class name for styling #}
{% set blockClass = block.type.handle %}

{# Set CSS classes for the component and any sub-components #}
{% set stylingClasses = [] %}
{# Get styling classes for block and assemble as class string #}
{% if block.contentAlignment is defined and block.contentAlignment != '' %}
	{% set stylingClasses = stylingClasses|merge([block.contentAlignment]) %}
{% endif %}

{% if block.textStyling is defined and block.textStyling != null  %}
	{% set stylingClasses = stylingClasses|merge(block.textStyling) %}
{% endif %}

{% set stylingClasses = stylingClasses|merge([block.topMargin, block.bottomMargin]) %}

{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (block['customClassList'] is defined ? block.customClassList : null) %}

{% set iconClasses = [block.iconAlignment] %}
{% set iconClasses = iconClasses|merge([block.iconStyling]) %}

{% if block.headingText|length and block.headingLevel != '' %}
	{% set headingClasses = [block.headerAlignment] %}
	{% set headingClasses = headingClasses|merge(block.headingStyling) %}	
{% endif %}

{% set blockKids = block.children.all() %}

{% if blockKids is not empty %}	
	{% if block.headingText|length and block.headingLevel != '' %}
		{% set headingClasses = headingClasses|merge([block.headingBottomMargin]) %}	
	{% endif %}	
{% endif %}

{% if blockKids is not empty or block.headingText|length %}
	{% set iconClasses = iconClasses|merge([block.subheadBottomMargin]) %}
{% endif %}	

{% set headingLevel = block['headingLevel'] is defined and block.headingLevel|length ? block.headingLevel : 'div' %}

<div {{ edcMacros.buildElementAttributes(blockId, blockClass, stylingClasses, customClassString) -}}>
  <div class="inner">
	  
	  {% if block.blockLayout == 'h' and (block.headingText|length or blockKids is not empty) %}
	  <div class="row {{block.rowHorizontalAlignment}} {{block.rowVerticalAlignment}}">
		  <div class="iconblock-icon-column">
	  {% endif %}
	  
	 {% if block['linkSettings'] is defined and block.linkSettings|length %}
		 {% set iconLink = block.linkSettings %}
		 <a href="{{ iconLink.url }}" title="{{ iconLink.text }}"
		   {{- iconLink.target|length ? ' target="_blank"' : '' -}}
		 >
	 {% endif %}
	   <div {{ edcMacros.buildElementAttributes(iconId, 'iconwrapper', iconClasses) -}}>
		   <svg><use xlink:href="#{{ block.iconAsset.sprite }}"></use></svg>
	   </div>
	 {% if block['linkSettings'] is defined and block.linkSettings|length %}			
	   </a>
	 {% endif %}
	 
	 {% if block.blockLayout == 'h' and (block.headingText|length or blockKids is not empty) %}
	   </div>
	   <div class="iconblock-content-column">
	 {% endif %}	 
	 
	{% if block.headingText|length and block.headingLevel != '' %}
		
		{% if block['linkSettings'] is defined and block.linkSettings|length %}
		 {% set iconLink = block.linkSettings %}
		 <a href="{{ iconLink.url }}" title="{{ iconLink.text }}"
		   {{- iconLink.target|length ? ' target="_blank"' : '' -}}
		 >
	 	{% endif %}		
		<{{ headingLevel }} {{ edcMacros.buildElementAttributes(blockId, 'iconblock-heading', headingClasses) -}}>
			{{ gMacros.stripTags(block.headingText, '<b><strong><i><em><br>') }}
		</{{ headingLevel }}>		
		{% if block['linkSettings'] is defined and block.linkSettings|length %}			
		   </a>
		 {% endif %}
	{% endif %}  
			
				  
		{% for child in blockKids %}
		
			{% if child.type == 'simpleText' %}
				{% if loop.last != true %}
					{% set contentClass = [block.introTextBottomMargin] %}
				{% else %}
					{% set contentClass = null %}
				{% endif %}
				<div {{ edcMacros.buildElementAttributes(contentId, 'iconblock-content', contentClass) -}}>
					{{ child.simpleText }}
				</div>
			{% else %}	
			
				{% if loop.last != true %}
					{% set marginSetting = false %}
				{% else %}
					{% set marginSetting = true %}
				{% endif %}
				
				{%					
					include [
					  'bodyblocks/project/blocks/' ~ child.type.handle,
					  'bodyblocks/_core/blocks/' ~ child.type.handle,
					  'bodyblocks/project/blocks/block',
					  'bodyblocks/_core/blocks/block'
					] ignore missing with { 'block': child, 'blockId': buttonSetId, 'ignoreMargins': marginSetting }
				%}
			{% endif %}
		{% endfor %}
		
		{% if block.blockLayout == 'h' and (block.headingText|length or blockKids is not empty) %}
		   </div>
	  	 </div>
		{% endif %}
		  
  </div>
</div>
{% endif %}