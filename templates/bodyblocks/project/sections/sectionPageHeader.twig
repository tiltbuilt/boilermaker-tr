{#
/**
 * Tiltrus - Section - Page Header
 * -----
 *
 * @author    TILT, LLC <support@tiltbuilt.com>
 * @copyright Copyright (c) 2019, TILT, LLC
 * @link      https://tiltbuilt.com
 * @package   tiltrus
 */
#}

{# Load in global macros for use across all Twig templates #}
{% import 'bodyblocks/_core/_macros/globalMacros' as gMacros %}
{# Load in _core Tiltrus Element Display Controls macros #}
{% import 'bodyblocks/_core/_macros/edcMacros' as edcMacros %}
{# Optionally load in project-specific EDC macro overrides #}
{# {% import '_tiltrus/_project/edcMacros' as edcMacros %} #}


{# Set block id attribute value #}
{% set blockId = 'pageheader-' ~ entry.id %}
{% set headingId = blockId ~ '-heading' %}
{% set contentId = blockId ~ '-content' %}

{# Set block type handle as class name for styling #}
{% set blockClass = 'pageHeader' %}


{# set main heading text #}

{% if entry.headerText|length %}
	{% set headerContent = entry.headerText %}
{% else %}
	{% set headerContent = entry.title %}
{% endif %}


{# Get styling classes for block and assemble as class string #}
{% set stylingClasses = [] %}

{% if entry.pageHeaderContentAlignment is defined and entry.pageHeaderContentAlignment != 'useDefault' %}
	{% set stylingClasses = stylingClasses|merge([entry.pageHeaderContentAlignment]) %}
{% endif %}

{% if entry.textStyling is defined %}
	{% set stylingClasses = stylingClasses|merge(entry.textStyling) %}
{% endif %}

{# add background color class to stylingClasses if it isn't empty #}

{% if entry.pageHeaderBackgroundColor is defined and entry.pageHeaderBackgroundColor != 'useDefault' %}
	{% set stylingClasses = stylingClasses|merge([entry.pageHeaderBackgroundColor]) %}
{% endif %}
  
{# Get the component's "Custom Class List" setting, thru which arbitrary classes can be added to the component #}
{% set customClassString = (entry['customClassList'] is defined ? entry.customClassList : null) %}


{# set up styling lists for the main header and subhead #}

{% set headerStylingClasses = [] %}

{% if entry.pageHeaderAlignment is defined and entry.pageHeaderAlignment != 'useDefault' %}
	{% set headerStylingClasses = headerStylingClasses|merge([entry.pageHeaderAlignment]) %}
{% endif %}

{% if entry.headingStyling is defined %}
	{% set headerStylingClasses = headerStylingClasses|merge(entry.headingStyling) %}
{% endif %}


{% if entry.subheadText|length %}
	{% set subheadStylingClasses = ['block'] %}
	{% set subheadId = blockId ~ '-subhead' %}	
	
	{% if entry.pageHeaderAlignment is defined and entry.pageHeaderAlignment != 'useDefault' %}
		{% set subheadStylingClasses = subheadStylingClasses|merge([entry.pageHeaderAlignment]) %}
	{% endif %}

	{% if entry.subheadStyling is defined %}
		{% set subheadStylingClasses = subheadStylingClasses|merge(entry.subheadStyling) %}
	{% endif %}	
{% endif %}


<section {{ edcMacros.buildElementAttributes(blockId, blockClass, stylingClasses, customClassString) -}}>

  <div class="inner">
	{# this is where you can customize the layout of the page header to suit your design. #}
	
	<div class="container p-normal">
		<div class="row mx-negnormal p-0 justify-center items-center">
		{# using a row because of flex properties so that it is easier to vertically center content #}
		
			{# conditional checks for content image in the header. If there is one, it shows the image first on mobile and then the content. If there is no image then it shows the content in a full width div. This can all be changed to fit your design #}
			
			{% if entry.headerImage|length %}
			
				{% set imageStylingClasses = ['lazyload'] %}
				{% set imageId = blockId ~ '-image' %}
				
				{% set image = entry.headerImage[0] %}
				{% set imageAltText = entry.altText is defined and entry.altText|length ? entry.altText : (image['altText'] is defined and image.altText|length ? image.altText : image.title) %}
				
				{% if entry.imageStyling is defined %}
					{% set imageStylingClasses = imageStylingClasses|merge(entry.imageStyling) %}
				{% endif %}
				
				<div class="page-header-image-wrapper {% if entry.imagePlacement %}md:order-last{% else %}md:order-first{% endif %}">
					{%- set transformedImages = craft.imagerx.transformImage(image, 'contentImage')	%}
					
					{% if craft.imager.serverSupportsWebp() %}
					  {% set transformedImagesWebp = craft.imagerx.transformImage(image, 'contentImageWebp') %}
					{% endif %}
					
					{% if transformedImages|length %}			
								  
					  <picture>			  
						  
						  {% if craft.imager.serverSupportsWebp() %}
							  <source data-sizes="auto" data-srcset="{{ craft.imager.srcset(transformedImagesWebp) }}" type="image/webp">
						  {% endif %}
					  
						  <img src="{{ craft.imager.base64Pixel() }}"
						  id="{{- imageId -}}"
						  data-sizes="auto"
						  data-src="{{ transformedImages[0] }}"
						  data-srcset="{{ craft.imager.srcset(transformedImages) }}"
						  alt="{{ imageAltText }}" {{ edcMacros.buildClasses('pageheader-image', imageStylingClasses) -}}
						  >
					  </picture>
					{% endif %}
				</div>		
			{% endif %}
			
			<div class="page-header-content-wrapper">
				
				{% if entry.showBreadcrumbs %}
					<div class="breadcrumbs">
						<ul>
							{% for crumb in craft.navigation.breadcrumbs() %}
								<li>
									{{- crumb.link -}}
								</li>
							{% endfor %}
						</ul>
					</div>				
				{% endif %}
				
				{% if entry.subheadText|length and entry.subheadPosition == 1 %}
				  <b {{ edcMacros.buildElementAttributes(subheadId, 'pageheader-subhead', subheadStylingClasses) -}}>
					  {{ gMacros.stripTags(entry.subheadText) }}
				  </b>
				{% endif %}
				
				<h1 {{ edcMacros.buildElementAttributes(headingId, 'pageheader-headline', headerStylingClasses) -}}>
					{{ headerContent }}
				</h1>
			  
				{% if entry.subheadText|length and entry.subheadPosition == 0 %}
				  <b {{ edcMacros.buildElementAttributes(subheadId, 'pageheader-subhead', subheadStylingClasses) -}}>
					  {{ gMacros.stripTags(entry.subheadText) }}
				  </b>
				{% endif %}
				
				{% if entry.headerIntro|length %}
					<div id="{{contentId}}" class="pageheader-content">
						{{ entry.headerIntro }}
					</div>
				{% endif %}
				
				{% if entry.headerLinkButtons|length %}
					{% set buttonSetId = blockId ~ '-button-set' %}					
					
					<div id="{{buttonSetId}}" class="pageheader-buttons {{entry.buttonAlignment}}">
						{% for button in entry.headerLinkButtons %}
							<a href="{{ button.linkSettings.url }}" {{- button.linkSettings|length ? ' target="_blank"' : '' }} class="btn btn-pageheader {{button.buttonStyling}}">
								<span>{{ button.linkSettings.text }}</span>
							</a>
						{% endfor %}
					</div>
				{% endif %}
			</div>
			
		</div>
	</div>
	{# end of customization area #}
  </div>
  
  {% if entry.headerBackground|length != 0 %}
	  {% set bgAsset = entry.headerBackground[0] %}	  	  	  
	  {{ edcMacros.buildElementBackground(bgAsset, entry.backgroundOpacity, entry.backgroundSize, entry.backgroundRepeat, entry.backgroundPosition, {'default': '100vw'}) }}
  {% endif %}
 
</section>